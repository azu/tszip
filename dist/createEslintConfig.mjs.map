{"version":3,"file":"createEslintConfig.mjs","sources":["../src/createEslintConfig.ts","../src/utils.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { CLIEngine } from 'eslint';\nimport { PackageJson } from './types';\nimport { getReactVersion } from './utils';\n\ninterface CreateEslintConfigArgs {\n  pkg: PackageJson;\n  rootDir: string;\n  writeFile: boolean;\n}\nexport async function createEslintConfig({\n  pkg,\n  rootDir,\n  writeFile,\n}: CreateEslintConfigArgs): Promise<CLIEngine.Options['baseConfig'] | void> {\n  const isReactLibrary = Boolean(getReactVersion(pkg));\n\n  const config = {\n    extends: [\n      'react-app',\n      'prettier/@typescript-eslint',\n      'plugin:prettier/recommended',\n    ],\n    settings: {\n      react: {\n        // Fix for https://github.com/jaredpalmer/tsdx/issues/279\n        version: isReactLibrary ? 'detect' : '999.999.999',\n      },\n    },\n  };\n\n  if (!writeFile) {\n    return config;\n  }\n\n  const file = path.join(rootDir, '.eslintrc.js');\n  try {\n    await fs.writeFile(\n      file,\n      `module.exports = ${JSON.stringify(config, null, 2)}`,\n      { flag: 'wx' }\n    );\n  } catch (e: any) {\n    if (e.code === 'EEXIST') {\n      console.error(\n        'Error trying to save the Eslint configuration file:',\n        `${file} already exists.`\n      );\n    } else {\n      console.error(e);\n    }\n\n    return config;\n  }\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function (relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n"],"names":["async","createEslintConfig","pkg","rootDir","writeFile","config","extends","settings","react","version","Boolean","e","devDependencies","getReactVersion","file","path","join","fs","JSON","stringify","flag","code","console","error"],"mappings":"4GAWOA,eAAeC,GAAmBC,IACvCA,EAAGC,QACHA,EAAOC,UACPA,IAEA,MAEMC,EAAS,CACbC,QAAS,CACP,YACA,8BACA,+BAEFC,SAAU,CACRC,MAAO,CAELC,QAXiBC,+BC4BvBC,sBAEsBC,8BD9BSC,CAAgBX,IAWf,SAAW,iBAK3C,IAAKE,EACH,OAAOC,EAGT,MAAMS,EAAOC,EAAKC,KAAKb,EAAS,gBAChC,UACQc,EAAGb,UACPU,EACA,oBAAoBI,KAAKC,UAAUd,EAAQ,KAAM,KACjD,CAAEe,KAAM,OAEV,MAAOT,GAUP,MATe,WAAXA,EAAEU,KACJC,QAAQC,MACN,sDACA,GAAGT,qBAGLQ,QAAQC,MAAMZ,GAGTN"}