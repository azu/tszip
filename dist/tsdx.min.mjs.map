{"version":3,"file":"tsdx.min.mjs","sources":["../src/logError.ts","../src/utils.ts","../src/constants.ts","../src/getInstallCmd.ts","../src/output.ts","../src/messages.ts","../src/errors/invertObject.ts","../src/errors/evalToString.ts","../src/errors/extractErrors.ts","../src/babelPluginTsdx.ts","../src/createRollupConfig.ts","../src/createBuildConfigs.ts","../src/templates/basic.ts","../src/templates/react.ts","../src/templates/index.ts","../src/templates/react-with-storybook.ts","../src/deprecated.ts","../src/index.ts","../src/templates/utils/index.ts","../src/getInstallArgs.ts","../src/createProgressEstimator.ts","../src/createJestConfig.ts","../src/createEslintConfig.ts"],"sourcesContent":["import chalk from 'chalk';\n\nconst stderr = console.error.bind(console);\n\nexport default function logError(err: any) {\n  const error = err.error || err;\n  const description = `${error.name ? error.name + ': ' : ''}${error.message ||\n    error}`;\n  const message = error.plugin\n    ? error.plugin === 'rpt2'\n      ? `(typescript) ${description}`\n      : `(${error.plugin} plugin) ${description}`\n    : description;\n\n  stderr(chalk.bold.red(message));\n\n  if (error.loc) {\n    stderr();\n    stderr(`at ${error.loc.file}:${error.loc.line}:${error.loc.column}`);\n  }\n\n  if (error.frame) {\n    stderr();\n    stderr(chalk.dim(error.frame));\n  } else if (err.stack) {\n    const headlessStack = error.stack.replace(message, '');\n    stderr(chalk.dim(headlessStack));\n  }\n\n  stderr();\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function(relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n","import { resolveApp } from './utils';\n\nexport const paths = {\n  appPackageJson: resolveApp('package.json'),\n  tsconfigJson: resolveApp('tsconfig.json'),\n  testsSetup: resolveApp('test/setupTests.ts'),\n  appRoot: resolveApp('.'),\n  appSrc: resolveApp('src'),\n  appErrorsJson: resolveApp('errors/codes.json'),\n  appErrors: resolveApp('errors'),\n  appDist: resolveApp('dist'),\n  appConfig: resolveApp('tsdx.config.js'),\n  jestConfig: resolveApp('jest.config.js'),\n  progressEstimatorCache: resolveApp('node_modules/.cache/.progress-estimator'),\n};\n","import execa from 'execa';\n\nlet cmd: InstallCommand;\n\nexport type InstallCommand = 'yarn' | 'npm';\n\nexport default async function getInstallCmd(): Promise<InstallCommand> {\n  if (cmd) {\n    return cmd;\n  }\n\n  try {\n    await execa('yarnpkg', ['--version']);\n    cmd = 'yarn';\n  } catch (e) {\n    cmd = 'npm';\n  }\n\n  return cmd;\n}\n","import { eraseLine } from 'ansi-escapes';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\n// This was copied from Razzle. Lots of unused stuff.\nexport const info = (msg: string) => {\n  console.log(`${chalk.gray('>')} ${msg}`);\n};\n\nexport const error = (msg: string | Error) => {\n  if (msg instanceof Error) {\n    msg = msg.message;\n  }\n\n  console.error(`${chalk.red('> Error!')} ${msg}`);\n};\n\nexport const success = (msg: string) => {\n  console.log(`${chalk.green('> Success!')} ${msg}`);\n};\n\nexport const wait = (msg: string) => {\n  const spinner = ora(chalk.green(msg));\n  spinner.color = 'blue';\n  spinner.start();\n\n  return () => {\n    spinner.stop();\n    process.stdout.write(eraseLine);\n  };\n};\n\nexport const cmd = (cmd: string) => {\n  return chalk.bold(chalk.cyan(cmd));\n};\n\nexport const code = (cmd: string) => {\n  return `${chalk.gray('`')}${chalk.bold(cmd)}${chalk.gray('`')}`;\n};\n\nexport const param = (param: string) => {\n  return chalk.bold(`${chalk.gray('{')}${chalk.bold(param)}${chalk.gray('}')}`);\n};\n","import chalk from 'chalk';\nimport getInstallCmd from './getInstallCmd';\nimport * as Output from './output';\n\n// This was copied from Razzle. Lots of unused stuff.\nconst program = {\n  name: 'tsdx',\n};\n\nexport const help = function() {\n  return `\n    Only ${chalk.green('<project-directory>')} is required.\n    If you have any problems, do not hesitate to file an issue:\n    ${chalk.cyan('https://github.com/formium/tsdx/issues/new')}\n  `;\n};\n\nexport const missingProjectName = function() {\n  return `\nPlease specify the project directory:\n  ${chalk.cyan(program.name)} ${chalk.green('<project-directory>')}\nFor example:\n  ${chalk.cyan(program.name)} ${chalk.green('my-tsdx-lib')}\nRun ${chalk.cyan(`${program.name} --help`)} to see all options.\n`;\n};\n\nexport const alreadyExists = function(projectName: string) {\n  return `\nUh oh! Looks like there's already a directory called ${chalk.red(\n    projectName\n  )}. Please try a different name or delete that folder.`;\n};\n\nexport const installing = function(packages: string[]) {\n  const pkgText = packages\n    .map(function(pkg) {\n      return `    ${chalk.cyan(chalk.bold(pkg))}`;\n    })\n    .join('\\n');\n\n  return `Installing npm modules:\n${pkgText}\n`;\n};\n\nexport const installError = function(packages: string[]) {\n  const pkgText = packages\n    .map(function(pkg) {\n      return `${chalk.cyan(chalk.bold(pkg))}`;\n    })\n    .join(', ');\n\n  Output.error(`Failed to install ${pkgText}, try again.`);\n};\n\nexport const copying = function(projectName: string) {\n  return `\nCreating ${chalk.bold(chalk.green(projectName))}...\n`;\n};\n\nexport const start = async function(projectName: string) {\n  const cmd = await getInstallCmd();\n\n  const commands = {\n    install: cmd === 'npm' ? 'npm install' : 'yarn install',\n    build: cmd === 'npm' ? 'npm run build' : 'yarn build',\n    start: cmd === 'npm' ? 'npm run start' : 'yarn start',\n    test: cmd === 'npm' ? 'npm test' : 'yarn test',\n  };\n\n  return `\n  ${chalk.green('Awesome!')} You're now ready to start coding.\n  \n  I already ran ${Output.cmd(commands.install)} for you, so your next steps are:\n    ${Output.cmd(`cd ${projectName}`)}\n  \n  To start developing (rebuilds on changes):\n    ${Output.cmd(commands.start)}\n  \n  To build for production:\n    ${Output.cmd(commands.build)}\n\n  To test your library with Jest:\n    ${Output.cmd(commands.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${chalk.green('https://github.com/formium/tsdx/issues')}\n`;\n};\n\nexport const incorrectNodeVersion = function(requiredVersion: string) {\n  return `Unsupported Node version! Your current Node version (${chalk.red(\n    process.version\n  )}) does not satisfy the requirement of Node ${chalk.cyan(requiredVersion)}.`;\n};\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/invertObject.js\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * turns\n *   { 'MUCH ERROR': '0', 'SUCH WRONG': '1' }\n * into\n *   { 0: 'MUCH ERROR', 1: 'SUCH WRONG' }\n */\n\ntype Dict = { [key: string]: any };\n\nexport function invertObject(targetObj: Dict) {\n  const result: Dict = {};\n  const mapKeys = Object.keys(targetObj);\n\n  for (const originalKey of mapKeys) {\n    const originalVal = targetObj[originalKey];\n\n    result[originalVal] = originalKey;\n  }\n\n  return result;\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/shared/evalToString.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport function evalToString(ast: any): string {\n  switch (ast.type) {\n    case 'StringLiteral':\n    case 'Literal': // ESLint\n      return ast.value;\n    case 'BinaryExpression': // `+`\n      if (ast.operator !== '+') {\n        throw new Error('Unsupported binary operator ' + ast.operator);\n      }\n      return evalToString(ast.left) + evalToString(ast.right);\n    default:\n      throw new Error('Unsupported type ' + ast.type);\n  }\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/extract-errors.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs-extra';\nimport { parse, ParserOptions } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport { invertObject } from './invertObject';\nimport { evalToString } from './evalToString';\nimport { paths } from '../constants';\nimport { safeVariableName } from '../utils';\nimport { pascalCase } from 'pascal-case';\n\nconst babelParserOptions: ParserOptions = {\n  sourceType: 'module',\n  // As a parser, @babel/parser has its own options and we can't directly\n  // import/require a babel preset. It should be kept **the same** as\n  // the `babel-plugin-syntax-*` ones specified in\n  // https://github.com/facebook/fbjs/blob/master/packages/babel-preset-fbjs/configure.js\n  plugins: [\n    'classProperties',\n    'flow',\n    'jsx',\n    'trailingFunctionCommas',\n    'objectRestSpread',\n  ],\n} as ParserOptions; // workaround for trailingFunctionCommas syntax\n\nexport async function extractErrors(opts: any) {\n  if (!opts || !opts.errorMapFilePath) {\n    throw new Error(\n      'Missing options. Ensure you pass an object with `errorMapFilePath`.'\n    );\n  }\n\n  if (!opts.name || !opts.name) {\n    throw new Error('Missing options. Ensure you pass --name flag to tsdx');\n  }\n\n  const errorMapFilePath = opts.errorMapFilePath;\n  let existingErrorMap: any;\n  try {\n    /**\n     * Using `fs.readFile` instead of `require` here, because `require()` calls\n     * are cached, and the cache map is not properly invalidated after file\n     * changes.\n     */\n    const fileContents = await fs.readFile(errorMapFilePath, 'utf-8');\n    existingErrorMap = JSON.parse(fileContents);\n  } catch (e) {\n    existingErrorMap = {};\n  }\n\n  const allErrorIDs = Object.keys(existingErrorMap);\n  let currentID: any;\n\n  if (allErrorIDs.length === 0) {\n    // Map is empty\n    currentID = 0;\n  } else {\n    currentID = Math.max.apply(null, allErrorIDs as any) + 1;\n  }\n\n  // Here we invert the map object in memory for faster error code lookup\n  existingErrorMap = invertObject(existingErrorMap);\n\n  function transform(source: string) {\n    const ast = parse(source, babelParserOptions);\n\n    traverse(ast, {\n      CallExpression: {\n        exit(astPath: any) {\n          if (astPath.get('callee').isIdentifier({ name: 'invariant' })) {\n            const node = astPath.node;\n\n            // error messages can be concatenated (`+`) at runtime, so here's a\n            // trivial partial evaluator that interprets the literal value\n            const errorMsgLiteral = evalToString(node.arguments[1]);\n            addToErrorMap(errorMsgLiteral);\n          }\n        },\n      },\n    });\n  }\n\n  function addToErrorMap(errorMsgLiteral: any) {\n    if (existingErrorMap.hasOwnProperty(errorMsgLiteral)) {\n      return;\n    }\n    existingErrorMap[errorMsgLiteral] = '' + currentID++;\n  }\n\n  async function flush() {\n    const prettyName = pascalCase(safeVariableName(opts.name));\n    // Ensure that the ./src/errors directory exists or create it\n    await fs.ensureDir(paths.appErrors);\n\n    // Output messages to ./errors/codes.json\n    await fs.writeFile(\n      errorMapFilePath,\n      JSON.stringify(invertObject(existingErrorMap), null, 2) + '\\n',\n      'utf-8'\n    );\n\n    // Write the error files, unless they already exist\n    await fs.writeFile(\n      paths.appErrors + '/ErrorDev.js',\n      `\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      `,\n      'utf-8'\n    );\n\n    await fs.writeFile(\n      paths.appErrors + '/ErrorProd.js',\n      `\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \\`Minified ${prettyName} error #$\\{code}; visit $\\{url} for the full message or \\` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,\n      'utf-8'\n    );\n  }\n\n  return async function extractErrors(source: any) {\n    transform(source);\n    await flush();\n  };\n}\n","/**\n * @todo Do not use require.resolve so that the package can ship as ESM.\n */\n\nimport { createConfigItem } from '@babel/core';\nimport { createBabelInputPluginFactory } from '@rollup/plugin-babel';\nimport merge from 'lodash.merge';\n\nexport const isTruthy = (obj?: any) => {\n  if (!obj) {\n    return false;\n  }\n\n  return obj.constructor !== Object || Object.keys(obj).length > 0;\n};\n\n// replace lodash with lodash-es, but not lodash/fp\nconst replacements = [{ original: 'lodash(?!/fp)', replacement: 'lodash-es' }];\n\nexport const mergeConfigItems = (type: any, ...configItemsToMerge: any[]) => {\n  const mergedItems: any[] = [];\n\n  configItemsToMerge.forEach(configItemToMerge => {\n    configItemToMerge.forEach((item: any) => {\n      const itemToMergeWithIndex = mergedItems.findIndex(\n        mergedItem => mergedItem.file.resolved === item.file.resolved\n      );\n\n      if (itemToMergeWithIndex === -1) {\n        mergedItems.push(item);\n        return;\n      }\n\n      mergedItems[itemToMergeWithIndex] = createConfigItem(\n        [\n          mergedItems[itemToMergeWithIndex].file.resolved,\n          merge(mergedItems[itemToMergeWithIndex].options, item.options),\n        ],\n        {\n          type,\n        }\n      );\n    });\n  });\n\n  return mergedItems;\n};\n\nexport const createConfigItems = (type: any, items: any[]) => {\n  return items.map(({ name, ...options }) => {\n    return createConfigItem([require.resolve(name), options], { type });\n  });\n};\n\nexport const babelPluginTsdx = createBabelInputPluginFactory(() => ({\n  // Passed the plugin options.\n  options({ custom: customOptions, ...pluginOptions }: any) {\n    return {\n      // Pull out any custom options that the plugin might have.\n      customOptions,\n\n      // Pass the options back with the two custom options removed.\n      pluginOptions,\n    };\n  },\n  config(config: any, { customOptions }: any) {\n    const defaultPlugins = createConfigItems(\n      'plugin',\n      [\n        // {\n        //   name: '@babel/plugin-transform-react-jsx',\n        //   pragma: customOptions.jsx || 'h',\n        //   pragmaFrag: customOptions.jsxFragment || 'Fragment',\n        // },\n        { name: 'babel-plugin-macros' },\n        { name: 'babel-plugin-annotate-pure-calls' },\n        { name: 'babel-plugin-dev-expression' },\n        customOptions.format !== 'cjs' && {\n          name: 'babel-plugin-transform-rename-import',\n          replacements,\n        },\n        {\n          name: 'babel-plugin-polyfill-regenerator',\n          // don't pollute global env as this is being used in a library\n          method: 'usage-pure',\n        },\n        {\n          name: '@babel/plugin-proposal-class-properties',\n          loose: true,\n        },\n        isTruthy(customOptions.extractErrors) && {\n          name: './errors/transformErrorMessages',\n        },\n      ].filter(Boolean)\n    );\n\n    const babelOptions = config.options || {};\n    babelOptions.presets = babelOptions.presets || [];\n\n    const presetEnvIdx = babelOptions.presets.findIndex((preset: any) =>\n      preset.file.request.includes('@babel/preset-env')\n    );\n\n    // if they use preset-env, merge their options with ours\n    if (presetEnvIdx !== -1) {\n      const presetEnv = babelOptions.presets[presetEnvIdx];\n      babelOptions.presets[presetEnvIdx] = createConfigItem(\n        [\n          presetEnv.file.resolved,\n          merge(\n            {\n              loose: true,\n              targets: customOptions.targets,\n            },\n            presetEnv.options,\n            {\n              modules: false,\n            }\n          ),\n        ],\n        {\n          type: `preset`,\n        }\n      );\n    } else {\n      // if no preset-env, add it & merge with their presets\n      const defaultPresets = createConfigItems('preset', [\n        {\n          name: '@babel/preset-env',\n          targets: customOptions.targets,\n          modules: false,\n          loose: true,\n        },\n      ]);\n\n      babelOptions.presets = mergeConfigItems(\n        'preset',\n        defaultPresets,\n        babelOptions.presets\n      );\n    }\n\n    // Merge babelrc & our plugins together\n    babelOptions.plugins = mergeConfigItems(\n      'plugin',\n      defaultPlugins,\n      babelOptions.plugins || []\n    );\n\n    return babelOptions;\n  },\n}));\n","import { safeVariableName, safePackageName, external } from './utils';\nimport { paths } from './constants';\nimport { RollupOptions } from 'rollup';\nimport { terser } from 'rollup-plugin-terser';\nimport { DEFAULT_EXTENSIONS as DEFAULT_BABEL_EXTENSIONS } from '@babel/core';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport replace from '@rollup/plugin-replace';\nimport resolve, {\n  DEFAULTS as RESOLVE_DEFAULTS,\n} from '@rollup/plugin-node-resolve';\nimport sourceMaps from 'rollup-plugin-sourcemaps';\nimport typescript from 'rollup-plugin-typescript2';\nimport ts from 'typescript';\n\nimport { extractErrors } from './errors/extractErrors';\nimport { babelPluginTsdx } from './babelPluginTsdx';\nimport { TsdxOptions } from './types';\nimport { optimizeLodashImports } from \"@optimize-lodash/rollup-plugin\";\n\n/**\n * These packages will not be resolved by Rollup and will be left as imports.\n */\nconst EXTERNAL_PACKAGES = ['react', 'react-native'];\n\nconst errorCodeOpts = {\n  errorMapFilePath: paths.appErrorsJson,\n};\n\n// shebang cache map thing because the transform only gets run once\nlet shebang: any = {};\n\nexport async function createRollupConfig(\n  opts: TsdxOptions,\n  outputNum: number\n): Promise<RollupOptions> {\n  const findAndRecordErrorCodes = await extractErrors({\n    ...errorCodeOpts,\n    ...opts,\n  });\n\n  const isEsm = opts.format.includes('es') || opts.format.includes('esm');\n\n  const shouldMinify =\n    opts.minify !== undefined\n      ? opts.minify\n      : opts.env === 'production' || isEsm;\n\n  let formatString = ['esm', 'cjs'].includes(opts.format) ? '' : opts.format;\n  let fileExtension = opts.format === 'esm' ? 'mjs' : 'cjs';\n\n  const outputName = [\n    `${paths.appDist}/${safePackageName(opts.name)}`,\n    formatString,\n    opts.env,\n    shouldMinify ? 'min' : '',\n    fileExtension,\n  ]\n    .filter(Boolean)\n    .join('.');\n\n  const tsconfigPath = opts.tsconfig || paths.tsconfigJson;\n  // borrowed from https://github.com/facebook/create-react-app/pull/7248\n  const tsconfigJSON = ts.readConfigFile(tsconfigPath, ts.sys.readFile).config;\n  // borrowed from https://github.com/ezolenko/rollup-plugin-typescript2/blob/42173460541b0c444326bf14f2c8c27269c4cb11/src/parse-tsconfig.ts#L48\n  const tsCompilerOptions = ts.parseJsonConfigFileContent(\n    tsconfigJSON,\n    ts.sys,\n    './'\n  ).options;\n\n  const { PRODUCTION } = process.env;\n\n  return {\n    // Tell Rollup the entry point to the package\n    input: opts.input,\n    // Tell Rollup which packages to ignore\n    external: (id: string) => {\n      // bundle in polyfills as TSDX can't (yet) ensure they're installed as deps\n      if (id.startsWith('regenerator-runtime')) {\n        return false;\n      }\n\n      if (EXTERNAL_PACKAGES.includes(id)) {\n        return true;\n      }\n\n      return external(id);\n    },\n    // Minimize runtime error surface as much as possible\n    shimMissingExports: true,\n    // Rollup has treeshaking by default, but we can optimize it further...\n    treeshake: {\n      // We assume reading a property of an object never has side-effects.\n      // This means tsdx WILL remove getters and setters defined directly on objects.\n      // Any getters or setters defined on classes will not be effected.\n      //\n      // @example\n      //\n      // const foo = {\n      //  get bar() {\n      //    console.log('effect');\n      //    return 'bar';\n      //  }\n      // }\n      //\n      // const result = foo.bar;\n      // const illegalAccess = foo.quux.tooDeep;\n      //\n      // Punchline....Don't use getters and setters\n      propertyReadSideEffects: false,\n    },\n    // Establish Rollup output\n    output: {\n      // Set filenames of the consumer's package\n      file: outputName,\n      // Pass through the file format\n      format: isEsm ? 'es' : opts.format,\n      // Do not let Rollup call Object.freeze() on namespace import objects\n      // (i.e. import * as namespaceImportObject from...) that are accessed dynamically.\n      freeze: false,\n      // Respect tsconfig esModuleInterop when setting __esModule.\n      esModule: Boolean(tsCompilerOptions?.esModuleInterop) || isEsm,\n      name: opts.name || safeVariableName(opts.name),\n      sourcemap: true,\n      globals: {\n        react: 'React',\n        'react-native': 'ReactNative',\n        'lodash-es': 'lodashEs',\n        'lodash/fp': 'lodashFp',\n      },\n      exports: 'named',\n    },\n    plugins: [\n      !!opts.extractErrors && {\n        name: 'Extract errors',\n        async transform(code: string) {\n          try {\n            await findAndRecordErrorCodes(code);\n          } catch (e) {\n            return null;\n          }\n          return { code, map: null };\n        },\n      },\n      resolve({\n        mainFields: [\n          'module',\n          'main',\n          opts.target !== 'node' ? 'browser' : undefined,\n        ].filter(Boolean) as string[],\n        extensions: [...RESOLVE_DEFAULTS.extensions, '.cjs', '.mjs', '.jsx'],\n      }),\n      // all bundled external modules need to be converted from CJS to ESM\n      commonjs({\n        extensions: ['.js', '.cjs', '.mjs'],\n        esmExternals: true,\n        requireReturnsDefault: true,\n        transformMixedEsModules: true,\n        // use a regex to make sure to include eventual hoisted packages\n        include:\n          opts.format === 'umd' || isEsm\n            ? /\\/node_modules\\//\n            : /\\/regenerator-runtime\\//,\n      }),\n      json(),\n      {\n        name: 'Remove shebang',\n        // Custom plugin that removes shebang from code because newer\n        // versions of bublé bundle their own private version of `acorn`\n        // and I don't know a way to patch in the option `allowHashBang`\n        // to acorn. Taken from microbundle.\n        // See: https://github.com/Rich-Harris/buble/pull/165\n        transform(code: string) {\n          let reg = /^#!(.*)/;\n          let match = code.match(reg);\n\n          shebang[opts.name] = match ? '#!' + match[1] : '';\n\n          code = code.replace(reg, '');\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      typescript({\n        typescript: ts,\n        tsconfig: opts.tsconfig,\n        tsconfigDefaults: {\n          exclude: [\n            // all TS test files, regardless whether co-located or in test/ etc\n            '**/*.spec.ts',\n            '**/*.test.ts',\n            '**/*.spec.tsx',\n            '**/*.test.tsx',\n            // TS defaults below\n            'node_modules',\n            'bower_components',\n            'jspm_packages',\n            paths.appDist,\n          ],\n          compilerOptions: {\n            sourceMap: true,\n            declaration: true,\n            jsx: 'react',\n          },\n        },\n        tsconfigOverride: {\n          compilerOptions: {\n            module: 'esnext',\n            // TS -> esnext, then leave the rest to babel-preset-env\n            target: 'esnext',\n            // don't output declarations more than once\n            ...(outputNum > 0\n              ? { declaration: false, declarationMap: false }\n              : {}),\n          },\n        },\n        check: !opts.transpileOnly && outputNum === 0,\n        useTsconfigDeclarationDir: Boolean(tsCompilerOptions?.declarationDir),\n      }),\n      opts.legacy &&\n        babelPluginTsdx({\n          exclude: 'node_modules/**',\n          extensions: [...DEFAULT_BABEL_EXTENSIONS, 'ts', 'tsx'],\n          passPerPreset: true,\n          custom: {\n            targets: {\n              ...(opts.target === 'node' ? { node: 14 } : {}),\n              esmodules: isEsm,\n            },\n            extractErrors: opts.extractErrors,\n            format: opts.format,\n          },\n          babelHelpers: 'bundled',\n        }),\n      opts.env &&\n        replace({\n          preventAssignment: true,\n          'process.env.NODE_ENV': JSON.stringify(\n            PRODUCTION ? 'production' : 'development'\n          ),\n        }),\n      sourceMaps(),\n      shouldMinify &&\n        terser({\n          format: {\n            keep_quoted_props: true,\n            comments: false,\n          },\n          compress: {\n            keep_infinity: true,\n            pure_getters: true,\n            passes: 10,\n          },\n          ecma: opts.legacy ? 5 : 2020,\n          module: isEsm,\n          toplevel: opts.format === 'cjs' || isEsm,\n        }),\n      optimizeLodashImports({\n        useLodashEs: isEsm || undefined,\n      }),\n      /**\n       * Ensure there's an empty default export to prevent runtime errors.\n       *\n       * @see https://www.npmjs.com/package/rollup-plugin-export-default\n       */\n      {\n        name: 'Add export default {}',\n        renderChunk: async (code: string, chunk: any) => {\n          if (chunk.exports.includes('default') || !isEsm) {\n            return null;\n          }\n\n          return {\n            code: `${code}\\nexport default {};`,\n            map: null,\n          };\n        },\n      },\n    ],\n  };\n}\n","import { RollupOptions, OutputOptions } from 'rollup';\nimport { concatAllArray } from 'jpjs';\n\nimport { paths } from './constants';\nimport { TsdxOptions, NormalizedOpts } from './types';\n\nimport { createRollupConfig } from './createRollupConfig';\nimport { existsSync } from 'fs';\n\n// check for custom tsdx.config.js\nlet tsdxConfig = {\n  rollup(config: RollupOptions, _options: TsdxOptions): RollupOptions {\n    return config;\n  },\n};\n\nif (existsSync(paths.appConfig)) {\n  tsdxConfig = require(paths.appConfig);\n}\n\nexport async function createBuildConfigs(\n  opts: NormalizedOpts\n): Promise<Array<RollupOptions & { output: OutputOptions }>> {\n  const allInputs = concatAllArray(\n    opts.input.map((input: string) =>\n      createAllFormats(opts, input).map(\n        (options: TsdxOptions, index: number) => ({\n          ...options,\n          // We want to know if this is the first run for each entryfile\n          // for certain plugins (e.g. css)\n          writeMeta: index === 0,\n        })\n      )\n    )\n  );\n\n  return await Promise.all(\n    allInputs.map(async (options: TsdxOptions, index: number) => {\n      // pass the full rollup config to tsdx.config.js override\n      const config = await createRollupConfig(options, index);\n      return tsdxConfig.rollup(config, options);\n    })\n  );\n}\n\nfunction createAllFormats(\n  opts: NormalizedOpts,\n  input: string\n): [TsdxOptions, ...TsdxOptions[]] {\n  return [\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('esm') && { ...opts, format: 'esm', input },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'production',\n      input,\n    },\n  ].filter(Boolean) as [TsdxOptions, ...TsdxOptions[]];\n}\n","import { Template } from './template';\n\nconst basicTemplate: Template = {\n  name: 'basic',\n  dependencies: [\n    'husky',\n    'tsdx',\n    'tslib',\n    'typescript',\n    'size-limit',\n    '@size-limit/preset-small-lib',\n  ],\n  packageJson: {\n    // name: safeName,\n    version: '0.1.0',\n    license: 'MIT',\n    // author: author,\n    main: './dist/index.cjs',\n    module: './dist/index.mjs',\n    exports: {\n      './package.json': './package.json',\n      '.': {\n        import: './dist/index.mjs',\n        require: './dist/index.cjs',\n      },\n    },\n    // module: `dist/${safeName}.mjs`,\n    typings: `dist/index.d.ts`,\n    files: ['dist', 'src'],\n    engines: {\n      node: '>=14',\n    },\n    scripts: {\n      start: 'tsdx watch',\n      build: 'tsdx build',\n      test: 'tsdx test',\n      posttest: 'node test/import.mjs && node test/require.cjs',\n      lint: 'tsdx lint',\n      prepare: 'tsdx build',\n      size: 'size-limit',\n      analyze: 'size-limit --why',\n    },\n    peerDependencies: {},\n    husky: {\n      hooks: {\n        'pre-commit': 'tsdx lint',\n      },\n    },\n    prettier: {\n      printWidth: 80,\n      semi: true,\n      singleQuote: true,\n      trailingComma: 'es5',\n    },\n  },\n};\n\nexport default basicTemplate;\n","import { Template } from './template';\n\nimport basicTemplate from './basic';\nimport { PackageJson } from 'type-fest';\n\nconst reactTemplate: Template = {\n  name: 'react',\n  dependencies: [\n    ...basicTemplate.dependencies,\n    '@types/react',\n    '@types/react-dom',\n    'react',\n    'react-dom',\n  ],\n  packageJson: {\n    ...basicTemplate.packageJson,\n    peerDependencies: {\n      react: '>=16',\n    },\n    scripts: {\n      ...basicTemplate.packageJson.scripts,\n      test: 'tsdx test',\n    } as PackageJson['scripts'],\n  },\n};\n\nexport default reactTemplate;\n","import reactTemplate from './react';\nimport basicTemplate from './basic';\nimport storybookTemplate from './react-with-storybook';\n\nexport const templates = {\n  basic: basicTemplate,\n  react: reactTemplate,\n  'react-with-storybook': storybookTemplate,\n};\n","import { Template } from './template';\nimport reactTemplate from './react';\nimport { PackageJson } from 'type-fest';\n\nconst storybookTemplate: Template = {\n  dependencies: [\n    ...reactTemplate.dependencies,\n    '@babel/core',\n    '@storybook/addon-essentials',\n    '@storybook/addon-links',\n    '@storybook/addon-info',\n    '@storybook/addons',\n    '@storybook/react',\n    'react-is',\n    'babel-loader',\n  ],\n  name: 'react-with-storybook',\n  packageJson: {\n    ...reactTemplate.packageJson,\n    scripts: {\n      ...reactTemplate.packageJson.scripts,\n      storybook: 'start-storybook -p 6006',\n      'build-storybook': 'build-storybook',\n    } as PackageJson['scripts'],\n  },\n};\n\nexport default storybookTemplate;\n","import * as fs from 'fs-extra';\n\nimport { paths } from './constants';\n\n/*\n  This was originally needed because the default\n  tsconfig.compilerOptions.rootDir was set to './' instead of './src'.\n  Now that it's set to './src', this is now deprecated.\n  To ensure a stable upgrade path for users, leave the warning in for\n  6 months - 1 year, then change it to an error in a breaking bump and leave\n  that in for some time too.\n*/\nexport async function moveTypes() {\n  const appDistSrc = paths.appDist + '/src';\n\n  const pathExists = await fs.pathExists(appDistSrc);\n  if (!pathExists) return;\n\n  // see note above about deprecation window\n  console.warn(\n    '[tsdx]: Your rootDir is currently set to \"./\". Please change your ' +\n      'rootDir to \"./src\".\\n' +\n      'TSDX has deprecated setting tsconfig.compilerOptions.rootDir to ' +\n      '\"./\" as it caused buggy output for declarationMaps and more.\\n' +\n      'You may also need to change your include to remove \"test\", which also ' +\n      'caused declarations to be unnecessarily created for test files.'\n  );\n\n  // Move the type declarations to the base of the ./dist folder\n  await fs.copy(appDistSrc, paths.appDist, {\n    overwrite: true,\n  });\n  await fs.remove(appDistSrc);\n}\n","#!/usr/bin/env node\n\nimport sade from 'sade';\nimport glob from 'tiny-glob/sync.js';\nimport {\n  rollup,\n  watch,\n  RollupOptions,\n  OutputOptions,\n  RollupWatchOptions,\n  WatcherOptions,\n} from 'rollup';\nimport asyncro from 'asyncro';\nimport chalk from 'chalk';\nimport jest from 'jest';\nimport { CLIEngine } from 'eslint';\nimport logError from './logError';\nimport path from 'path';\nimport execa from 'execa';\nimport shell from 'shelljs';\nimport ora from 'ora';\nimport semver from 'semver';\nimport { paths } from './constants';\nimport * as Messages from './messages';\nimport { createBuildConfigs } from './createBuildConfigs';\nimport { createJestConfig, JestConfigOptions } from './createJestConfig';\nimport { createEslintConfig } from './createEslintConfig';\nimport {\n  resolveApp,\n  safePackageName,\n  clearConsole,\n  getNodeEngineRequirement,\n} from './utils';\nimport { concatAllArray } from 'jpjs';\nimport getInstallCmd from './getInstallCmd';\nimport getInstallArgs from './getInstallArgs';\n\nimport Input from 'enquirer/lib/prompts/input.js';\nimport Select from 'enquirer/lib/prompts/select.js';\n\nimport {\n  PackageJson,\n  WatchOpts,\n  BuildOpts,\n  ModuleFormat,\n  NormalizedOpts,\n} from './types';\nimport { createProgressEstimator } from './createProgressEstimator';\nimport { templates } from './templates';\nimport { composePackageJson } from './templates/utils';\nimport * as deprecated from './deprecated';\nimport * as fs from 'fs-extra';\nimport { readFileSync } from 'fs';\nimport { stat } from 'fs/promises';\n\nexport * from './errors';\n\nconst prog = sade('tsdx');\n\nlet appPackageJson: PackageJson;\ntry {\n  appPackageJson = JSON.parse(readFileSync(paths.appPackageJson, 'utf-8'));\n} catch (e) {\n  throw new Error(`Couldn't read app package.json: ${e}`);\n}\n\nexport const isDir = (name: string) =>\n  stat(name)\n    .then(stats => stats.isDirectory())\n    .catch(() => false);\n\nexport const isFile = (name: string) =>\n  stat(name)\n    .then(stats => stats.isFile())\n    .catch(() => false);\n\nasync function jsOrTs(filename: string) {\n  const extension = (await isFile(resolveApp(filename + '.ts')))\n    ? '.ts'\n    : (await isFile(resolveApp(filename + '.tsx')))\n    ? '.tsx'\n    : (await isFile(resolveApp(filename + '.jsx')))\n    ? '.jsx'\n    : '.js';\n\n  return resolveApp(`${filename}${extension}`);\n}\n\nasync function getInputs(\n  entries?: string | string[],\n  source?: string\n): Promise<string[]> {\n  return concatAllArray(\n    ([] as any[])\n      .concat(\n        entries && entries.length\n          ? entries\n          : (source && resolveApp(source)) ||\n              ((await isDir(resolveApp('src'))) && (await jsOrTs('src/index')))\n      )\n      .map(file => glob(file))\n  );\n}\n\nprog\n  .command('create <pkg>')\n  .describe('Create a new package with TSDX')\n  .example('create mypackage')\n  .option(\n    '--template',\n    `Specify a template. Allowed choices: [${Object.keys(templates).join(\n      ', '\n    )}]`\n  )\n  .example('create --template react mypackage')\n  .action(async (pkg: string, opts: any) => {\n    console.log(\n      chalk.blue(`\n::::::::::: ::::::::  :::::::::  :::    :::\n    :+:    :+:    :+: :+:    :+: :+:    :+:\n    +:+    +:+        +:+    +:+  +:+  +:+\n    +#+    +#++:++#++ +#+    +:+   +#++:+\n    +#+           +#+ +#+    +#+  +#+  +#+\n    #+#    #+#    #+# #+#    #+# #+#    #+#\n    ###     ########  #########  ###    ###\n`)\n    );\n    const bootSpinner = ora(`Creating ${chalk.bold.green(pkg)}...`);\n    let template;\n    // Helper fn to prompt the user for a different\n    // folder name if one already exists\n    async function getProjectPath(projectPath: string): Promise<string> {\n      const exists = await fs.pathExists(projectPath);\n      if (!exists) {\n        return projectPath;\n      }\n\n      bootSpinner.fail(`Failed to create ${chalk.bold.red(pkg)}`);\n      const prompt = new Input({\n        message: `A folder named ${chalk.bold.red(\n          pkg\n        )} already exists! ${chalk.bold('Choose a different name')}`,\n        initial: pkg + '-1',\n        result: (v: string) => v.trim(),\n      });\n\n      pkg = await prompt.run();\n      projectPath = (await fs.realpath(process.cwd())) + '/' + pkg;\n      bootSpinner.start(`Creating ${chalk.bold.green(pkg)}...`);\n      return await getProjectPath(projectPath); // recursion!\n    }\n\n    try {\n      // get the project path\n      const realPath = await fs.realpath(process.cwd());\n      let projectPath = await getProjectPath(realPath + '/' + pkg);\n\n      const prompt = new Select({\n        message: 'Choose a template',\n        choices: Object.keys(templates),\n      });\n\n      if (opts.template) {\n        template = opts.template.trim();\n        if (!prompt.choices.includes(template)) {\n          bootSpinner.fail(`Invalid template ${chalk.bold.red(template)}`);\n          template = await prompt.run();\n        }\n      } else {\n        template = await prompt.run();\n      }\n\n      bootSpinner.start();\n      // copy the template\n      await fs.copy(\n        path.resolve(__dirname, `../templates/${template}`),\n        projectPath,\n        {\n          overwrite: true,\n        }\n      );\n      // fix gitignore\n      await fs.move(\n        path.resolve(projectPath, './gitignore'),\n        path.resolve(projectPath, './.gitignore')\n      );\n\n      // update license year and author\n      let license: string = await fs.readFile(\n        path.resolve(projectPath, 'LICENSE'),\n        { encoding: 'utf-8' }\n      );\n\n      license = license.replace(/<year>/, `${new Date().getFullYear()}`);\n\n      // attempt to automatically derive author name\n      let author = getAuthorName();\n\n      if (!author) {\n        bootSpinner.stop();\n        const licenseInput = new Input({\n          name: 'author',\n          message: 'Who is the package author?',\n        });\n        author = await licenseInput.run();\n        setAuthorName(author);\n        bootSpinner.start();\n      }\n\n      license = license.replace(/<author>/, author.trim());\n\n      await fs.writeFile(path.resolve(projectPath, 'LICENSE'), license, {\n        encoding: 'utf-8',\n      });\n\n      const templateConfig = templates[template as keyof typeof templates];\n      const generatePackageJson = composePackageJson(templateConfig);\n\n      // Install deps\n      process.chdir(projectPath);\n      const safeName = safePackageName(pkg);\n      const pkgJson = generatePackageJson({ name: safeName, author });\n\n      const nodeVersionReq = getNodeEngineRequirement(pkgJson);\n      if (\n        nodeVersionReq &&\n        !semver.satisfies(process.version, nodeVersionReq)\n      ) {\n        bootSpinner.fail(Messages.incorrectNodeVersion(nodeVersionReq));\n        process.exit(1);\n      }\n\n      await fs.outputJSON(path.resolve(projectPath, 'package.json'), pkgJson);\n      bootSpinner.succeed(`Created ${chalk.bold.green(pkg)}`);\n      await Messages.start(pkg);\n    } catch (error) {\n      bootSpinner.fail(`Failed to create ${chalk.bold.red(pkg)}`);\n      logError(error);\n      process.exit(1);\n    }\n\n    const templateConfig = templates[template as keyof typeof templates];\n    const { dependencies: deps } = templateConfig;\n\n    const installSpinner = ora(Messages.installing(deps.sort())).start();\n    try {\n      const cmd = await getInstallCmd();\n      await execa(cmd, getInstallArgs(cmd, deps));\n      installSpinner.succeed('Installed dependencies');\n      console.log(await Messages.start(pkg));\n    } catch (error) {\n      installSpinner.fail('Failed to install dependencies');\n      logError(error);\n      process.exit(1);\n    }\n  });\n\nprog\n  .command('watch')\n  .describe('Rebuilds on any change')\n  .option('--entry, -i', 'Entry module')\n  .example('watch --entry src/foo.tsx')\n  .option('--target', 'Specify your target environment', 'browser')\n  .example('watch --target node')\n  .option('--name', 'Specify name exposed in UMD builds')\n  .example('watch --name Foo')\n  .option('--format', 'Specify module format(s)', 'cjs,esm')\n  .example('watch --format cjs,esm')\n  .option(\n    '--verbose',\n    'Keep outdated console output in watch mode instead of clearing the screen'\n  )\n  .example('watch --verbose')\n  .option('--noClean', \"Don't clean the dist folder\")\n  .example('watch --noClean')\n  .option('--tsconfig', 'Specify custom tsconfig path')\n  .example('watch --tsconfig ./tsconfig.foo.json')\n  .option('--onFirstSuccess', 'Run a command on the first successful build')\n  .example('watch --onFirstSuccess \"echo The first successful build!\"')\n  .option('--onSuccess', 'Run a command on a successful build')\n  .example('watch --onSuccess \"echo Successful build!\"')\n  .option('--onFailure', 'Run a command on a failed build')\n  .example('watch --onFailure \"The build failed!\"')\n  .option('--transpileOnly', 'Skip type checking')\n  .example('watch --transpileOnly')\n  .option('--extractErrors', 'Extract invariant errors to ./errors/codes.json.')\n  .example('watch --extractErrors')\n  .action(async (dirtyOpts: WatchOpts) => {\n    const opts = await normalizeOpts(dirtyOpts);\n    const buildConfigs = await createBuildConfigs(opts);\n    if (!opts.noClean) {\n      await cleanDistFolder();\n    }\n    if (opts.format.includes('cjs')) {\n      await writeCjsEntryFile(opts.name);\n    }\n    if (opts.format.includes('esm')) {\n      await writeMjsEntryFile(opts.name);\n    }\n\n    type Killer = execa.ExecaChildProcess | null;\n\n    let firstTime = true;\n    let successKiller: Killer = null;\n    let failureKiller: Killer = null;\n\n    function run(command?: string) {\n      if (!command) {\n        return null;\n      }\n\n      const [exec, ...args] = command.split(' ');\n      return execa(exec, args, {\n        stdio: 'inherit',\n      });\n    }\n\n    function killHooks() {\n      return Promise.all([\n        successKiller ? successKiller.kill('SIGTERM') : null,\n        failureKiller ? failureKiller.kill('SIGTERM') : null,\n      ]);\n    }\n\n    const spinner = ora().start();\n    watch(\n      (buildConfigs as RollupWatchOptions[]).map(inputOptions => ({\n        watch: {\n          silent: true,\n          include: ['src/**'],\n          exclude: ['node_modules/**'],\n        } as WatcherOptions,\n        ...inputOptions,\n      }))\n    ).on('event', async event => {\n      // clear previous onSuccess/onFailure hook processes so they don't pile up\n      await killHooks();\n\n      if (event.code === 'START') {\n        if (!opts.verbose) {\n          clearConsole();\n        }\n        spinner.start(chalk.bold.cyan('Compiling modules...'));\n      }\n      if (event.code === 'ERROR') {\n        spinner.fail(chalk.bold.red('Failed to compile'));\n        logError(event.error);\n        failureKiller = run(opts.onFailure);\n      }\n      if (event.code === 'END') {\n        spinner.succeed(chalk.bold.green('Compiled successfully'));\n        console.log(`\n  ${chalk.dim('Watching for changes')}\n`);\n\n        try {\n          await deprecated.moveTypes();\n\n          if (firstTime && opts.onFirstSuccess) {\n            firstTime = false;\n            run(opts.onFirstSuccess);\n          } else {\n            successKiller = run(opts.onSuccess);\n          }\n        } catch (_error) {}\n      }\n    });\n  });\n\nprog\n  .command('build')\n  .describe('Build your project once and exit')\n  .option('--entry, -i', 'Entry module')\n  .example('build --entry src/foo.tsx')\n  .option('--target', 'Specify your target environment', 'browser')\n  .example('build --target node')\n  .option('--name', 'Specify name exposed in UMD builds')\n  .example('build --name Foo')\n  .option('--format', 'Specify module format(s)', 'cjs,esm')\n  .example('build --format cjs,esm')\n  .option('--legacy', 'Babel transpile and emit ES5.')\n  .example('build --legacy')\n  .option('--tsconfig', 'Specify custom tsconfig path')\n  .example('build --tsconfig ./tsconfig.foo.json')\n  .option('--transpileOnly', 'Skip type checking')\n  .example('build --transpileOnly')\n  .option(\n    '--extractErrors',\n    'Extract errors to ./errors/codes.json and provide a url for decoding.'\n  )\n  .example(\n    'build --extractErrors=https://reactjs.org/docs/error-decoder.html?invariant='\n  )\n  .action(async (dirtyOpts: BuildOpts) => {\n    const opts = await normalizeOpts(dirtyOpts);\n    const buildConfigs = await createBuildConfigs(opts);\n    await cleanDistFolder();\n    const logger = await createProgressEstimator();\n    if (opts.format.includes('cjs')) {\n      const promise = writeCjsEntryFile(opts.name).catch(logError);\n      logger(promise, 'Creating CJS entry file');\n    }\n    if (opts.format.includes('esm')) {\n      const promise = writeMjsEntryFile(opts.name).catch(logError);\n      logger(promise, 'Creating MJS entry file');\n    }\n    try {\n      const promise = asyncro\n        .map(\n          buildConfigs,\n          async (inputOptions: RollupOptions & { output: OutputOptions }) => {\n            let bundle = await rollup(inputOptions);\n            await bundle.write(inputOptions.output);\n          }\n        )\n        .catch((e: any) => {\n          throw e;\n        })\n        .then(async () => {\n          await deprecated.moveTypes();\n        });\n      logger(promise, 'Building modules');\n      await promise;\n    } catch (error) {\n      logError(error);\n      process.exit(1);\n    }\n  });\n\nasync function normalizeOpts(opts: WatchOpts): Promise<NormalizedOpts> {\n  return {\n    ...opts,\n    name: opts.name || appPackageJson.name,\n    input: await getInputs(opts.entry, appPackageJson.source),\n    format: opts.format.split(',').map((format: string) => {\n      if (format === 'es') {\n        return 'esm';\n      }\n      return format;\n    }) as [ModuleFormat, ...ModuleFormat[]],\n  };\n}\n\nasync function cleanDistFolder() {\n  await fs.remove(paths.appDist);\n}\n\nfunction writeCjsEntryFile(name: string) {\n  const safeName = safePackageName(name);\n  /**\n   * After an hour of tinkering, this is the *only* way to write this code that\n   * will not break Rollup (by pulling process.env.NODE_ENV out with\n   * destructuring).\n   */\n  const contents = `#!/usr/bin/env node\n'use strict';\n\nconst { NODE_ENV } = process.env;\nif (NODE_ENV === 'production')\n  module.exports = require('./${safeName}.production.min.cjs');\nelse\n  module.exports = require('./${safeName}.development.cjs');\n`;\n  /**\n   * @todo Find out why this breaks Rollup's parser in insanely complicated\n   * ways.\n   */\n  //   const contents = `'use strict'\n  // if (process.env.NODE_ENV === 'production') {\n  //   module.exports = require('./${safeName}.production.min.cjs')\n  // } else {\n  //   module.exports = require('./${safeName}.development.cjs')\n  // }`;\n\n  return fs.outputFile(path.join(paths.appDist, 'index.cjs'), contents);\n}\n\nfunction writeMjsEntryFile(name: string) {\n  const contents = `#!/usr/bin/env node\n\nexport { default } from './${name}.min.mjs';\nexport * from './${name}.min.mjs';\n`;\n\n  return fs.outputFile(path.join(paths.appDist, 'index.mjs'), contents);\n}\n\nfunction getAuthorName() {\n  let author = '';\n\n  author = shell\n    .exec('npm config get init-author-name', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  author = shell\n    .exec('git config --global user.name', { silent: true })\n    .stdout.trim();\n  if (author) {\n    setAuthorName(author);\n    return author;\n  }\n\n  author = shell\n    .exec('npm config get init-author-email', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  author = shell\n    .exec('git config --global user.email', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  return author;\n}\n\nfunction setAuthorName(author: string) {\n  shell.exec(`npm config set init-author-name \"${author}\"`, { silent: true });\n}\n\nprog\n  .command('test')\n  .describe('Run jest test runner. Passes through all flags directly to Jest')\n  .action(async (opts: { config?: string }) => {\n    // Do this as the first thing so that any code reading it knows the right env.\n    process.env.BABEL_ENV = 'test';\n    process.env.NODE_ENV = 'test';\n    // Makes the script crash on unhandled rejections instead of silently\n    // ignoring them. In the future, promise rejections that are not handled will\n    // terminate the Node.js process with a non-zero exit code.\n    process.on('unhandledRejection', err => {\n      throw err;\n    });\n\n    const argv = process.argv.slice(2);\n    let jestConfig: JestConfigOptions = {\n      ...createJestConfig(\n        relativePath => path.resolve(__dirname, '..', relativePath),\n        opts.config ? path.dirname(opts.config) : paths.appRoot\n      ),\n      ...appPackageJson.jest,\n    };\n\n    // Allow overriding with jest.config\n    const defaultPathExists = await fs.pathExists(paths.jestConfig);\n    if (opts.config || defaultPathExists) {\n      const jestConfigPath = resolveApp(opts.config || paths.jestConfig);\n      const jestConfigContents: JestConfigOptions = require(jestConfigPath);\n      jestConfig = { ...jestConfig, ...jestConfigContents };\n    }\n\n    // if custom path, delete the arg as it's already been merged\n    if (opts.config) {\n      let configIndex = argv.indexOf('--config');\n      if (configIndex !== -1) {\n        // case of \"--config path\", delete both args\n        argv.splice(configIndex, 2);\n      } else {\n        // case of \"--config=path\", only one arg to delete\n        const configRegex = /--config=.+/;\n        configIndex = argv.findIndex(arg => arg.match(configRegex));\n        if (configIndex !== -1) {\n          argv.splice(configIndex, 1);\n        }\n      }\n    }\n\n    argv.push(\n      '--config',\n      JSON.stringify({\n        ...jestConfig,\n      })\n    );\n\n    const [, ...argsToPassToJestCli] = argv;\n    jest.run(argsToPassToJestCli);\n  });\n\nprog\n  .command('lint')\n  .describe('Run eslint with Prettier')\n  .example('lint src test')\n  .option('--fix', 'Fixes fixable errors and warnings')\n  .example('lint src test --fix')\n  .option('--ignore-pattern', 'Ignore a pattern')\n  .example('lint src test --ignore-pattern test/foobar.ts')\n  .option(\n    '--max-warnings',\n    'Exits with non-zero error code if number of warnings exceed this number',\n    Infinity\n  )\n  .example('lint src test --max-warnings 10')\n  .option('--write-file', 'Write the config file locally')\n  .example('lint --write-file')\n  .option('--report-file', 'Write JSON report to file locally')\n  .example('lint --report-file eslint-report.json')\n  .action(\n    async (opts: {\n      fix: boolean;\n      'ignore-pattern': string;\n      'write-file': boolean;\n      'report-file': string;\n      'max-warnings': number;\n      _: string[];\n    }) => {\n      if (opts['_'].length === 0 && !opts['write-file']) {\n        const defaultInputs = ['src', 'test'].filter(fs.existsSync);\n        opts['_'] = defaultInputs;\n        console.log(\n          chalk.yellow(\n            `Defaulting to \"tsdx lint ${defaultInputs.join(' ')}\"`,\n            '\\nYou can override this in the package.json scripts, like \"lint\": \"tsdx lint src otherDir\"'\n          )\n        );\n      }\n\n      const config = await createEslintConfig({\n        pkg: appPackageJson,\n        rootDir: paths.appRoot,\n        writeFile: opts['write-file'],\n      });\n\n      const cli = new CLIEngine({\n        baseConfig: {\n          ...config,\n          ...appPackageJson.eslint,\n        },\n        extensions: ['.ts', '.tsx', '.js', '.jsx'],\n        fix: opts.fix,\n        ignorePattern: opts['ignore-pattern'],\n      });\n      const report = cli.executeOnFiles(opts['_']);\n      if (opts.fix) {\n        CLIEngine.outputFixes(report);\n      }\n      console.log(cli.getFormatter()(report.results));\n      if (opts['report-file']) {\n        await fs.outputFile(\n          opts['report-file'],\n          cli.getFormatter('json')(report.results)\n        );\n      }\n      if (report.errorCount) {\n        process.exit(1);\n      }\n      if (report.warningCount > opts['max-warnings']) {\n        process.exit(1);\n      }\n    }\n  );\n\nprog.parse(process.argv);\n","import { Template } from '../template';\n\ninterface ProjectArgs {\n  name: string;\n  author: string;\n}\nexport const composePackageJson = (template: Template) => ({\n  name,\n  author,\n}: ProjectArgs) => {\n  return {\n    ...template.packageJson,\n    name,\n    author,\n    'size-limit': [\n      {\n        path: `dist/${name}.production.min.cjs`,\n        limit: '10 KB',\n      },\n      {\n        path: `dist/${name}.min.mjs`,\n        limit: '10 KB',\n      },\n    ],\n  };\n};\n","import { InstallCommand } from './getInstallCmd';\n\nexport default function getInstallArgs(\n  cmd: InstallCommand,\n  packages: string[]\n) {\n  switch (cmd) {\n    case 'npm':\n      return ['install', ...packages, '--save-dev'];\n    case 'yarn':\n      return ['add', ...packages, '--dev'];\n  }\n}\n","import fs from 'fs-extra';\n\nimport { paths } from './constants';\nimport progressEstimator from 'progress-estimator';\n\nexport async function createProgressEstimator() {\n  await fs.ensureDir(paths.progressEstimatorCache);\n  return progressEstimator({\n    // All configuration keys are optional, but it's recommended to specify a storage location.\n    storagePath: paths.progressEstimatorCache,\n  });\n}\n","import { Config } from '@jest/types';\n\nexport type JestConfigOptions = Partial<Config.InitialOptions>;\n\nexport function createJestConfig(\n  _: (relativePath: string) => void,\n  rootDir: string\n): JestConfigOptions {\n  const config: JestConfigOptions = {\n    transform: {\n      '.(ts|tsx)$': require.resolve('ts-jest/dist'),\n      '.(js|jsx)$': require.resolve('babel-jest'), // jest's default\n    },\n    transformIgnorePatterns: ['[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx)$'],\n    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n    collectCoverageFrom: ['src/**/*.{ts,tsx,js,jsx}'],\n    testMatch: ['<rootDir>/**/*.(spec|test).{ts,tsx,js,jsx}'],\n    testURL: 'http://localhost',\n    rootDir,\n    watchPlugins: [\n      require.resolve('jest-watch-typeahead/filename'),\n      require.resolve('jest-watch-typeahead/testname'),\n    ],\n  };\n\n  return config;\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { CLIEngine } from 'eslint';\nimport { PackageJson } from './types';\nimport { getReactVersion } from './utils';\n\ninterface CreateEslintConfigArgs {\n  pkg: PackageJson;\n  rootDir: string;\n  writeFile: boolean;\n}\nexport async function createEslintConfig({\n  pkg,\n  rootDir,\n  writeFile,\n}: CreateEslintConfigArgs): Promise<CLIEngine.Options['baseConfig'] | void> {\n  const isReactLibrary = Boolean(getReactVersion(pkg));\n\n  const config = {\n    extends: [\n      'react-app',\n      'prettier/@typescript-eslint',\n      'plugin:prettier/recommended',\n    ],\n    settings: {\n      react: {\n        // Fix for https://github.com/jaredpalmer/tsdx/issues/279\n        version: isReactLibrary ? 'detect' : '999.999.999',\n      },\n    },\n  };\n\n  if (!writeFile) {\n    return config;\n  }\n\n  const file = path.join(rootDir, '.eslintrc.js');\n  try {\n    await fs.writeFile(\n      file,\n      `module.exports = ${JSON.stringify(config, null, 2)}`,\n      { flag: 'wx' }\n    );\n  } catch (e) {\n    if (e.code === 'EEXIST') {\n      console.error(\n        'Error trying to save the Eslint configuration file:',\n        `${file} already exists.`\n      );\n    } else {\n      console.error(e);\n    }\n\n    return config;\n  }\n}\n"],"names":["stderr","console","error","bind","logError","err","description","name","message","plugin","chalk","bold","red","loc","file","line","column","frame","dim","stack","headlessStack","replace","safeVariableName","camelCase","removeScope","toLowerCase","safePackageName","appDirectory","fs","realpathSync","process","cwd","resolveApp","relativePath","path","resolve","paths","appPackageJson","tsconfigJson","testsSetup","appRoot","appSrc","appErrorsJson","appErrors","appDist","appConfig","jestConfig","progressEstimatorCache","cmd","async","getInstallCmd","execa","e","cyan","start","projectName","commands","install","build","test","green","Output.cmd","invertObject","targetObj","result","mapKeys","Object","keys","originalKey","evalToString","ast","type","value","operator","Error","left","right","babelParserOptions","sourceType","plugins","extractErrors","opts","errorMapFilePath","existingErrorMap","fileContents","readFile","JSON","parse","allErrorIDs","currentID","transform","source","traverse","CallExpression","exit","astPath","errorMsgLiteral","get","isIdentifier","node","arguments","hasOwnProperty","length","Math","max","apply","prettyName","pascalCase","ensureDir","writeFile","stringify","flush","replacements","original","replacement","mergeConfigItems","configItemsToMerge","mergedItems","forEach","configItemToMerge","item","itemToMergeWithIndex","findIndex","mergedItem","resolved","createConfigItem","merge","options","push","createConfigItems","items","map","require","babelPluginTsdx","createBabelInputPluginFactory","custom","customOptions","pluginOptions","config","defaultPlugins","format","method","loose","obj","constructor","filter","Boolean","babelOptions","presets","presetEnvIdx","preset","request","includes","presetEnv","targets","modules","defaultPresets","EXTERNAL_PACKAGES","errorCodeOpts","shebang","tsdxConfig","rollup","_options","createBuildConfigs","allInputs","concatAllArray","input","env","createAllFormats","index","writeMeta","Promise","all","outputNum","findAndRecordErrorCodes","isEsm","shouldMinify","undefined","minify","formatString","fileExtension","outputName","join","tsconfigJSON","ts","readConfigFile","tsconfig","sys","tsCompilerOptions","parseJsonConfigFileContent","PRODUCTION","external","id","startsWith","isAbsolute","shimMissingExports","treeshake","propertyReadSideEffects","output","freeze","esModule","esModuleInterop","sourcemap","globals","react","exports","code","mainFields","target","extensions","RESOLVE_DEFAULTS","commonjs","esmExternals","requireReturnsDefault","transformMixedEsModules","include","json","reg","match","typescript","tsconfigDefaults","exclude","compilerOptions","sourceMap","declaration","jsx","tsconfigOverride","module","declarationMap","check","transpileOnly","useTsconfigDeclarationDir","declarationDir","legacy","DEFAULT_BABEL_EXTENSIONS","passPerPreset","esmodules","babelHelpers","preventAssignment","sourceMaps","terser","keep_quoted_props","comments","compress","keep_infinity","pure_getters","passes","ecma","toplevel","optimizeLodashImports","useLodashEs","renderChunk","chunk","createRollupConfig","existsSync","basicTemplate","dependencies","packageJson","version","license","main","import","typings","files","engines","scripts","posttest","lint","prepare","size","analyze","peerDependencies","husky","hooks","prettier","printWidth","semi","singleQuote","trailingComma","reactTemplate","templates","basic","storybook","moveTypes","appDistSrc","pathExists","warn","copy","overwrite","remove","prog","sade","readFileSync","isDir","stat","then","stats","isDirectory","catch","isFile","getInputs","entries","concat","filename","extension","jsOrTs","glob","normalizeOpts","entry","split","cleanDistFolder","writeCjsEntryFile","safeName","contents","outputFile","writeMjsEntryFile","setAuthorName","author","shell","exec","silent","command","describe","example","option","action","pkg","log","blue","bootSpinner","ora","template","realPath","realpath","projectPath","getProjectPath","fail","prompt","Input","initial","v","trim","run","Select","choices","__dirname","move","encoding","Date","getFullYear","stdout","getAuthorName","stop","licenseInput","generatePackageJson","limit","composePackageJson","chdir","pkgJson","nodeVersionReq","getNodeEngineRequirement","semver","satisfies","requiredVersion","outputJSON","succeed","Messages.start","templateConfig","deps","installSpinner","packages","sort","getInstallArgs","dirtyOpts","buildConfigs","noClean","firstTime","successKiller","failureKiller","args","stdio","spinner","watch","inputOptions","on","event","kill","verbose","write","platform","onFailure","deprecated.moveTypes","onFirstSuccess","onSuccess","_error","logger","progressEstimator","storagePath","createProgressEstimator","promise","asyncro","bundle","BABEL_ENV","NODE_ENV","argv","slice","rootDir","dirname","transformIgnorePatterns","moduleFileExtensions","collectCoverageFrom","testMatch","testURL","watchPlugins","jest","defaultPathExists","jestConfigPath","jestConfigContents","configIndex","indexOf","splice","configRegex","arg","argsToPassToJestCli","Infinity","defaultInputs","yellow","extends","settings","devDependencies","getReactVersion","flag","createEslintConfig","cli","CLIEngine","baseConfig","eslint","fix","ignorePattern","report","executeOnFiles","outputFixes","getFormatter","results","errorCount","warningCount"],"mappings":"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"}