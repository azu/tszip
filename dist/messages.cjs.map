{"version":3,"file":"messages.cjs","sources":["../src/utils/log.ts","../src/messages.ts","../src/output.ts","../src/getInstallCmd.ts"],"sourcesContent":["export const indentString = (msg: string, indent = 1) => {\n  return `${' '.repeat(indent * 2)}${msg}`;\n};\n\nexport const indentLog = (msg: string, indent = 1) => {\n  console.log(indentString(msg, indent));\n};\n","import chalk from 'chalk';\nimport getInstallCmd from './getInstallCmd';\nimport * as Output from './output';\nimport { indentString } from './utils/log';\n\n// This was copied from Razzle. Lots of unused stuff.\nconst program = {\n  name: 'export-ts',\n};\n\nexport const help = function () {\n  return `\n    Only ${chalk.green('<project-directory>')} is required.\n    If you have any problems, do not hesitate to file an issue:\n    ${chalk.cyan('https://github.com/ctjlewis/export-ts/issues/new')}\n  `;\n};\n\nexport const missingProjectName = function () {\n  return `\nPlease specify the project directory:\n  ${chalk.cyan(program.name)} ${chalk.green('<project-directory>')}\nFor example:\n  ${chalk.cyan(program.name)} ${chalk.green('my-export-ts-lib')}\nRun ${chalk.cyan(`${program.name} --help`)} to see all options.\n`;\n};\n\nexport const alreadyExists = function (projectName: string) {\n  return indentString(\n    `Uh oh! Looks like there's already a directory called ${chalk.red(\n      projectName\n    )}. Please try a different name or delete that folder.`\n  );\n};\n\nexport const installing = function (packages: string[]) {\n  const pkgText = packages\n    .map((pkg) => indentString(`${chalk.cyan(chalk.bold(pkg))}`, 2))\n    .join('\\n');\n\n  return `Installing dependencies:\\n\\n${pkgText}\\n\\n`;\n};\n\nexport const installError = function (packages: string[]) {\n  const pkgText = packages\n    .map(function (pkg) {\n      return `${chalk.cyan(chalk.bold(pkg))}`;\n    })\n    .join(', ');\n\n  Output.error(`Failed to install ${pkgText}, try again.`);\n};\n\nexport const copying = function (projectName: string) {\n  return `Creating ${chalk.bold(chalk.green(projectName))}...`;\n};\n\nexport const start = async function (projectName: string) {\n  const cmd = await getInstallCmd();\n\n  const commands = {\n    install: cmd === 'npm' ? 'npm install' : 'yarn install',\n    build: cmd === 'npm' ? 'npm run build' : 'yarn build',\n    start: cmd === 'npm' ? 'npm run start' : 'yarn start',\n    test: cmd === 'npm' ? 'npm test' : 'yarn test',\n  };\n\n  return `\n  ${chalk.green('Awesome!')} You're now ready to start coding.\n  \n  I already ran ${Output.cmd(commands.install)} for you, so your next steps are:\n    ${Output.cmd(`cd ${projectName}`)}\n  \n  To start developing (rebuilds on changes):\n    ${Output.cmd(commands.start)}\n  \n  To build for production:\n    ${Output.cmd(commands.build)}\n\n  To test your library with Jest:\n    ${Output.cmd(commands.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${chalk.green('https://github.com/ctjlewis/export-ts/issues')}\n`;\n};\n\nexport const incorrectNodeVersion = function (requiredVersion: string) {\n  return `Unsupported Node version! Your current Node version (${chalk.red(\n    process.version\n  )}) does not satisfy the requirement of Node ${chalk.cyan(requiredVersion)}.`;\n};\n","import { eraseLine } from 'ansi-escapes';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\n// This was copied from Razzle. Lots of unused stuff.\nexport const info = (msg: string) => {\n  console.log(`${chalk.gray('>')} ${msg}`);\n};\n\nexport const error = (msg: string | Error) => {\n  if (msg instanceof Error) {\n    msg = msg.message;\n  }\n\n  console.error(`${chalk.red('> Error!')} ${msg}`);\n};\n\nexport const success = (msg: string) => {\n  console.log(`${chalk.green('> Success!')} ${msg}`);\n};\n\nexport const wait = (msg: string) => {\n  const spinner = ora(chalk.green(msg));\n  spinner.color = 'blue';\n  spinner.start();\n\n  return () => {\n    spinner.stop();\n    process.stdout.write(eraseLine);\n  };\n};\n\nexport const cmd = (cmd: string) => {\n  return chalk.bold(chalk.cyan(cmd));\n};\n\nexport const code = (cmd: string) => {\n  return `${chalk.gray('`')}${chalk.bold(cmd)}${chalk.gray('`')}`;\n};\n\nexport const param = (param: string) => {\n  return chalk.bold(`${chalk.gray('{')}${chalk.bold(param)}${chalk.gray('}')}`);\n};\n","import execa from 'execa';\n\nlet cmd: InstallCommand;\n\nexport type InstallCommand = 'yarn' | 'npm';\n\nexport default async function getInstallCmd(): Promise<InstallCommand> {\n  if (cmd) {\n    return cmd;\n  }\n\n  try {\n    await execa('yarnpkg', ['--version']);\n    cmd = 'yarn';\n  } catch (e) {\n    cmd = 'npm';\n  }\n\n  return cmd;\n}\n"],"names":["indentString","msg","indent","repeat","projectName","chalk","red","bold","green","cyan","requiredVersion","process","version","packages","console","o","Output.error","map","pkg","join","async","cmd","t","getInstallCmd","commands","install","build","start","test","Output.cmd"],"mappings":"6WAAaA,EAAe,CAACC,EAAaC,EAAS,IAC1C,GAAG,IAAIC,OAAgB,EAATD,KAAcD,0BC2BR,SAAUG,GACrC,OAAOJ,EACL,wDAAwDK,UAAMC,IAC5DF,2EAuBiB,SAAUA,GAC/B,MAAO,YAAYC,UAAME,KAAKF,UAAMG,MAAMJ,uBA7CxB,WAClB,MAAO,cACEC,UAAMG,MAAM,6GAEjBH,UAAMI,KAAK,wFA0EmB,SAAUC,GAC5C,MAAO,wDAAwDL,UAAMC,IACnEK,QAAQC,sDACqCP,UAAMI,KAAKC,4BA/ChC,SAAUG,QC9BpCC,uBAA2BC,+DDqC3BC,CAAa,qBANGH,EACbI,KAAI,SAAUC,GACb,MAAO,GAAGb,UAAMI,KAAKJ,UAAME,KAAKW,SAEjCC,KAAK,yCAbgB,SAAUN,GAKlC,MAAO,+BAJSA,EACbI,KAAKC,GAAQlB,EAAa,GAAGK,UAAMI,KAAKJ,UAAME,KAAKW,MAAS,KAC5DC,KAAK,wCArBwB,WAChC,MAAO,8CAELd,UAAMI,KAdF,gBAcwBJ,UAAMG,MAAM,2CAExCH,UAAMI,KAhBF,gBAgBwBJ,UAAMG,MAAM,4BACtCH,UAAMI,KAAK,2DAkCIW,eAAgBhB,GACnC,MAAMiB,4BEnDGA,EAGT,sDAGEC,SACAD,0BF4CgBE,GAEZC,EAAW,CACfC,QAAiB,QAARJ,EAAgB,cAAgB,eACzCK,MAAe,QAARL,EAAgB,gBAAkB,aACzCM,MAAe,QAARN,EAAgB,gBAAkB,aACzCO,KAAc,QAARP,EAAgB,WAAa,aAGrC,MAAO,OACLhB,UAAMG,MAAM,sEAEEqB,EAAWL,EAASC,kDAChCI,EAAW,MAAMzB,+DAGjByB,EAAWL,EAASG,+CAGpBE,EAAWL,EAASE,oDAGpBG,EAAWL,EAASI,8DAGtBvB,UAAMG,MAAM"}