{"version":3,"file":"transformErrorMessages.cjs","sources":["../../src/errors/evalToString.ts","../../src/utils.ts","../../src/constants.ts","../../src/errors/transformErrorMessages.ts","../../src/errors/invertObject.ts"],"sourcesContent":["// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/shared/evalToString.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport function evalToString(ast: any): string {\n  switch (ast.type) {\n    case 'StringLiteral':\n    case 'Literal': // ESLint\n      return ast.value;\n    case 'BinaryExpression': // `+`\n      if (ast.operator !== '+') {\n        throw new Error('Unsupported binary operator ' + ast.operator);\n      }\n      return evalToString(ast.left) + evalToString(ast.right);\n    default:\n      throw new Error('Unsupported type ' + ast.type);\n  }\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function (relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n","import { resolveApp } from './utils';\n\nexport const paths = {\n  appPackageJson: resolveApp('package.json'),\n  tsconfigJson: resolveApp('tsconfig.json'),\n  testsSetup: resolveApp('test/setupTests.ts'),\n  appRoot: resolveApp('.'),\n  appSrc: resolveApp('src'),\n  appErrorsJson: resolveApp('errors/codes.json'),\n  appErrors: resolveApp('errors'),\n  appDist: resolveApp('dist'),\n  appConfig: resolveApp('export-ts.config.js'),\n  jestConfig: resolveApp('jest.config.js'),\n  progressEstimatorCache: resolveApp('node_modules/.cache/.progress-estimator'),\n};\n","// largely borrowed from https://github.com/facebook/react/blob/2c8832075b05009bd261df02171bf9888ac76350/scripts/error-codes/transform-error-messages.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport { invertObject } from './invertObject';\nimport { evalToString } from './evalToString';\nimport { addDefault } from '@babel/helper-module-imports';\nimport { paths } from '../constants';\n\nexport default function transformErrorMessages(babel: any) {\n  const t = babel.types;\n\n  const DEV_EXPRESSION = t.identifier('__DEV__');\n\n  return {\n    visitor: {\n      CallExpression(path: any, file: any) {\n        const node = path.node;\n        const noMinify = file.opts.noMinify;\n        if (path.get('callee').isIdentifier({ name: 'invariant' })) {\n          // Turns this code:\n          //\n          // invariant(condition, 'A %s message that contains %s', adj, noun);\n          //\n          // into this:\n          //\n          // if (!condition) {\n          //   if (__DEV__) {\n          //     throw ReactError(`A ${adj} message that contains ${noun}`);\n          //   } else {\n          //     throw ReactErrorProd(ERR_CODE, adj, noun);\n          //   }\n          // }\n          //\n          // where ERR_CODE is an error code: a unique identifier (a number\n          // string) that references a verbose error message. The mapping is\n          // stored in `paths.appErrorsJson`.\n          const condition = node.arguments[0];\n          const errorMsgLiteral = evalToString(node.arguments[1]);\n          const errorMsgExpressions = Array.from(node.arguments.slice(2));\n          const errorMsgQuasis = errorMsgLiteral\n            .split('%s')\n            .map((raw: any) =>\n              t.templateElement({ raw, cooked: String.raw({ raw } as any) })\n            );\n\n          // Import ReactError\n          const reactErrorIdentfier = addDefault(\n            path,\n            paths.appRoot + '/errors/ErrorDev.js',\n            {\n              nameHint: 'InvariantError',\n            }\n          );\n\n          // Outputs:\n          //   throw ReactError(`A ${adj} message that contains ${noun}`);\n          const devThrow = t.throwStatement(\n            t.callExpression(reactErrorIdentfier, [\n              t.templateLiteral(errorMsgQuasis, errorMsgExpressions),\n            ])\n          );\n\n          if (noMinify) {\n            // Error minification is disabled for this build.\n            //\n            // Outputs:\n            //   if (!condition) {\n            //     throw ReactError(`A ${adj} message that contains ${noun}`);\n            //   }\n            path.replaceWith(\n              t.ifStatement(\n                t.unaryExpression('!', condition),\n                t.blockStatement([devThrow])\n              )\n            );\n            return;\n          }\n\n          // Avoid caching because we write it as we go.\n          const existingErrorMap = JSON.parse(\n            fs.readFileSync(paths.appErrorsJson, 'utf-8')\n          );\n          const errorMap = invertObject(existingErrorMap);\n\n          let prodErrorId = errorMap[errorMsgLiteral];\n\n          if (prodErrorId === undefined) {\n            // There is no error code for this message. Add an inline comment\n            // that flags this as an unminified error. This allows the build\n            // to proceed, while also allowing a post-build linter to detect it.\n            //\n            // Outputs:\n            //   /* FIXME (minify-errors-in-prod): Unminified error message in production build! */\n            //   if (!condition) {\n            //     throw ReactError(`A ${adj} message that contains ${noun}`);\n            //   }\n            path.replaceWith(\n              t.ifStatement(\n                t.unaryExpression('!', condition),\n                t.blockStatement([devThrow])\n              )\n            );\n            path.addComment(\n              'leading',\n              'FIXME (minify-errors-in-prod): Unminified error message in production build!'\n            );\n            return;\n          }\n          prodErrorId = parseInt(prodErrorId, 10);\n\n          // Import ReactErrorProd\n          const reactErrorProdIdentfier = addDefault(\n            path,\n            paths.appRoot + '/errors/ErrorProd.js',\n            {\n              nameHint: 'InvariantErrorProd',\n            }\n          );\n\n          // Outputs:\n          //   throw ReactErrorProd(ERR_CODE, adj, noun);\n          const prodThrow = t.throwStatement(\n            t.callExpression(reactErrorProdIdentfier, [\n              t.numericLiteral(prodErrorId),\n              ...errorMsgExpressions,\n            ])\n          );\n\n          // Outputs:\n          //   if (!condition) {\n          //     if (__DEV__) {\n          //       throw ReactError(`A ${adj} message that contains ${noun}`);\n          //     } else {\n          //       throw ReactErrorProd(ERR_CODE, adj, noun);\n          //     }\n          //   }\n          path.replaceWith(\n            t.ifStatement(\n              t.unaryExpression('!', condition),\n              t.blockStatement([\n                t.ifStatement(\n                  DEV_EXPRESSION,\n                  t.blockStatement([devThrow]),\n                  t.blockStatement([prodThrow])\n                ),\n              ])\n            )\n          );\n        }\n      },\n    },\n  };\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/invertObject.js\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * turns\n *   { 'MUCH ERROR': '0', 'SUCH WRONG': '1' }\n * into\n *   { 0: 'MUCH ERROR', 1: 'SUCH WRONG' }\n */\n\ntype Dict = { [key: string]: any };\n\nexport function invertObject(targetObj: Dict) {\n  const result: Dict = {};\n  const mapKeys = Object.keys(targetObj);\n\n  for (const originalKey of mapKeys) {\n    const originalVal = targetObj[originalKey];\n\n    result[originalVal] = originalKey;\n  }\n\n  return result;\n}\n"],"names":["evalToString","ast","type","value","operator","Error","left","right","relativePath","paths","appPackageJson","resolveApp","tsconfigJson","testsSetup","appRoot","appSrc","appErrorsJson","appErrors","appDist","appConfig","jestConfig","progressEstimatorCache","babel","t","types","DEV_EXPRESSION","identifier","visitor","CallExpression","path","file","node","noMinify","opts","get","isIdentifier","name","condition","arguments","errorMsgLiteral","errorMsgExpressions","Array","from","slice","errorMsgQuasis","split","map","raw","templateElement","cooked","String","reactErrorIdentfier","addDefault","nameHint","devThrow","throwStatement","callExpression","templateLiteral","replaceWith","ifStatement","unaryExpression","blockStatement","prodErrorId","targetObj","result","mapKeys","Object","keys","originalKey","invertObject","JSON","parse","fs","readFileSync","undefined","addComment","parseInt","reactErrorProdIdentfier","prodThrow","numericLiteral"],"mappings":"iUAQgBA,EAAaC,GAC3B,OAAQA,EAAIC,MACV,IAAK,gBACL,IAAK,UACH,OAAOD,EAAIE,MACb,IAAK,mBACH,GAAqB,MAAjBF,EAAIG,SACN,MAAM,IAAIC,MAAM,+BAAiCJ,EAAIG,UAEvD,OAAOJ,EAAaC,EAAIK,MAAQN,EAAaC,EAAIM,OACnD,QACE,MAAM,IAAIF,MAAM,oBAAsBJ,EAAIC,gECUZM,kCC3BvBC,EAAQ,CACnBC,eAAgBC,EAAW,gBAC3BC,aAAcD,EAAW,iBACzBE,WAAYF,EAAW,sBACvBG,QAASH,EAAW,KACpBI,OAAQJ,EAAW,OACnBK,cAAeL,EAAW,qBAC1BM,UAAWN,EAAW,UACtBO,QAASP,EAAW,QACpBQ,UAAWR,EAAW,uBACtBS,WAAYT,EAAW,kBACvBU,uBAAwBV,EAAW,qECCUW,GAC7C,MAAMC,EAAID,EAAME,MAEVC,EAAiBF,EAAEG,WAAW,WAEpC,MAAO,CACLC,QAAS,CACPC,eAAeC,EAAWC,GACxB,MAAMC,EAAOF,EAAKE,KACZC,EAAWF,EAAKG,KAAKD,SAC3B,GAAIH,EAAKK,IAAI,UAAUC,aAAa,CAAEC,KAAM,cAAgB,CAkB1D,MAAMC,EAAYN,EAAKO,UAAU,GAC3BC,EAAkBvC,EAAa+B,EAAKO,UAAU,IAC9CE,EAAsBC,MAAMC,KAAKX,EAAKO,UAAUK,MAAM,IACtDC,EAAiBL,EACpBM,MAAM,MACNC,KAAKC,GACJxB,EAAEyB,gBAAgB,CAAED,IAAAA,EAAKE,OAAQC,OAAOH,IAAI,CAAEA,IAAAA,QAI5CI,EAAsBC,aAC1BvB,EACApB,EAAMK,QAAU,sBAChB,CACEuC,SAAU,mBAMRC,EAAW/B,EAAEgC,eACjBhC,EAAEiC,eAAeL,EAAqB,CACpC5B,EAAEkC,gBAAgBb,EAAgBJ,MAItC,GAAIR,EAaF,YANAH,EAAK6B,YACHnC,EAAEoC,YACApC,EAAEqC,gBAAgB,IAAKvB,GACvBd,EAAEsC,eAAe,CAACP,MAYxB,IAAIQ,WCxEeC,GAC3B,MAAMC,EAAe,GACfC,EAAUC,OAAOC,KAAKJ,GAE5B,IAAK,MAAMK,KAAeH,EAGxBD,EAFoBD,EAAUK,IAERA,EAGxB,OAAOJ,ED4DkBK,CAHQC,KAAKC,MAC5BC,UAAGC,aAAahE,EAAMO,cAAe,WAIZuB,GAE3B,QAAoBmC,IAAhBZ,EAoBF,OAVAjC,EAAK6B,YACHnC,EAAEoC,YACApC,EAAEqC,gBAAgB,IAAKvB,GACvBd,EAAEsC,eAAe,CAACP,WAGtBzB,EAAK8C,WACH,UACA,gFAIJb,EAAcc,SAASd,EAAa,IAGpC,MAAMe,EAA0BzB,aAC9BvB,EACApB,EAAMK,QAAU,uBAChB,CACEuC,SAAU,uBAMRyB,EAAYvD,EAAEgC,eAClBhC,EAAEiC,eAAeqB,EAAyB,CACxCtD,EAAEwD,eAAejB,MACdtB,KAYPX,EAAK6B,YACHnC,EAAEoC,YACApC,EAAEqC,gBAAgB,IAAKvB,GACvBd,EAAEsC,eAAe,CACftC,EAAEoC,YACAlC,EACAF,EAAEsC,eAAe,CAACP,IAClB/B,EAAEsC,eAAe,CAACiB"}