{"version":3,"file":"createBuildConfigs.cjs","sources":["../src/utils.ts","../src/constants.ts","../src/errors/invertObject.ts","../src/errors/evalToString.ts","../src/errors/extractErrors.ts","../src/babelPluginExportTs.ts","../src/createRollupConfig.ts","../src/createBuildConfigs.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function (relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n","import { resolveApp } from './utils';\n\nexport const paths = {\n  appPackageJson: resolveApp('package.json'),\n  tsconfigJson: resolveApp('tsconfig.json'),\n  testsSetup: resolveApp('test/setupTests.ts'),\n  appRoot: resolveApp('.'),\n  appSrc: resolveApp('src'),\n  appErrorsJson: resolveApp('errors/codes.json'),\n  appErrors: resolveApp('errors'),\n  appDist: resolveApp('dist'),\n  appConfig: resolveApp('export-ts.config.js'),\n  jestConfig: resolveApp('jest.config.js'),\n  progressEstimatorCache: resolveApp('node_modules/.cache/.progress-estimator'),\n};\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/invertObject.js\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * turns\n *   { 'MUCH ERROR': '0', 'SUCH WRONG': '1' }\n * into\n *   { 0: 'MUCH ERROR', 1: 'SUCH WRONG' }\n */\n\ntype Dict = { [key: string]: any };\n\nexport function invertObject(targetObj: Dict) {\n  const result: Dict = {};\n  const mapKeys = Object.keys(targetObj);\n\n  for (const originalKey of mapKeys) {\n    const originalVal = targetObj[originalKey];\n\n    result[originalVal] = originalKey;\n  }\n\n  return result;\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/shared/evalToString.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport function evalToString(ast: any): string {\n  switch (ast.type) {\n    case 'StringLiteral':\n    case 'Literal': // ESLint\n      return ast.value;\n    case 'BinaryExpression': // `+`\n      if (ast.operator !== '+') {\n        throw new Error('Unsupported binary operator ' + ast.operator);\n      }\n      return evalToString(ast.left) + evalToString(ast.right);\n    default:\n      throw new Error('Unsupported type ' + ast.type);\n  }\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/extract-errors.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs-extra';\nimport { parse, ParserOptions } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport { invertObject } from './invertObject';\nimport { evalToString } from './evalToString';\nimport { paths } from '../constants';\nimport { safeVariableName } from '../utils';\nimport { pascalCase } from 'pascal-case';\n\nconst babelParserOptions: ParserOptions = {\n  sourceType: 'module',\n  // As a parser, @babel/parser has its own options and we can't directly\n  // import/require a babel preset. It should be kept **the same** as\n  // the `babel-plugin-syntax-*` ones specified in\n  // https://github.com/facebook/fbjs/blob/master/packages/babel-preset-fbjs/configure.js\n  plugins: [\n    'classProperties',\n    'flow',\n    'jsx',\n    'trailingFunctionCommas',\n    'objectRestSpread',\n  ],\n} as ParserOptions; // workaround for trailingFunctionCommas syntax\n\nexport async function extractErrors(opts: any) {\n  if (!opts || !opts.errorMapFilePath) {\n    throw new Error(\n      'Missing options. Ensure you pass an object with `errorMapFilePath`.'\n    );\n  }\n\n  if (!opts.name || !opts.name) {\n    throw new Error(\n      'Missing options. Ensure you pass --name flag to export-ts'\n    );\n  }\n\n  const errorMapFilePath = opts.errorMapFilePath;\n  let existingErrorMap: any;\n  try {\n    /**\n     * Using `fs.readFile` instead of `require` here, because `require()` calls\n     * are cached, and the cache map is not properly invalidated after file\n     * changes.\n     */\n    const fileContents = await fs.readFile(errorMapFilePath, 'utf-8');\n    existingErrorMap = JSON.parse(fileContents);\n  } catch (e) {\n    existingErrorMap = {};\n  }\n\n  const allErrorIDs = Object.keys(existingErrorMap);\n  let currentID: any;\n\n  if (allErrorIDs.length === 0) {\n    // Map is empty\n    currentID = 0;\n  } else {\n    currentID = Math.max.apply(null, allErrorIDs as any) + 1;\n  }\n\n  // Here we invert the map object in memory for faster error code lookup\n  existingErrorMap = invertObject(existingErrorMap);\n\n  function transform(source: string) {\n    const ast = parse(source, babelParserOptions);\n\n    traverse(ast, {\n      CallExpression: {\n        exit(astPath: any) {\n          if (astPath.get('callee').isIdentifier({ name: 'invariant' })) {\n            const node = astPath.node;\n\n            // error messages can be concatenated (`+`) at runtime, so here's a\n            // trivial partial evaluator that interprets the literal value\n            const errorMsgLiteral = evalToString(node.arguments[1]);\n            addToErrorMap(errorMsgLiteral);\n          }\n        },\n      },\n    });\n  }\n\n  function addToErrorMap(errorMsgLiteral: any) {\n    if (existingErrorMap.hasOwnProperty(errorMsgLiteral)) {\n      return;\n    }\n    existingErrorMap[errorMsgLiteral] = '' + currentID++;\n  }\n\n  async function flush() {\n    const prettyName = pascalCase(safeVariableName(opts.name));\n    // Ensure that the ./src/errors directory exists or create it\n    await fs.ensureDir(paths.appErrors);\n\n    // Output messages to ./errors/codes.json\n    await fs.writeFile(\n      errorMapFilePath,\n      JSON.stringify(invertObject(existingErrorMap), null, 2) + '\\n',\n      'utf-8'\n    );\n\n    // Write the error files, unless they already exist\n    await fs.writeFile(\n      paths.appErrors + '/ErrorDev.js',\n      `\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      `,\n      'utf-8'\n    );\n\n    await fs.writeFile(\n      paths.appErrors + '/ErrorProd.js',\n      `\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \\`Minified ${prettyName} error #$\\{code}; visit $\\{url} for the full message or \\` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,\n      'utf-8'\n    );\n  }\n\n  return async function extractErrors(source: any) {\n    transform(source);\n    await flush();\n  };\n}\n","/**\n * @todo Do not use require.resolve so that the package can ship as ESM.\n */\n\nimport { createConfigItem } from '@babel/core';\nimport { createBabelInputPluginFactory } from '@rollup/plugin-babel';\nimport merge from 'lodash.merge';\n\nexport const isTruthy = (obj?: any) => {\n  if (!obj) {\n    return false;\n  }\n\n  return obj.constructor !== Object || Object.keys(obj).length > 0;\n};\n\n// replace lodash with lodash-es, but not lodash/fp\nconst replacements = [{ original: 'lodash(?!/fp)', replacement: 'lodash-es' }];\n\nexport const mergeConfigItems = (type: any, ...configItemsToMerge: any[]) => {\n  const mergedItems: any[] = [];\n\n  configItemsToMerge.forEach((configItemToMerge) => {\n    configItemToMerge.forEach((item: any) => {\n      const itemToMergeWithIndex = mergedItems.findIndex(\n        (mergedItem) => mergedItem.file.resolved === item.file.resolved\n      );\n\n      if (itemToMergeWithIndex === -1) {\n        mergedItems.push(item);\n        return;\n      }\n\n      mergedItems[itemToMergeWithIndex] = createConfigItem(\n        [\n          mergedItems[itemToMergeWithIndex].file.resolved,\n          merge(mergedItems[itemToMergeWithIndex].options, item.options),\n        ],\n        {\n          type,\n        }\n      );\n    });\n  });\n\n  return mergedItems;\n};\n\nexport const createConfigItems = (type: any, items: any[]) => {\n  return items.map(({ name, ...options }) => {\n    return createConfigItem([require.resolve(name), options], { type });\n  });\n};\n\nexport const babelPluginExportTs = createBabelInputPluginFactory(() => ({\n  // Passed the plugin options.\n  options({ custom: customOptions, ...pluginOptions }: any) {\n    return {\n      // Pull out any custom options that the plugin might have.\n      customOptions,\n\n      // Pass the options back with the two custom options removed.\n      pluginOptions,\n    };\n  },\n  config(config: any, { customOptions }: any) {\n    const defaultPlugins = createConfigItems(\n      'plugin',\n      [\n        // {\n        //   name: '@babel/plugin-transform-react-jsx',\n        //   pragma: customOptions.jsx || 'h',\n        //   pragmaFrag: customOptions.jsxFragment || 'Fragment',\n        // },\n        { name: 'babel-plugin-macros' },\n        { name: 'babel-plugin-annotate-pure-calls' },\n        { name: 'babel-plugin-dev-expression' },\n        customOptions.format !== 'cjs' && {\n          name: 'babel-plugin-transform-rename-import',\n          replacements,\n        },\n        {\n          name: 'babel-plugin-polyfill-regenerator',\n          // don't pollute global env as this is being used in a library\n          method: 'usage-pure',\n        },\n        {\n          name: '@babel/plugin-proposal-class-properties',\n          loose: true,\n        },\n        isTruthy(customOptions.extractErrors) && {\n          name: './errors/transformErrorMessages',\n        },\n      ].filter(Boolean)\n    );\n\n    const babelOptions = config.options || {};\n    babelOptions.presets = babelOptions.presets || [];\n\n    const presetEnvIdx = babelOptions.presets.findIndex((preset: any) =>\n      preset.file.request.includes('@babel/preset-env')\n    );\n\n    // if they use preset-env, merge their options with ours\n    if (presetEnvIdx !== -1) {\n      const presetEnv = babelOptions.presets[presetEnvIdx];\n      babelOptions.presets[presetEnvIdx] = createConfigItem(\n        [\n          presetEnv.file.resolved,\n          merge(\n            {\n              loose: true,\n              targets: customOptions.targets,\n            },\n            presetEnv.options,\n            {\n              modules: false,\n            }\n          ),\n        ],\n        {\n          type: `preset`,\n        }\n      );\n    } else {\n      // if no preset-env, add it & merge with their presets\n      const defaultPresets = createConfigItems('preset', [\n        {\n          name: '@babel/preset-env',\n          targets: customOptions.targets,\n          modules: false,\n          loose: true,\n        },\n      ]);\n\n      babelOptions.presets = mergeConfigItems(\n        'preset',\n        defaultPresets,\n        babelOptions.presets\n      );\n    }\n\n    // Merge babelrc & our plugins together\n    babelOptions.plugins = mergeConfigItems(\n      'plugin',\n      defaultPlugins,\n      babelOptions.plugins || []\n    );\n\n    return babelOptions;\n  },\n}));\n","import resolveExports from 'resolve.exports';\n\nimport { safeVariableName, safePackageName, external } from './utils';\nimport { paths } from './constants';\nimport { RollupOptions } from 'rollup';\nimport { terser } from 'rollup-plugin-terser';\nimport { DEFAULT_EXTENSIONS as DEFAULT_BABEL_EXTENSIONS } from '@babel/core';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\n// import replace from '@rollup/plugin-replace';\nimport resolvePlugin from '@rollup/plugin-node-resolve';\nimport sourceMaps from 'rollup-plugin-sourcemaps';\nimport typescript from 'rollup-plugin-typescript2';\nimport ts from 'typescript';\n\nimport { extractErrors } from './errors/extractErrors';\nimport { babelPluginExportTs } from './babelPluginExportTs';\nimport { ExportTsOptions } from './types';\nimport { optimizeLodashImports } from '@optimize-lodash/rollup-plugin';\nimport { extname, resolve, sep } from 'path';\nimport { existsSync, readFileSync } from 'fs';\n\n/**\n * A crude RegExp to match the `from 'import-source'` part of import statements,\n * or a require(...) call.\n */\nconst generateImportPattern = (importSource: string) =>\n  new RegExp(\n    `(from|require\\\\()\\\\s*['\"]${importSource.replace('.', '\\\\.')}['\"]`,\n    'g'\n  );\n\n/**\n * Get the package.json for a given absolute entry point.\n */\nfunction getPackageJson(absPath: string) {\n  const parts = absPath.split('node_modules');\n  const rootPath = parts[0];\n\n  if (parts.length < 2) return null;\n  const moduleParts = parts[1].split(sep);\n\n  /**\n   * node_modules/name => name\n   * node_modules/@test/test => @test/test\n   */\n  const moduleName = moduleParts[1].startsWith('@')\n    ? moduleParts.slice(1, 3).join(sep)\n    : moduleParts[1];\n\n  return resolve(rootPath, 'node_modules', moduleName, 'package.json');\n}\n\n/**\n * These packages will not be resolved by Rollup and will be left as imports.\n */\nconst EXTERNAL_PACKAGES = ['react', 'react-native'];\n\nconst errorCodeOpts = {\n  errorMapFilePath: paths.appErrorsJson,\n};\n\nexport async function createRollupConfig(\n  opts: ExportTsOptions,\n  outputNum: number\n): Promise<RollupOptions> {\n  const findAndRecordErrorCodes = await extractErrors({\n    ...errorCodeOpts,\n    ...opts,\n  });\n\n  const isEsm = opts.format.includes('es') || opts.format.includes('esm');\n\n  const shouldMinify =\n    opts.minify !== undefined\n      ? opts.minify\n      : opts.env === 'production' || isEsm;\n\n  let formatString = ['esm', 'cjs'].includes(opts.format) ? '' : opts.format;\n  let fileExtension = opts.format === 'esm' ? 'mjs' : 'cjs';\n\n  const outputName = [\n    `${paths.appDist}/${safePackageName(opts.name)}`,\n    formatString,\n    opts.env,\n    shouldMinify ? 'min' : '',\n    fileExtension,\n  ]\n    .filter(Boolean)\n    .join('.');\n\n  const tsconfigPath = opts.tsconfig || paths.tsconfigJson;\n  // borrowed from https://github.com/facebook/create-react-app/pull/7248\n  const tsconfigJSON = ts.readConfigFile(tsconfigPath, ts.sys.readFile).config;\n  // borrowed from https://github.com/ezolenko/rollup-plugin-typescript2/blob/42173460541b0c444326bf14f2c8c27269c4cb11/src/parse-tsconfig.ts#L48\n  const tsCompilerOptions = ts.parseJsonConfigFileContent(\n    tsconfigJSON,\n    ts.sys,\n    './'\n  ).options;\n\n  const PRODUCTION = process.env.NODE_ENV === 'production';\n\n  const fileExtensions = [\n    opts.format === 'esm' ? '.mjs' : null,\n    opts.format === 'cjs' ? '.cjs' : null,\n    '.js',\n  ].filter(Boolean);\n\n  const inputWithoutExtension = opts.input.replace(extname(opts.input), '');\n\n  return {\n    // Tell Rollup the entry point to the package\n    input: opts.input,\n    // Tell Rollup which packages to ignore\n    external: (id: string) => {\n      // bundle in polyfills as TSDX can't (yet) ensure they're installed as deps\n      if (id.startsWith('regenerator-runtime')) {\n        return false;\n      }\n\n      if (EXTERNAL_PACKAGES.includes(id)) {\n        return true;\n      }\n\n      return external(id);\n    },\n    // Minimize runtime error surface as much as possible\n    shimMissingExports: true,\n    // Rollup has treeshaking by default, but we can optimize it further...\n    treeshake: {\n      // We assume reading a property of an object never has side-effects.\n      // This means tsdx WILL remove getters and setters defined directly on objects.\n      // Any getters or setters defined on classes will not be effected.\n      //\n      // @example\n      //\n      // const foo = {\n      //  get bar() {\n      //    console.log('effect');\n      //    return 'bar';\n      //  }\n      // }\n      //\n      // const result = foo.bar;\n      // const illegalAccess = foo.quux.tooDeep;\n      //\n      // Punchline....Don't use getters and setters\n      propertyReadSideEffects: false,\n    },\n    // Establish Rollup output\n    output: {\n      // Set filenames of the consumer's package\n      file: `${inputWithoutExtension}.${opts.format === 'esm' ? 'mjs' : 'cjs'}`,\n      // Pass through the file format\n      format: isEsm ? 'es' : opts.format,\n      // Do not let Rollup call Object.freeze() on namespace import objects\n      // (i.e. import * as namespaceImportObject from...) that are accessed dynamically.\n      freeze: false,\n      // Respect tsconfig esModuleInterop when setting __esModule.\n      esModule: Boolean(tsCompilerOptions?.esModuleInterop) || isEsm,\n      name: opts.name || safeVariableName(opts.name),\n      sourcemap: true,\n      globals: {\n        react: 'React',\n        'react-native': 'ReactNative',\n        'lodash-es': 'lodashEs',\n        'lodash/fp': 'lodashFp',\n      },\n      exports: 'named',\n    },\n    plugins: [\n      /**\n       * Extract errors to `errors/` dir if --extractErrors passed.\n       */\n      opts.extractErrors && {\n        name: 'Extract errors',\n        async transform(code: string) {\n          try {\n            await findAndRecordErrorCodes(code);\n          } catch (e) {\n            return null;\n          }\n          return { code, map: null };\n        },\n      },\n      /**\n       * Resolve only non-JS. Leave regular imports alone, since packages will\n       * ship with dependencies.\n       */\n      resolvePlugin({\n        /**\n         * Do not allow CJS imports.\n         */\n        modulesOnly: true,\n        /**\n         * For node output, do not resolve `browser` field.\n         */\n        browser: opts.target !== 'node',\n        /**\n         * Resolve JSX, JSON, and .node files.\n         */\n        extensions: ['.jsx', '.json', '.node'],\n      }),\n      /**\n       * All bundled external modules need to be converted from CJS to ESM.\n       */\n      commonjs({\n        /**\n         * CJS/ESM interop. Support Node's .cjs and .mjs spec.\n         */\n        extensions: ['.js', '.cjs', '.mjs'],\n        /**\n         * Allow require('my-package') === await import('my-package').\n         *\n         * The `modulesOnly` option of @rollup/plugin-node-resolve ensures that\n         * the compiler will throw if there is an issue\n         */\n        esmExternals: true,\n        requireReturnsDefault: true,\n        /**\n         * Turn `require` statements into `import` statements in ESM out.\n         */\n        transformMixedEsModules: true,\n        /**\n         * Use Regex to make sure to include eventual hoisted packages.\n         */\n        include:\n          opts.format === 'umd' || isEsm\n            ? /\\/node_modules\\//\n            : /\\/regenerator-runtime\\//,\n      }),\n      /**\n       * Convert JSON to ESM.\n       */\n      json(),\n      /**\n       * Custom plugin that removes shebang from code because newer versions of\n       * bublé bundle their own private version of `acorn` and we can't find a\n       * way to patch in the option `allowHashBang` to acorn. Taken from\n       * microbundle.\n       *\n       * @see https://github.com/Rich-Harris/buble/pull/165\n       */\n      {\n        name: 'Remove shebang',\n        transform(code: string) {\n          let reg = /^#!(.*)/;\n          code = code.replace(reg, '');\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      /**\n       * Run TSC and transpile TypeScript.\n       */\n      // typescript({\n      //   typescript: ts,\n      //   tsconfig: opts.tsconfig,\n      //   tsconfigDefaults: {\n      //     exclude: [\n      //       // all TS test files, regardless whether co-located or in test/ etc\n      //       '**/*.spec.ts',\n      //       '**/*.test.ts',\n      //       '**/*.spec.tsx',\n      //       '**/*.test.tsx',\n      //       // TS defaults below\n      //       'node_modules',\n      //       'bower_components',\n      //       'jspm_packages',\n      //       paths.appDist,\n      //     ],\n      //     compilerOptions: {\n      //       sourceMap: true,\n      //       declaration: true,\n      //       jsx: 'react',\n      //     },\n      //   },\n      //   tsconfigOverride: {\n      //     compilerOptions: {\n      //       // TS -> esnext, then leave the rest to babel-preset-env\n      //       module: 'esnext',\n      //       target: 'esnext',\n      //       // don't output declarations more than once\n      //       ...(outputNum > 0\n      //         ? { declaration: false, declarationMap: false }\n      //         : {}),\n      //     },\n      //   },\n      //   check: !opts.transpileOnly && outputNum === 0,\n      //   useTsconfigDeclarationDir: Boolean(tsCompilerOptions?.declarationDir),\n      // }),\n      /**\n       * In --legacy mode, use Babel to transpile to ES5.\n       */\n      opts.legacy &&\n        babelPluginExportTs({\n          exclude: 'node_modules/**',\n          extensions: [...DEFAULT_BABEL_EXTENSIONS, 'ts', 'tsx'],\n          passPerPreset: true,\n          custom: {\n            targets: {\n              ...(opts.target === 'node' ? { node: 14 } : {}),\n              esmodules: isEsm,\n            },\n            extractErrors: opts.extractErrors,\n            format: opts.format,\n          },\n          babelHelpers: 'bundled',\n        }),\n      sourceMaps(),\n      /**\n       * Minify and compress with Terser for max DCE. Emit latest featureset.\n       *\n       * This is called before @rollup/replace-plugin to minimize the emitted\n       * code it would need to search.\n       */\n      shouldMinify &&\n        terser({\n          format: {\n            keep_quoted_props: true,\n            comments: false,\n          },\n          compress: {\n            keep_infinity: true,\n            pure_getters: true,\n            passes: 10,\n          },\n          ecma: opts.legacy ? 5 : 2020,\n          module: isEsm,\n          toplevel: opts.format === 'cjs' || isEsm,\n        }),\n      optimizeLodashImports({\n        useLodashEs: isEsm || undefined,\n      }),\n      /**\n       * Replace process.env.NODE_ENV variable, preventing assignment.\n       */\n      opts.env && {\n        name: 'Ensure default exports',\n        renderChunk: async (code: string, _: any) => {\n          return {\n            code: code.replace(\n              /process\\.env\\.NODE_ENV(?!\\s*=)/g,\n              JSON.stringify(PRODUCTION ? 'production' : 'development')\n            ),\n            map: null,\n          };\n        },\n      },\n      // opts.env &&\n      //   replace({\n      //     preventAssignment: true,\n      //     'process.env.NODE_ENV': JSON.stringify(\n      //       PRODUCTION ? 'production' : 'development'\n      //     ),\n      //   }),\n      /**\n       * If not in --legacy mode, ensure lodash imports are optimized in the\n       * final bundle.\n       */\n      !opts.legacy &&\n        optimizeLodashImports({\n          useLodashEs: isEsm || undefined,\n        }),\n      /**\n       * Resolve every relative import in output to their entry points.\n       *\n       * TypeScript loves to leave things like `import { jsx } from\n       * 'react/jsx-runtime` when react/jsx-runtime isn't a valid import\n       * source:  react/jsx-runtime.js *is*.\n       */\n      {\n        name: 'Resolve final runtime imports to files',\n        renderChunk: async (code: string, chunk: any) => {\n          /**\n           * Iterate over imports and rewrite all import sources to entry\n           * points.\n           */\n          for (const chunkImport of chunk.imports) {\n            /**\n             * If the import already has a file extension, do not touch.\n             */\n            if (extname(chunkImport)) continue;\n            /**\n             * The absolute location of the module entry point.\n             * `require.resolve` logic can be used to resolve the \"vanilla\"\n             * entry point as the output will be ES, and then module-specific\n             * extensions (.mjs, .cjs) will be tried.\n             */\n            let absEntryPoint = require.resolve(chunkImport);\n            const originalFileExt = extname(absEntryPoint);\n            const absEntryWithoutExtension = absEntryPoint.replace(\n              originalFileExt,\n              ''\n            );\n            /**\n             * Try to resolve ESM/CJS-specific extensions over .js when bundling\n             * for those formats.\n             */\n            if (opts.format === 'esm' || opts.format === 'cjs') {\n              for (const fileExtension of fileExtensions) {\n                const withExtension = absEntryWithoutExtension + fileExtension;\n                if (existsSync(withExtension)) {\n                  absEntryPoint = withExtension;\n                  break;\n                }\n              }\n            }\n\n            const packageJsonPath = getPackageJson(absEntryPoint);\n            if (!packageJsonPath || !existsSync(packageJsonPath)) continue;\n\n            /**\n             * Check if there's `exports` package.json logic. if there is, it\n             * controls the flow.\n             */\n            const packageJsonContent = readFileSync(packageJsonPath, 'utf-8');\n            const packageJson = JSON.parse(packageJsonContent);\n            const exportsFieldResolution = resolveExports.resolve(\n              packageJson,\n              chunkImport\n            );\n\n            /**\n             * If there is `exports` logic that resolves this import, do not\n             * rewrite it.\n             */\n            if (exportsFieldResolution) continue;\n\n            /**\n             * Remove unnecessary absolute specification.\n             */\n            const relativeEntryPoint = absEntryPoint.slice(\n              absEntryPoint.indexOf(chunkImport)\n            );\n            /**\n             * The pattern matching the \"from ...\" import statement for this\n             * import.\n             */\n            const importPattern = generateImportPattern(chunkImport);\n            /**\n             * Read the matched import/require statements and replace them.\n             */\n            const matches = code.match(importPattern) ?? [];\n            for (const match of matches) {\n              const rewritten = match.replace(chunkImport, relativeEntryPoint);\n              code = code.replace(match, rewritten);\n            }\n          }\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      /**\n       * Ensure there's an empty default export. This is the only way to have a\n       * dist/index.mjs with `export { default } from './package.min.mjs'` and\n       * support default exports at all.\n       *\n       * @see https://www.npmjs.com/package/rollup-plugin-export-default\n       */\n      {\n        name: 'Ensure default exports',\n        renderChunk: async (code: string, chunk: any) => {\n          if (chunk.exports.includes('default') || !isEsm) {\n            return null;\n          }\n\n          return {\n            code: `${code}\\nexport default {};`,\n            map: null,\n          };\n        },\n      },\n    ],\n  };\n}\n","import { RollupOptions, OutputOptions } from 'rollup';\nimport { concatAllArray } from 'jpjs';\n\nimport { paths } from './constants';\nimport { ExportTsOptions, NormalizedOpts } from './types';\n\nimport { createRollupConfig } from './createRollupConfig';\nimport { existsSync } from 'fs';\nimport glob from 'tiny-glob';\n\n// check for custom example-ts.config.js\nlet exportTsConfig = {\n  rollup(config: RollupOptions, _options: ExportTsOptions): RollupOptions {\n    return config;\n  },\n};\n\nif (existsSync(paths.appConfig)) {\n  exportTsConfig = require(paths.appConfig);\n}\n\nexport async function createBuildConfigs(\n  opts: NormalizedOpts\n): Promise<Array<RollupOptions & { output: OutputOptions }>> {\n  const inputs = await glob('dist/**/*.js');\n  const allInputs = concatAllArray(\n    inputs.map((input: string) =>\n      createAllFormats(opts, input).map(\n        (options: ExportTsOptions, index: number) => ({\n          ...options,\n          // We want to know if this is the first run for each entryfile\n          // for certain plugins (e.g. css)\n          writeMeta: index === 0,\n        })\n      )\n    )\n  );\n\n  return await Promise.all(\n    allInputs.map(async (options: ExportTsOptions, index: number) => {\n      // pass the full rollup config to export-ts.config.js override\n      const config = await createRollupConfig(options, index);\n      return exportTsConfig.rollup(config, options);\n    })\n  );\n}\n\nfunction createAllFormats(\n  opts: NormalizedOpts,\n  input: string\n): [ExportTsOptions, ...ExportTsOptions[]] {\n  return [\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('esm') && { ...opts, format: 'esm', input },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'production',\n      input,\n    },\n  ].filter(Boolean) as [ExportTsOptions, ...ExportTsOptions[]];\n}\n"],"names":["e","name","toLowerCase","relativePath","paths","appPackageJson","resolveApp","tsconfigJson","testsSetup","appRoot","appSrc","appErrorsJson","appErrors","appDist","appConfig","jestConfig","progressEstimatorCache","originalKey","evalToString","r","ast","Error","type","async","readFile","parse","fileContents","c","source","errorMsgLiteral","astPath","currentID","allErrorIDs","length","existingErrorMap","u","Object","replacement","configItemToMerge","forEach","mergedItems","itemToMergeWithIndex","merge","options","item","require","custom","config","defaultPlugins","method","presetEnv","defaultPresets","targets","getPackageJson","absPath","parts","split","rootPath","moduleParts","sep","moduleName","startsWith","slice","join","resolve","EXTERNAL_PACKAGES","errorCodeOpts","errorMapFilePath","exportTsConfig","rollup","_options","existsSync","opts","inputs","glob","allInputs","concatAllArray","map","input","format","includes","env","filter","Boolean","createAllFormats","index","writeMeta","Promise","all","outputNum","findAndRecordErrorCodes","extractErrors","isEsm","shouldMinify","undefined","minify","formatString","fileExtension","safePackageName","tsconfigJSON","ts","readConfigFile","tsconfig","sys","tsCompilerOptions","parseJsonConfigFileContent","PRODUCTION","process","NODE_ENV","fileExtensions","inputWithoutExtension","replace","extname","external","id","isAbsolute","shimMissingExports","treeshake","propertyReadSideEffects","output","file","freeze","esModule","esModuleInterop","safeVariableName","sourcemap","globals","react","exports","plugins","transform","code","resolvePlugin","modulesOnly","browser","target","extensions","commonjs","esmExternals","requireReturnsDefault","transformMixedEsModules","include","json","legacy","babelPluginExportTs","exclude","DEFAULT_BABEL_EXTENSIONS","passPerPreset","node","esmodules","babelHelpers","sourceMaps","terser","keep_quoted_props","comments","compress","keep_infinity","pure_getters","passes","ecma","module","toplevel","optimizeLodashImports","useLodashEs","renderChunk","_","JSON","stringify","chunk","chunkImport","imports","absEntryPoint","originalFileExt","absEntryWithoutExtension","withExtension","packageJsonPath","packageJsonContent","readFileSync","packageJson","resolveExports","relativeEntryPoint","indexOf","importPattern","RegExp","matches","match","rewritten","createRollupConfig"],"mappings":"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"}