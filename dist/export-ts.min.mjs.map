{"version":3,"file":"export-ts.min.mjs","sources":["../src/logError.ts","../src/utils.ts","../src/constants.ts","../src/getInstallCmd.ts","../src/output.ts","../src/messages.ts","../src/errors/invertObject.ts","../src/errors/evalToString.ts","../src/errors/extractErrors.ts","../src/babelPluginExportTs.ts","../src/createRollupConfig.ts","../src/createBuildConfigs.ts","../src/createProgressEstimator.ts","../src/templates/basic.ts","../src/templates/react.ts","../src/templates/index.ts","../src/templates/react-with-storybook.ts","../src/index.ts","../src/templates/utils/index.ts","../src/utils/log.ts","../src/getInstallArgs.ts","../src/deprecated.ts","../src/createJestConfig.ts","../src/createEslintConfig.ts"],"sourcesContent":["import chalk from 'chalk';\n\nconst stderr = console.error.bind(console);\n\nexport default function logError(err: any) {\n  const error = err.error || err;\n  const description = `${error.name ? error.name + ': ' : ''}${\n    error.message || error\n  }`;\n  const message = error.plugin\n    ? error.plugin === 'rpt2'\n      ? `(typescript) ${description}`\n      : `(${error.plugin} plugin) ${description}`\n    : description;\n\n  stderr(chalk.bold.red(message));\n\n  if (error.loc) {\n    stderr();\n    stderr(`at ${error.loc.file}:${error.loc.line}:${error.loc.column}`);\n  }\n\n  if (error.frame) {\n    stderr();\n    stderr(chalk.dim(error.frame));\n  } else if (err.stack) {\n    const headlessStack = error.stack.replace(message, '');\n    stderr(chalk.dim(headlessStack));\n  }\n\n  stderr();\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function (relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n","import { resolveApp } from './utils';\n\nexport const paths = {\n  appPackageJson: resolveApp('package.json'),\n  tsconfigJson: resolveApp('tsconfig.json'),\n  testsSetup: resolveApp('test/setupTests.ts'),\n  appRoot: resolveApp('.'),\n  appSrc: resolveApp('src'),\n  appErrorsJson: resolveApp('errors/codes.json'),\n  appErrors: resolveApp('errors'),\n  appDist: resolveApp('dist'),\n  appConfig: resolveApp('export-ts.config.js'),\n  jestConfig: resolveApp('jest.config.js'),\n  progressEstimatorCache: resolveApp('node_modules/.cache/.progress-estimator'),\n};\n","import execa from 'execa';\n\nlet cmd: InstallCommand;\n\nexport type InstallCommand = 'yarn' | 'npm';\n\nexport default async function getInstallCmd(): Promise<InstallCommand> {\n  if (cmd) {\n    return cmd;\n  }\n\n  try {\n    await execa('yarnpkg', ['--version']);\n    cmd = 'yarn';\n  } catch (e) {\n    cmd = 'npm';\n  }\n\n  return cmd;\n}\n","import { eraseLine } from 'ansi-escapes';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\n// This was copied from Razzle. Lots of unused stuff.\nexport const info = (msg: string) => {\n  console.log(`${chalk.gray('>')} ${msg}`);\n};\n\nexport const error = (msg: string | Error) => {\n  if (msg instanceof Error) {\n    msg = msg.message;\n  }\n\n  console.error(`${chalk.red('> Error!')} ${msg}`);\n};\n\nexport const success = (msg: string) => {\n  console.log(`${chalk.green('> Success!')} ${msg}`);\n};\n\nexport const wait = (msg: string) => {\n  const spinner = ora(chalk.green(msg));\n  spinner.color = 'blue';\n  spinner.start();\n\n  return () => {\n    spinner.stop();\n    process.stdout.write(eraseLine);\n  };\n};\n\nexport const cmd = (cmd: string) => {\n  return chalk.bold(chalk.cyan(cmd));\n};\n\nexport const code = (cmd: string) => {\n  return `${chalk.gray('`')}${chalk.bold(cmd)}${chalk.gray('`')}`;\n};\n\nexport const param = (param: string) => {\n  return chalk.bold(`${chalk.gray('{')}${chalk.bold(param)}${chalk.gray('}')}`);\n};\n","import chalk from 'chalk';\nimport getInstallCmd from './getInstallCmd';\nimport * as Output from './output';\nimport { indentString } from './utils/log';\n\n// This was copied from Razzle. Lots of unused stuff.\nconst program = {\n  name: 'export-ts',\n};\n\nexport const help = function () {\n  return `\n    Only ${chalk.green('<project-directory>')} is required.\n    If you have any problems, do not hesitate to file an issue:\n    ${chalk.cyan('https://github.com/ctjlewis/export-ts/issues/new')}\n  `;\n};\n\nexport const missingProjectName = function () {\n  return `\nPlease specify the project directory:\n  ${chalk.cyan(program.name)} ${chalk.green('<project-directory>')}\nFor example:\n  ${chalk.cyan(program.name)} ${chalk.green('my-export-ts-lib')}\nRun ${chalk.cyan(`${program.name} --help`)} to see all options.\n`;\n};\n\nexport const alreadyExists = function (projectName: string) {\n  return indentString(\n    `Uh oh! Looks like there's already a directory called ${chalk.red(\n      projectName\n    )}. Please try a different name or delete that folder.`\n  );\n};\n\nexport const installing = function (packages: string[]) {\n  const pkgText = packages\n    .map((pkg) => indentString(`${chalk.cyan(chalk.bold(pkg))}`, 2))\n    .join('\\n');\n\n  return `Installing dependencies:\\n\\n${pkgText}\\n\\n`;\n};\n\nexport const installError = function (packages: string[]) {\n  const pkgText = packages\n    .map(function (pkg) {\n      return `${chalk.cyan(chalk.bold(pkg))}`;\n    })\n    .join(', ');\n\n  Output.error(`Failed to install ${pkgText}, try again.`);\n};\n\nexport const copying = function (projectName: string) {\n  return `Creating ${chalk.bold(chalk.green(projectName))}...`;\n};\n\nexport const start = async function (projectName: string) {\n  const cmd = await getInstallCmd();\n\n  const commands = {\n    install: cmd === 'npm' ? 'npm install' : 'yarn install',\n    build: cmd === 'npm' ? 'npm run build' : 'yarn build',\n    start: cmd === 'npm' ? 'npm run start' : 'yarn start',\n    test: cmd === 'npm' ? 'npm test' : 'yarn test',\n  };\n\n  return `\n  ${chalk.green('Awesome!')} You're now ready to start coding.\n  \n  I already ran ${Output.cmd(commands.install)} for you, so your next steps are:\n    ${Output.cmd(`cd ${projectName}`)}\n  \n  To start developing (rebuilds on changes):\n    ${Output.cmd(commands.start)}\n  \n  To build for production:\n    ${Output.cmd(commands.build)}\n\n  To test your library with Jest:\n    ${Output.cmd(commands.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${chalk.green('https://github.com/ctjlewis/export-ts/issues')}\n`;\n};\n\nexport const incorrectNodeVersion = function (requiredVersion: string) {\n  return `Unsupported Node version! Your current Node version (${chalk.red(\n    process.version\n  )}) does not satisfy the requirement of Node ${chalk.cyan(requiredVersion)}.`;\n};\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/invertObject.js\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * turns\n *   { 'MUCH ERROR': '0', 'SUCH WRONG': '1' }\n * into\n *   { 0: 'MUCH ERROR', 1: 'SUCH WRONG' }\n */\n\ntype Dict = { [key: string]: any };\n\nexport function invertObject(targetObj: Dict) {\n  const result: Dict = {};\n  const mapKeys = Object.keys(targetObj);\n\n  for (const originalKey of mapKeys) {\n    const originalVal = targetObj[originalKey];\n\n    result[originalVal] = originalKey;\n  }\n\n  return result;\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/shared/evalToString.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport function evalToString(ast: any): string {\n  switch (ast.type) {\n    case 'StringLiteral':\n    case 'Literal': // ESLint\n      return ast.value;\n    case 'BinaryExpression': // `+`\n      if (ast.operator !== '+') {\n        throw new Error('Unsupported binary operator ' + ast.operator);\n      }\n      return evalToString(ast.left) + evalToString(ast.right);\n    default:\n      throw new Error('Unsupported type ' + ast.type);\n  }\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/extract-errors.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs-extra';\nimport { parse, ParserOptions } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport { invertObject } from './invertObject';\nimport { evalToString } from './evalToString';\nimport { paths } from '../constants';\nimport { safeVariableName } from '../utils';\nimport { pascalCase } from 'pascal-case';\n\nconst babelParserOptions: ParserOptions = {\n  sourceType: 'module',\n  // As a parser, @babel/parser has its own options and we can't directly\n  // import/require a babel preset. It should be kept **the same** as\n  // the `babel-plugin-syntax-*` ones specified in\n  // https://github.com/facebook/fbjs/blob/master/packages/babel-preset-fbjs/configure.js\n  plugins: [\n    'classProperties',\n    'flow',\n    'jsx',\n    'trailingFunctionCommas',\n    'objectRestSpread',\n  ],\n} as ParserOptions; // workaround for trailingFunctionCommas syntax\n\nexport async function extractErrors(opts: any) {\n  if (!opts || !opts.errorMapFilePath) {\n    throw new Error(\n      'Missing options. Ensure you pass an object with `errorMapFilePath`.'\n    );\n  }\n\n  if (!opts.name || !opts.name) {\n    throw new Error(\n      'Missing options. Ensure you pass --name flag to export-ts'\n    );\n  }\n\n  const errorMapFilePath = opts.errorMapFilePath;\n  let existingErrorMap: any;\n  try {\n    /**\n     * Using `fs.readFile` instead of `require` here, because `require()` calls\n     * are cached, and the cache map is not properly invalidated after file\n     * changes.\n     */\n    const fileContents = await fs.readFile(errorMapFilePath, 'utf-8');\n    existingErrorMap = JSON.parse(fileContents);\n  } catch (e) {\n    existingErrorMap = {};\n  }\n\n  const allErrorIDs = Object.keys(existingErrorMap);\n  let currentID: any;\n\n  if (allErrorIDs.length === 0) {\n    // Map is empty\n    currentID = 0;\n  } else {\n    currentID = Math.max.apply(null, allErrorIDs as any) + 1;\n  }\n\n  // Here we invert the map object in memory for faster error code lookup\n  existingErrorMap = invertObject(existingErrorMap);\n\n  function transform(source: string) {\n    const ast = parse(source, babelParserOptions);\n\n    traverse(ast, {\n      CallExpression: {\n        exit(astPath: any) {\n          if (astPath.get('callee').isIdentifier({ name: 'invariant' })) {\n            const node = astPath.node;\n\n            // error messages can be concatenated (`+`) at runtime, so here's a\n            // trivial partial evaluator that interprets the literal value\n            const errorMsgLiteral = evalToString(node.arguments[1]);\n            addToErrorMap(errorMsgLiteral);\n          }\n        },\n      },\n    });\n  }\n\n  function addToErrorMap(errorMsgLiteral: any) {\n    if (existingErrorMap.hasOwnProperty(errorMsgLiteral)) {\n      return;\n    }\n    existingErrorMap[errorMsgLiteral] = '' + currentID++;\n  }\n\n  async function flush() {\n    const prettyName = pascalCase(safeVariableName(opts.name));\n    // Ensure that the ./src/errors directory exists or create it\n    await fs.ensureDir(paths.appErrors);\n\n    // Output messages to ./errors/codes.json\n    await fs.writeFile(\n      errorMapFilePath,\n      JSON.stringify(invertObject(existingErrorMap), null, 2) + '\\n',\n      'utf-8'\n    );\n\n    // Write the error files, unless they already exist\n    await fs.writeFile(\n      paths.appErrors + '/ErrorDev.js',\n      `\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      `,\n      'utf-8'\n    );\n\n    await fs.writeFile(\n      paths.appErrors + '/ErrorProd.js',\n      `\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \\`Minified ${prettyName} error #$\\{code}; visit $\\{url} for the full message or \\` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,\n      'utf-8'\n    );\n  }\n\n  return async function extractErrors(source: any) {\n    transform(source);\n    await flush();\n  };\n}\n","/**\n * @todo Do not use require.resolve so that the package can ship as ESM.\n */\n\nimport { createConfigItem } from '@babel/core';\nimport { createBabelInputPluginFactory } from '@rollup/plugin-babel';\nimport merge from 'lodash.merge';\n\nexport const isTruthy = (obj?: any) => {\n  if (!obj) {\n    return false;\n  }\n\n  return obj.constructor !== Object || Object.keys(obj).length > 0;\n};\n\n// replace lodash with lodash-es, but not lodash/fp\nconst replacements = [{ original: 'lodash(?!/fp)', replacement: 'lodash-es' }];\n\nexport const mergeConfigItems = (type: any, ...configItemsToMerge: any[]) => {\n  const mergedItems: any[] = [];\n\n  configItemsToMerge.forEach((configItemToMerge) => {\n    configItemToMerge.forEach((item: any) => {\n      const itemToMergeWithIndex = mergedItems.findIndex(\n        (mergedItem) => mergedItem.file.resolved === item.file.resolved\n      );\n\n      if (itemToMergeWithIndex === -1) {\n        mergedItems.push(item);\n        return;\n      }\n\n      mergedItems[itemToMergeWithIndex] = createConfigItem(\n        [\n          mergedItems[itemToMergeWithIndex].file.resolved,\n          merge(mergedItems[itemToMergeWithIndex].options, item.options),\n        ],\n        {\n          type,\n        }\n      );\n    });\n  });\n\n  return mergedItems;\n};\n\nexport const createConfigItems = (type: any, items: any[]) => {\n  return items.map(({ name, ...options }) => {\n    return createConfigItem([require.resolve(name), options], { type });\n  });\n};\n\nexport const babelPluginExportTs = createBabelInputPluginFactory(() => ({\n  // Passed the plugin options.\n  options({ custom: customOptions, ...pluginOptions }: any) {\n    return {\n      // Pull out any custom options that the plugin might have.\n      customOptions,\n\n      // Pass the options back with the two custom options removed.\n      pluginOptions,\n    };\n  },\n  config(config: any, { customOptions }: any) {\n    const defaultPlugins = createConfigItems(\n      'plugin',\n      [\n        // {\n        //   name: '@babel/plugin-transform-react-jsx',\n        //   pragma: customOptions.jsx || 'h',\n        //   pragmaFrag: customOptions.jsxFragment || 'Fragment',\n        // },\n        { name: 'babel-plugin-macros' },\n        { name: 'babel-plugin-annotate-pure-calls' },\n        { name: 'babel-plugin-dev-expression' },\n        customOptions.format !== 'cjs' && {\n          name: 'babel-plugin-transform-rename-import',\n          replacements,\n        },\n        {\n          name: 'babel-plugin-polyfill-regenerator',\n          // don't pollute global env as this is being used in a library\n          method: 'usage-pure',\n        },\n        {\n          name: '@babel/plugin-proposal-class-properties',\n          loose: true,\n        },\n        isTruthy(customOptions.extractErrors) && {\n          name: './errors/transformErrorMessages',\n        },\n      ].filter(Boolean)\n    );\n\n    const babelOptions = config.options || {};\n    babelOptions.presets = babelOptions.presets || [];\n\n    const presetEnvIdx = babelOptions.presets.findIndex((preset: any) =>\n      preset.file.request.includes('@babel/preset-env')\n    );\n\n    // if they use preset-env, merge their options with ours\n    if (presetEnvIdx !== -1) {\n      const presetEnv = babelOptions.presets[presetEnvIdx];\n      babelOptions.presets[presetEnvIdx] = createConfigItem(\n        [\n          presetEnv.file.resolved,\n          merge(\n            {\n              loose: true,\n              targets: customOptions.targets,\n            },\n            presetEnv.options,\n            {\n              modules: false,\n            }\n          ),\n        ],\n        {\n          type: `preset`,\n        }\n      );\n    } else {\n      // if no preset-env, add it & merge with their presets\n      const defaultPresets = createConfigItems('preset', [\n        {\n          name: '@babel/preset-env',\n          targets: customOptions.targets,\n          modules: false,\n          loose: true,\n        },\n      ]);\n\n      babelOptions.presets = mergeConfigItems(\n        'preset',\n        defaultPresets,\n        babelOptions.presets\n      );\n    }\n\n    // Merge babelrc & our plugins together\n    babelOptions.plugins = mergeConfigItems(\n      'plugin',\n      defaultPlugins,\n      babelOptions.plugins || []\n    );\n\n    return babelOptions;\n  },\n}));\n","import resolveExports from 'resolve.exports';\n\nimport { safeVariableName, safePackageName, external } from './utils';\nimport { paths } from './constants';\nimport { RollupOptions } from 'rollup';\nimport { terser } from 'rollup-plugin-terser';\nimport { DEFAULT_EXTENSIONS as DEFAULT_BABEL_EXTENSIONS } from '@babel/core';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\n// import replace from '@rollup/plugin-replace';\nimport resolvePlugin from '@rollup/plugin-node-resolve';\nimport sourceMaps from 'rollup-plugin-sourcemaps';\nimport typescript from 'rollup-plugin-typescript2';\nimport ts from 'typescript';\n\nimport { extractErrors } from './errors/extractErrors';\nimport { babelPluginExportTs } from './babelPluginExportTs';\nimport { ExportTsOptions } from './types';\nimport { optimizeLodashImports } from '@optimize-lodash/rollup-plugin';\nimport { extname, resolve, sep } from 'path';\nimport { existsSync, readFileSync } from 'fs';\n\n/**\n * A crude RegExp to match the `from 'import-source'` part of import statements,\n * or a require(...) call.\n */\nconst generateImportPattern = (importSource: string) =>\n  new RegExp(\n    `(from|require\\\\()\\\\s*['\"]${importSource.replace('.', '\\\\.')}['\"]`,\n    'g'\n  );\n\n/**\n * Get the package.json for a given absolute entry point.\n */\nfunction getPackageJson(absPath: string) {\n  const parts = absPath.split('node_modules');\n  const rootPath = parts[0];\n\n  if (parts.length < 2) return null;\n  const moduleParts = parts[1].split(sep);\n\n  /**\n   * node_modules/name => name\n   * node_modules/@test/test => @test/test\n   */\n  const moduleName = moduleParts[1].startsWith('@')\n    ? moduleParts.slice(1, 3).join(sep)\n    : moduleParts[1];\n\n  return resolve(rootPath, 'node_modules', moduleName, 'package.json');\n}\n\n/**\n * These packages will not be resolved by Rollup and will be left as imports.\n */\nconst EXTERNAL_PACKAGES = ['react', 'react-native'];\n\nconst errorCodeOpts = {\n  errorMapFilePath: paths.appErrorsJson,\n};\n\nexport async function createRollupConfig(\n  opts: ExportTsOptions,\n  outputNum: number\n): Promise<RollupOptions> {\n  const findAndRecordErrorCodes = await extractErrors({\n    ...errorCodeOpts,\n    ...opts,\n  });\n\n  const isEsm = opts.format.includes('es') || opts.format.includes('esm');\n\n  const shouldMinify =\n    opts.minify !== undefined\n      ? opts.minify\n      : opts.env === 'production' || isEsm;\n\n  let formatString = ['esm', 'cjs'].includes(opts.format) ? '' : opts.format;\n  let fileExtension = opts.format === 'esm' ? 'mjs' : 'cjs';\n\n  const outputName = [\n    `${paths.appDist}/${safePackageName(opts.name)}`,\n    formatString,\n    opts.env,\n    shouldMinify ? 'min' : '',\n    fileExtension,\n  ]\n    .filter(Boolean)\n    .join('.');\n\n  const tsconfigPath = opts.tsconfig || paths.tsconfigJson;\n  // borrowed from https://github.com/facebook/create-react-app/pull/7248\n  const tsconfigJSON = ts.readConfigFile(tsconfigPath, ts.sys.readFile).config;\n  // borrowed from https://github.com/ezolenko/rollup-plugin-typescript2/blob/42173460541b0c444326bf14f2c8c27269c4cb11/src/parse-tsconfig.ts#L48\n  const tsCompilerOptions = ts.parseJsonConfigFileContent(\n    tsconfigJSON,\n    ts.sys,\n    './'\n  ).options;\n\n  const PRODUCTION = process.env.NODE_ENV === 'production';\n\n  const fileExtensions = [\n    opts.format === 'esm' ? '.mjs' : null,\n    opts.format === 'cjs' ? '.cjs' : null,\n    '.js',\n  ].filter(Boolean);\n\n  return {\n    // Tell Rollup the entry point to the package\n    input: opts.input,\n    // Tell Rollup which packages to ignore\n    external: (id: string) => {\n      // bundle in polyfills as export-ts can't (yet) ensure they're installed as deps\n      if (id.startsWith('regenerator-runtime')) {\n        return false;\n      }\n\n      if (EXTERNAL_PACKAGES.includes(id)) {\n        return true;\n      }\n\n      return external(id);\n    },\n    // Minimize runtime error surface as much as possible\n    shimMissingExports: true,\n    // Rollup has treeshaking by default, but we can optimize it further...\n    treeshake: {\n      // We assume reading a property of an object never has side-effects.\n      // This means export-ts WILL remove getters and setters defined directly on objects.\n      // Any getters or setters defined on classes will not be effected.\n      //\n      // @example\n      //\n      // const foo = {\n      //  get bar() {\n      //    console.log('effect');\n      //    return 'bar';\n      //  }\n      // }\n      //\n      // const result = foo.bar;\n      // const illegalAccess = foo.quux.tooDeep;\n      //\n      // Punchline....Don't use getters and setters\n      propertyReadSideEffects: false,\n    },\n    // Establish Rollup output\n    output: {\n      // Set filenames of the consumer's package\n      file: outputName,\n      // Pass through the file format\n      format: isEsm ? 'es' : opts.format,\n      // Do not let Rollup call Object.freeze() on namespace import objects\n      // (i.e. import * as namespaceImportObject from...) that are accessed dynamically.\n      freeze: false,\n      // Respect tsconfig esModuleInterop when setting __esModule.\n      esModule: Boolean(tsCompilerOptions?.esModuleInterop) || isEsm,\n      name: opts.name || safeVariableName(opts.name),\n      sourcemap: true,\n      globals: {\n        react: 'React',\n        'react-native': 'ReactNative',\n        'lodash-es': 'lodashEs',\n        'lodash/fp': 'lodashFp',\n      },\n      exports: 'named',\n    },\n    plugins: [\n      /**\n       * Extract errors to `errors/` dir if --extractErrors passed.\n       */\n      opts.extractErrors && {\n        name: 'Extract errors',\n        async transform(code: string) {\n          try {\n            await findAndRecordErrorCodes(code);\n          } catch (e) {\n            return null;\n          }\n          return { code, map: null };\n        },\n      },\n      /**\n       * Resolve only non-JS. Leave regular imports alone, since packages will\n       * ship with dependencies.\n       */\n      resolvePlugin({\n        /**\n         * Do not allow CJS imports.\n         */\n        modulesOnly: true,\n        /**\n         * For node output, do not resolve `browser` field.\n         */\n        browser: opts.target !== 'node',\n        /**\n         * Resolve JSX, JSON, and .node files.\n         */\n        extensions: ['.jsx', '.json', '.node'],\n      }),\n      /**\n       * All bundled external modules need to be converted from CJS to ESM.\n       */\n      commonjs({\n        /**\n         * CJS/ESM interop. Support Node's .cjs and .mjs spec.\n         */\n        extensions: ['.js', '.cjs', '.mjs'],\n        /**\n         * Allow require('my-package') === await import('my-package').\n         *\n         * The `modulesOnly` option of @rollup/plugin-node-resolve ensures that\n         * the compiler will throw if there is an issue\n         */\n        esmExternals: true,\n        requireReturnsDefault: true,\n        /**\n         * Turn `require` statements into `import` statements in ESM out.\n         */\n        transformMixedEsModules: true,\n        /**\n         * Use Regex to make sure to include eventual hoisted packages.\n         */\n        include:\n          opts.format === 'umd' || isEsm\n            ? /\\/node_modules\\//\n            : /\\/regenerator-runtime\\//,\n      }),\n      /**\n       * Convert JSON to ESM.\n       */\n      json(),\n      /**\n       * Custom plugin that removes shebang from code because newer versions of\n       * bublé bundle their own private version of `acorn` and we can't find a\n       * way to patch in the option `allowHashBang` to acorn. Taken from\n       * microbundle.\n       *\n       * @see https://github.com/Rich-Harris/buble/pull/165\n       */\n      {\n        name: 'Remove shebang',\n        transform(code: string) {\n          let reg = /^#!(.*)/;\n          code = code.replace(reg, '');\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      /**\n       * Run TSC and transpile TypeScript.\n       */\n      typescript({\n        typescript: ts,\n        tsconfig: opts.tsconfig,\n        tsconfigDefaults: {\n          exclude: [\n            // all TS test files, regardless whether co-located or in test/ etc\n            '**/*.spec.ts',\n            '**/*.test.ts',\n            '**/*.spec.tsx',\n            '**/*.test.tsx',\n            // TS defaults below\n            'node_modules',\n            'bower_components',\n            'jspm_packages',\n            paths.appDist,\n          ],\n          compilerOptions: {\n            sourceMap: true,\n            declaration: true,\n            jsx: 'react',\n          },\n        },\n        tsconfigOverride: {\n          compilerOptions: {\n            // TS -> esnext, then leave the rest to babel-preset-env\n            module: 'esnext',\n            target: 'esnext',\n            // don't output declarations more than once\n            ...(outputNum > 0\n              ? { declaration: false, declarationMap: false }\n              : {}),\n          },\n        },\n        check: !opts.transpileOnly && outputNum === 0,\n        useTsconfigDeclarationDir: Boolean(tsCompilerOptions?.declarationDir),\n      }),\n      /**\n       * In --legacy mode, use Babel to transpile to ES5.\n       */\n      opts.legacy &&\n        babelPluginExportTs({\n          exclude: 'node_modules/**',\n          extensions: [...DEFAULT_BABEL_EXTENSIONS, 'ts', 'tsx'],\n          passPerPreset: true,\n          custom: {\n            targets: {\n              ...(opts.target === 'node' ? { node: 14 } : {}),\n              esmodules: isEsm,\n            },\n            extractErrors: opts.extractErrors,\n            format: opts.format,\n          },\n          babelHelpers: 'bundled',\n        }),\n      sourceMaps(),\n      /**\n       * Minify and compress with Terser for max DCE. Emit latest featureset.\n       *\n       * This is called before @rollup/replace-plugin to minimize the emitted\n       * code it would need to search.\n       */\n      shouldMinify &&\n        terser({\n          format: {\n            keep_quoted_props: true,\n            comments: false,\n          },\n          compress: {\n            keep_infinity: true,\n            pure_getters: true,\n            passes: 10,\n          },\n          ecma: opts.legacy ? 5 : 2020,\n          module: isEsm,\n          toplevel: opts.format === 'cjs' || isEsm,\n        }),\n      optimizeLodashImports({\n        useLodashEs: isEsm || undefined,\n      }),\n      /**\n       * Replace process.env.NODE_ENV variable, preventing assignment.\n       */\n      opts.env && {\n        name: 'Ensure default exports',\n        renderChunk: async (code: string, _: any) => {\n          return {\n            code: code.replace(\n              /process\\.env\\.NODE_ENV(?!\\s*=)/g,\n              JSON.stringify(PRODUCTION ? 'production' : 'development')\n            ),\n            map: null,\n          };\n        },\n      },\n      /**\n       * If not in --legacy mode, ensure lodash imports are optimized in the\n       * final bundle.\n       */\n      !opts.legacy &&\n        optimizeLodashImports({\n          useLodashEs: isEsm || undefined,\n        }),\n      /**\n       * Resolve every relative import in output to their entry points.\n       *\n       * TypeScript loves to leave things like `import { jsx } from\n       * 'react/jsx-runtime` when react/jsx-runtime isn't a valid import\n       * source:  react/jsx-runtime.js *is*.\n       */\n      {\n        name: 'Resolve final runtime imports to files',\n        renderChunk: async (code: string, chunk: any) => {\n          /**\n           * Iterate over imports and rewrite all import sources to entry\n           * points.\n           */\n          for (const chunkImport of chunk.imports) {\n            /**\n             * If the import already has a file extension, do not touch.\n             */\n            if (extname(chunkImport)) continue;\n            /**\n             * The absolute location of the module entry point.\n             * `require.resolve` logic can be used to resolve the \"vanilla\"\n             * entry point as the output will be ES, and then module-specific\n             * extensions (.mjs, .cjs) will be tried.\n             */\n            let absEntryPoint = require.resolve(chunkImport);\n            const originalFileExt = extname(absEntryPoint);\n            const absEntryWithoutExtension = absEntryPoint.replace(\n              originalFileExt,\n              ''\n            );\n            /**\n             * Try to resolve ESM/CJS-specific extensions over .js when bundling\n             * for those formats.\n             */\n            if (opts.format === 'esm' || opts.format === 'cjs') {\n              for (const fileExtension of fileExtensions) {\n                const withExtension = absEntryWithoutExtension + fileExtension;\n                if (existsSync(withExtension)) {\n                  absEntryPoint = withExtension;\n                  break;\n                }\n              }\n            }\n\n            const packageJsonPath = getPackageJson(absEntryPoint);\n            if (!packageJsonPath || !existsSync(packageJsonPath)) continue;\n\n            /**\n             * Check if there's `exports` package.json logic. if there is, it\n             * controls the flow.\n             */\n            const packageJsonContent = readFileSync(packageJsonPath, 'utf-8');\n            const packageJson = JSON.parse(packageJsonContent);\n            const exportsFieldResolution = resolveExports.resolve(\n              packageJson,\n              chunkImport\n            );\n\n            /**\n             * If there is `exports` logic that resolves this import, do not\n             * rewrite it.\n             */\n            if (exportsFieldResolution) continue;\n\n            /**\n             * Remove unnecessary absolute specification.\n             */\n            const relativeEntryPoint = absEntryPoint.slice(\n              absEntryPoint.indexOf(chunkImport)\n            );\n            /**\n             * The pattern matching the \"from ...\" import statement for this\n             * import.\n             */\n            const importPattern = generateImportPattern(chunkImport);\n            /**\n             * Read the matched import/require statements and replace them.\n             */\n            const matches = code.match(importPattern) ?? [];\n            for (const match of matches) {\n              const rewritten = match.replace(chunkImport, relativeEntryPoint);\n              code = code.replace(match, rewritten);\n            }\n          }\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      /**\n       * Ensure there's an empty default export. This is the only way to have a\n       * dist/index.mjs with `export { default } from './package.min.mjs'` and\n       * support default exports at all.\n       *\n       * @see https://www.npmjs.com/package/rollup-plugin-export-default\n       */\n      {\n        name: 'Ensure default exports',\n        renderChunk: async (code: string, chunk: any) => {\n          if (chunk.exports.includes('default') || !isEsm) {\n            return null;\n          }\n\n          return {\n            code: `${code}\\nexport default {};`,\n            map: null,\n          };\n        },\n      },\n    ],\n  };\n}\n","import { RollupOptions, OutputOptions } from 'rollup';\nimport { concatAllArray } from 'jpjs';\n\nimport { paths } from './constants';\nimport { ExportTsOptions, NormalizedOpts } from './types';\n\nimport { createRollupConfig } from './createRollupConfig';\nimport { existsSync } from 'fs';\n\n// check for custom example-ts.config.js\nlet exportTsConfig = {\n  rollup(config: RollupOptions, _options: ExportTsOptions): RollupOptions {\n    return config;\n  },\n};\n\nif (existsSync(paths.appConfig)) {\n  exportTsConfig = require(paths.appConfig);\n}\n\nexport async function createBuildConfigs(\n  opts: NormalizedOpts\n): Promise<Array<RollupOptions & { output: OutputOptions }>> {\n  const allInputs = concatAllArray(\n    opts.input.map((input: string) =>\n      createAllFormats(opts, input).map(\n        (options: ExportTsOptions, index: number) => ({\n          ...options,\n          // We want to know if this is the first run for each entryfile\n          // for certain plugins (e.g. css)\n          writeMeta: index === 0,\n        })\n      )\n    )\n  );\n\n  return await Promise.all(\n    allInputs.map(async (options: ExportTsOptions, index: number) => {\n      // pass the full rollup config to export-ts.config.js override\n      const config = await createRollupConfig(options, index);\n      return exportTsConfig.rollup(config, options);\n    })\n  );\n}\n\nfunction createAllFormats(\n  opts: NormalizedOpts,\n  input: string\n): [ExportTsOptions, ...ExportTsOptions[]] {\n  return [\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('esm') && { ...opts, format: 'esm', input },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'production',\n      input,\n    },\n  ].filter(Boolean) as [ExportTsOptions, ...ExportTsOptions[]];\n}\n","import fs from 'fs-extra';\n\nimport { paths } from './constants';\nimport progressEstimator from 'progress-estimator';\n\nexport async function createProgressEstimator() {\n  await fs.ensureDir(paths.progressEstimatorCache);\n  return progressEstimator({\n    // All configuration keys are optional, but it's recommended to specify a storage location.\n    storagePath: paths.progressEstimatorCache,\n  });\n}\n","import { Template } from './template';\n\nconst basicTemplate: Template = {\n  name: 'basic',\n  dependencies: [\n    'husky',\n    'export-ts',\n    'tslib',\n    'typescript',\n    'size-limit',\n    '@size-limit/preset-small-lib',\n  ],\n  packageJson: {\n    // name: safeName,\n    version: '0.1.0',\n    license: 'MIT',\n    // author: author,\n    main: './dist/index.cjs',\n    module: './dist/index.mjs',\n    exports: {\n      './package.json': './package.json',\n      '.': {\n        import: './dist/index.mjs',\n        require: './dist/index.cjs',\n      },\n    },\n    // module: `dist/${safeName}.mjs`,\n    typings: `dist/index.d.ts`,\n    files: ['dist', 'src'],\n    engines: {\n      node: '>=14',\n    },\n    scripts: {\n      start: 'export-ts watch',\n      build: 'export-ts build',\n      test: 'export-ts test',\n      posttest: 'node test/import.mjs && node test/require.cjs',\n      lint: 'export-ts lint',\n      prepare: 'export-ts build',\n      size: 'size-limit',\n      analyze: 'size-limit --why',\n    },\n    peerDependencies: {},\n    husky: {\n      hooks: {\n        'pre-commit': 'export-ts lint',\n      },\n    },\n    prettier: {\n      printWidth: 80,\n      semi: true,\n      singleQuote: true,\n      trailingComma: 'es5',\n    },\n  },\n};\n\nexport default basicTemplate;\n","import { Template } from './template';\n\nimport basicTemplate from './basic';\nimport { PackageJson } from 'type-fest';\n\nconst reactTemplate: Template = {\n  name: 'react',\n  dependencies: [\n    ...basicTemplate.dependencies,\n    '@types/react',\n    '@types/react-dom',\n    'react',\n    'react-dom',\n  ],\n  packageJson: {\n    ...basicTemplate.packageJson,\n    peerDependencies: {\n      react: '>=16',\n    },\n    scripts: {\n      ...basicTemplate.packageJson.scripts,\n      test: 'export-ts test',\n    } as PackageJson['scripts'],\n  },\n};\n\nexport default reactTemplate;\n","import reactTemplate from './react';\nimport basicTemplate from './basic';\nimport storybookTemplate from './react-with-storybook';\n\nexport const templates = {\n  basic: basicTemplate,\n  react: reactTemplate,\n  'react-with-storybook': storybookTemplate,\n};\n","import { Template } from './template';\nimport reactTemplate from './react';\nimport { PackageJson } from 'type-fest';\n\nconst storybookTemplate: Template = {\n  dependencies: [\n    ...reactTemplate.dependencies,\n    '@babel/core',\n    '@storybook/addon-essentials',\n    '@storybook/addon-links',\n    '@storybook/addon-info',\n    '@storybook/addons',\n    '@storybook/react',\n    'react-is',\n    'babel-loader',\n  ],\n  name: 'react-with-storybook',\n  packageJson: {\n    ...reactTemplate.packageJson,\n    scripts: {\n      ...reactTemplate.packageJson.scripts,\n      storybook: 'start-storybook -p 6006',\n      'build-storybook': 'build-storybook',\n    } as PackageJson['scripts'],\n  },\n};\n\nexport default storybookTemplate;\n","#!/usr/bin/env node\n\nimport sade from 'sade';\nimport glob from 'glob-promise';\nimport { rollup, watch, RollupWatchOptions, WatcherOptions } from 'rollup';\nimport chalk from 'chalk';\nimport jest from 'jest';\nimport { CLIEngine } from 'eslint';\nimport logError from './logError';\nimport path from 'path';\nimport execa from 'execa';\nimport shell from 'shelljs';\nimport ora from 'ora';\nimport semver from 'semver';\nimport { paths } from './constants';\nimport * as Messages from './messages';\nimport { createBuildConfigs } from './createBuildConfigs';\nimport { createJestConfig, JestConfigOptions } from './createJestConfig';\nimport { createEslintConfig } from './createEslintConfig';\nimport {\n  resolveApp,\n  safePackageName,\n  clearConsole,\n  getNodeEngineRequirement,\n} from './utils';\n// import { concatAllArray } from 'jpjs';\nimport getInstallCmd from './getInstallCmd';\nimport getInstallArgs from './getInstallArgs';\n\nimport Input from 'enquirer/lib/prompts/input.js';\nimport Select from 'enquirer/lib/prompts/select.js';\n\nimport {\n  PackageJson,\n  WatchOpts,\n  BuildOpts,\n  ModuleFormat,\n  NormalizedOpts,\n} from './types';\nimport { createProgressEstimator } from './createProgressEstimator';\nimport { templates } from './templates';\nimport { composePackageJson } from './templates/utils';\nimport * as deprecated from './deprecated';\nimport fs from 'fs-extra';\nimport { readFileSync } from 'fs';\nimport { stat } from 'fs/promises';\n// import { runTsc } from './plugins/simple-ts';\n\nexport * from './errors';\n\nconst prog = sade('export-ts');\n\nlet appPackageJson: PackageJson;\ntry {\n  appPackageJson = JSON.parse(readFileSync(paths.appPackageJson, 'utf-8'));\n} catch (e) {}\n\nexport const isDir = (name: string) =>\n  stat(name)\n    .then((stats) => stats.isDirectory())\n    .catch(() => false);\n\nexport const isFile = (name: string) =>\n  stat(name)\n    .then((stats) => stats.isFile())\n    .catch(() => false);\n\nasync function jsOrTs(filename: string) {\n  const extension = (await isFile(resolveApp(filename + '.ts')))\n    ? '.ts'\n    : (await isFile(resolveApp(filename + '.tsx')))\n    ? '.tsx'\n    : (await isFile(resolveApp(filename + '.jsx')))\n    ? '.jsx'\n    : '.js';\n\n  return resolveApp(`${filename}${extension}`);\n}\n\nasync function getInputs(\n  entries?: string | string[],\n  source?: string\n): Promise<string[]> {\n  let entryList = [];\n  if (entries) {\n    if (!Array.isArray(entries)) {\n      entryList.push(entries);\n    } else {\n      entryList.push(...entries);\n    }\n  } else {\n    if (source) {\n      const appDir = resolveApp(source);\n      entryList.push(appDir);\n    } else {\n      const srcExists = await isDir(resolveApp('src'));\n      if (srcExists) {\n        const entryPoint = await jsOrTs('src/index');\n        entryList.push(entryPoint);\n      }\n    }\n  }\n\n  const inputPromises = entryList.map(async (file) => await glob(file));\n  const inputs = await Promise.all(inputPromises);\n  return inputs.flat();\n}\n\nprog\n  .command('create <pkg>')\n  .describe('Create a new package with ')\n  .example('create mypackage')\n  .option(\n    '--template',\n    `Specify a template. Allowed choices: [${Object.keys(templates).join(\n      ', '\n    )}]`\n  )\n  .example('create --template react mypackage')\n  .action(async (pkg: string, opts: any) => {\n    console.log(\n      chalk.blue(`\n::::::::::: ::::::::  :::::::::  :::    :::\n    :+:    :+:    :+: :+:    :+: :+:    :+:\n    +:+    +:+        +:+    +:+  +:+  +:+\n    +#+    +#++:++#++ +#+    +:+   +#++:+\n    +#+           +#+ +#+    +#+  +#+  +#+\n    #+#    #+#    #+# #+#    #+# #+#    #+#\n    ###     ########  #########  ###    ###\n`)\n    );\n    const bootSpinner = ora(`Creating ${chalk.bold.green(pkg)}...`);\n    let template;\n    // Helper fn to prompt the user for a different\n    // folder name if one already exists\n    async function getProjectPath(projectPath: string): Promise<string> {\n      const exists = await fs.pathExists(projectPath);\n      if (!exists) {\n        return projectPath;\n      }\n\n      bootSpinner.fail(`Failed to create ${chalk.bold.red(pkg)}`);\n      const prompt = new Input({\n        message: `A folder named ${chalk.bold.red(\n          pkg\n        )} already exists! ${chalk.bold('Choose a different name')}`,\n        initial: pkg + '-1',\n        result: (v: string) => v.trim(),\n      });\n\n      pkg = await prompt.run();\n\n      const realPath = await fs.realpath(process.cwd());\n      projectPath = realPath + '/' + pkg;\n\n      bootSpinner.start(`Creating ${chalk.bold.green(pkg)}...`);\n      return await getProjectPath(projectPath); // recursion!\n    }\n\n    try {\n      // get the project path\n      const realPath = await fs.realpath(process.cwd());\n      let projectPath = await getProjectPath(realPath + '/' + pkg);\n\n      const prompt = new Select({\n        message: 'Choose a template',\n        choices: Object.keys(templates),\n      });\n\n      if (opts.template) {\n        template = opts.template.trim();\n        if (!prompt.choices.includes(template)) {\n          bootSpinner.fail(`Invalid template ${chalk.bold.red(template)}`);\n          template = await prompt.run();\n        }\n      } else {\n        template = await prompt.run();\n      }\n\n      bootSpinner.start();\n      // copy the template\n      await fs.copy(\n        path.resolve(__dirname, `../templates/${template}`),\n        projectPath,\n        {\n          overwrite: true,\n        }\n      );\n      // fix gitignore\n      await fs.move(\n        path.resolve(projectPath, './gitignore'),\n        path.resolve(projectPath, './.gitignore')\n      );\n\n      // update license year and author\n      let license: string = await fs.readFile(\n        path.resolve(projectPath, 'LICENSE'),\n        { encoding: 'utf-8' }\n      );\n\n      license = license.replace(/<year>/, `${new Date().getFullYear()}`);\n\n      // attempt to automatically derive author name\n      let author = getAuthorName();\n\n      if (!author) {\n        bootSpinner.stop();\n        const licenseInput = new Input({\n          name: 'author',\n          message: 'Who is the package author?',\n        });\n        author = await licenseInput.run();\n        setAuthorName(author);\n        bootSpinner.start();\n      }\n\n      license = license.replace(/<author>/, author.trim());\n\n      await fs.writeFile(path.resolve(projectPath, 'LICENSE'), license, {\n        encoding: 'utf-8',\n      });\n\n      const templateConfig = templates[template as keyof typeof templates];\n      const generatePackageJson = composePackageJson(templateConfig);\n\n      // Install deps\n      process.chdir(projectPath);\n      const safeName = safePackageName(pkg);\n      const pkgJson = generatePackageJson({ name: safeName, author });\n\n      const nodeVersionReq = getNodeEngineRequirement(pkgJson);\n      if (\n        nodeVersionReq &&\n        !semver.satisfies(process.version, nodeVersionReq)\n      ) {\n        bootSpinner.fail(Messages.incorrectNodeVersion(nodeVersionReq));\n        process.exit(1);\n      }\n\n      await fs.outputJSON(path.resolve(projectPath, 'package.json'), pkgJson);\n      bootSpinner.succeed(`Created ${chalk.bold.green(pkg)}`);\n      await Messages.start(pkg);\n    } catch (error) {\n      bootSpinner.fail(`Failed to create ${chalk.bold.red(pkg)}`);\n      logError(error);\n      process.exit(1);\n    }\n\n    const templateConfig = templates[template as keyof typeof templates];\n    const { dependencies: deps } = templateConfig;\n\n    const installSpinner = ora(Messages.installing(deps.sort())).start();\n    try {\n      const cmd = await getInstallCmd();\n      await execa(cmd, getInstallArgs(cmd, deps));\n      installSpinner.succeed('Installed dependencies');\n      console.log(await Messages.start(pkg));\n    } catch (error) {\n      installSpinner.fail('Failed to install dependencies');\n      logError(error);\n      process.exit(1);\n    }\n  });\n\nprog\n  .command('watch')\n  .describe('Rebuilds on any change')\n  .option('--entry, -i', 'Entry module')\n  .example('watch --entry src/foo.tsx')\n  .option('--target', 'Specify your target environment', 'browser')\n  .example('watch --target node')\n  .option('--name', 'Specify name exposed in UMD builds')\n  .example('watch --name Foo')\n  .option('--format', 'Specify module format(s)', 'cjs,esm')\n  .example('watch --format cjs,esm')\n  .option(\n    '--verbose',\n    'Keep outdated console output in watch mode instead of clearing the screen'\n  )\n  .example('watch --verbose')\n  .option('--noClean', \"Don't clean the dist folder\")\n  .example('watch --noClean')\n  .option('--tsconfig', 'Specify custom tsconfig path')\n  .example('watch --tsconfig ./tsconfig.foo.json')\n  .option('--onFirstSuccess', 'Run a command on the first successful build')\n  .example('watch --onFirstSuccess \"echo The first successful build!\"')\n  .option('--onSuccess', 'Run a command on a successful build')\n  .example('watch --onSuccess \"echo Successful build!\"')\n  .option('--onFailure', 'Run a command on a failed build')\n  .example('watch --onFailure \"The build failed!\"')\n  .option('--transpileOnly', 'Skip type checking')\n  .example('watch --transpileOnly')\n  .option('--extractErrors', 'Extract invariant errors to ./errors/codes.json.')\n  .example('watch --extractErrors')\n  .action(async (dirtyOpts: WatchOpts) => {\n    const opts = await normalizeOpts(dirtyOpts);\n    const buildConfigs = await createBuildConfigs(opts);\n    if (!opts.noClean) {\n      await cleanDistFolder();\n    }\n\n    if (opts.format.includes('cjs')) {\n      await writeCjsEntryFile(opts.name);\n    }\n    if (opts.format.includes('esm')) {\n      await writeMjsEntryFile(opts.name);\n    }\n\n    await cleanOldJS();\n\n    type Killer = execa.ExecaChildProcess | null;\n\n    let firstTime = true;\n    let successKiller: Killer = null;\n    let failureKiller: Killer = null;\n\n    function run(command?: string) {\n      if (!command) {\n        return null;\n      }\n\n      const [exec, ...args] = command.split(' ');\n      return execa(exec, args, {\n        stdio: 'inherit',\n      });\n    }\n\n    function killHooks() {\n      return Promise.all([\n        successKiller ? successKiller.kill('SIGTERM') : null,\n        failureKiller ? failureKiller.kill('SIGTERM') : null,\n      ]);\n    }\n\n    const spinner = ora().start();\n    watch(\n      (buildConfigs as RollupWatchOptions[]).map((inputOptions) => ({\n        watch: {\n          silent: true,\n          include: ['src/**'],\n          exclude: ['node_modules/**'],\n        } as WatcherOptions,\n        ...inputOptions,\n      }))\n    ).on('event', async (event) => {\n      // clear previous onSuccess/onFailure hook processes so they don't pile up\n      await killHooks();\n\n      if (event.code === 'START') {\n        if (!opts.verbose) {\n          clearConsole();\n        }\n        spinner.start(chalk.bold.cyan('Compiling modules...'));\n      }\n      if (event.code === 'ERROR') {\n        spinner.fail(chalk.bold.red('Failed to compile'));\n        logError(event.error);\n        failureKiller = run(opts.onFailure);\n      }\n      if (event.code === 'END') {\n        spinner.succeed(chalk.bold.green('Compiled successfully'));\n        console.log(`\n  ${chalk.dim('Watching for changes')}\n`);\n\n        try {\n          await deprecated.moveTypes();\n\n          if (firstTime && opts.onFirstSuccess) {\n            firstTime = false;\n            run(opts.onFirstSuccess);\n          } else {\n            successKiller = run(opts.onSuccess);\n          }\n        } catch (_error) {}\n      }\n    });\n  });\n\nprog\n  .command('build')\n  .describe('Build your project once and exit')\n  .option('--entry, -i', 'Entry module')\n  .example('build --entry src/foo.tsx')\n  .option('--target', 'Specify your target environment', 'browser')\n  .example('build --target node')\n  .option('--name', 'Specify name exposed in UMD builds')\n  .example('build --name Foo')\n  .option('--format', 'Specify module format(s)', 'cjs,esm')\n  .example('build --format cjs,esm')\n  .option('--legacy', 'Babel transpile and emit ES5.')\n  .example('build --legacy')\n  .option('--tsconfig', 'Specify custom tsconfig path')\n  .example('build --tsconfig ./tsconfig.foo.json')\n  .option('--transpileOnly', 'Skip type checking')\n  .example('build --transpileOnly')\n  .option(\n    '--extractErrors',\n    'Extract errors to ./errors/codes.json and provide a url for decoding.'\n  )\n  .example(\n    'build --extractErrors=https://reactjs.org/docs/error-decoder.html?invariant='\n  )\n  .action(async (dirtyOpts: BuildOpts) => {\n    const opts = await normalizeOpts(dirtyOpts);\n    const buildConfigs = await createBuildConfigs(opts);\n    const progressIndicator = await createProgressEstimator();\n\n    await progressIndicator(cleanDistFolder(), 'Cleaning dist/.');\n    // await runTsc();\n\n    if (opts.format.includes('cjs')) {\n      await progressIndicator(\n        writeCjsEntryFile(opts.name).catch(logError),\n        'Creating CJS entry file'\n      );\n    }\n\n    if (opts.format.includes('esm')) {\n      await progressIndicator(\n        writeMjsEntryFile(opts.name).catch(logError),\n        'Creating MJS entry file'\n      );\n    }\n\n    try {\n      await progressIndicator(\n        Promise.all(\n          buildConfigs.map(async (buildConfig) => {\n            const bundle = await rollup(buildConfig);\n            await bundle.write(buildConfig.output);\n          })\n        ),\n        'JS ➡ JS: Compressing and transforming emitted TypeScript output.'\n      );\n      /**\n       * Remove old index.js.\n       */\n      await cleanOldJS();\n    } catch (error) {\n      logError(error);\n      process.exit(1);\n    }\n  });\n\nasync function normalizeOpts(opts: WatchOpts): Promise<NormalizedOpts> {\n  return {\n    ...opts,\n    name: opts.name || appPackageJson.name,\n    input: await getInputs(opts.entry, appPackageJson.source),\n    format: opts.format.split(',').map((format: string) => {\n      if (format === 'es') {\n        return 'esm';\n      }\n      return format;\n    }) as [ModuleFormat, ...ModuleFormat[]],\n  };\n}\n\nasync function cleanOldJS() {\n  const progressIndicator = await createProgressEstimator();\n  const oldJS = await glob(`${paths.appDist}/**/*.js`);\n  // console.log({ oldJS });\n  await progressIndicator(\n    Promise.all(oldJS.map(async (file: string) => await fs.unlink(file))),\n    'Removing original emitted TypeScript output (dist/**/*.js).'\n  );\n}\n\nasync function cleanDistFolder() {\n  await fs.remove(paths.appDist);\n}\n\nfunction writeCjsEntryFile(name: string) {\n  const safeName = safePackageName(name);\n  /**\n   * After an hour of tinkering, this is the *only* way to write this code that\n   * will not break Rollup (by pulling process.env.NODE_ENV out with\n   * destructuring).\n   */\n  const contents = `#!/usr/bin/env node\n\n'use strict';\nmodule.exports = require('./${safeName}.production.min.cjs');\n`;\n\n  return fs.outputFile(path.join(paths.appDist, 'index.cjs'), contents);\n}\n\nfunction writeMjsEntryFile(name: string) {\n  const contents = `#!/usr/bin/env node\n\nexport { default } from './${name}.min.mjs';\nexport * from './${name}.min.mjs';\n`;\n\n  return fs.outputFile(path.join(paths.appDist, 'index.mjs'), contents);\n}\n\nfunction getAuthorName() {\n  let author = '';\n\n  author = shell\n    .exec('npm config get init-author-name', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  author = shell\n    .exec('git config --global user.name', { silent: true })\n    .stdout.trim();\n  if (author) {\n    setAuthorName(author);\n    return author;\n  }\n\n  author = shell\n    .exec('npm config get init-author-email', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  author = shell\n    .exec('git config --global user.email', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  return author;\n}\n\nfunction setAuthorName(author: string) {\n  shell.exec(`npm config set init-author-name \"${author}\"`, { silent: true });\n}\n\nprog\n  .command('test')\n  .describe('Run jest test runner. Passes through all flags directly to Jest')\n  .action(async (opts: { config?: string }) => {\n    // Do this as the first thing so that any code reading it knows the right env.\n    process.env.BABEL_ENV = 'test';\n    process.env.NODE_ENV = 'test';\n    // Makes the script crash on unhandled rejections instead of silently\n    // ignoring them. In the future, promise rejections that are not handled will\n    // terminate the Node.js process with a non-zero exit code.\n    process.on('unhandledRejection', (err) => {\n      throw err;\n    });\n\n    const argv = process.argv.slice(2);\n    let jestConfig: JestConfigOptions = {\n      ...createJestConfig(\n        (relativePath) => path.resolve(__dirname, '..', relativePath),\n        opts.config ? path.dirname(opts.config) : paths.appRoot\n      ),\n      ...appPackageJson.jest,\n    };\n\n    // Allow overriding with jest.config\n    const defaultPathExists = await fs.pathExists(paths.jestConfig);\n    if (opts.config || defaultPathExists) {\n      const jestConfigPath = resolveApp(opts.config || paths.jestConfig);\n      const jestConfigContents: JestConfigOptions = require(jestConfigPath);\n      jestConfig = { ...jestConfig, ...jestConfigContents };\n    }\n\n    // if custom path, delete the arg as it's already been merged\n    if (opts.config) {\n      let configIndex = argv.indexOf('--config');\n      if (configIndex !== -1) {\n        // case of \"--config path\", delete both args\n        argv.splice(configIndex, 2);\n      } else {\n        // case of \"--config=path\", only one arg to delete\n        const configRegex = /--config=.+/;\n        configIndex = argv.findIndex((arg) => arg.match(configRegex));\n        if (configIndex !== -1) {\n          argv.splice(configIndex, 1);\n        }\n      }\n    }\n\n    argv.push(\n      '--config',\n      JSON.stringify({\n        ...jestConfig,\n      })\n    );\n\n    const [, ...argsToPassToJestCli] = argv;\n    jest.run(argsToPassToJestCli);\n  });\n\nprog\n  .command('lint')\n  .describe('Run eslint with Prettier')\n  .example('lint src test')\n  .option('--fix', 'Fixes fixable errors and warnings')\n  .example('lint src test --fix')\n  .option('--ignore-pattern', 'Ignore a pattern')\n  .example('lint src test --ignore-pattern test/foobar.ts')\n  .option(\n    '--max-warnings',\n    'Exits with non-zero error code if number of warnings exceed this number',\n    Infinity\n  )\n  .example('lint src test --max-warnings 10')\n  .option('--write-file', 'Write the config file locally')\n  .example('lint --write-file')\n  .option('--report-file', 'Write JSON report to file locally')\n  .example('lint --report-file eslint-report.json')\n  .action(\n    async (opts: {\n      fix: boolean;\n      'ignore-pattern': string;\n      'write-file': boolean;\n      'report-file': string;\n      'max-warnings': number;\n      _: string[];\n    }) => {\n      if (opts['_'].length === 0 && !opts['write-file']) {\n        const defaultInputs = ['src', 'test'].filter(fs.existsSync);\n        opts['_'] = defaultInputs;\n        console.log(\n          chalk.yellow(\n            `Defaulting to \"export-ts lint ${defaultInputs.join(' ')}\"`,\n            '\\nYou can override this in the package.json scripts, like \"lint\": \"export-ts lint src otherDir\"'\n          )\n        );\n      }\n\n      const config = await createEslintConfig({\n        pkg: appPackageJson,\n        rootDir: paths.appRoot,\n        writeFile: opts['write-file'],\n      });\n\n      const cli = new CLIEngine({\n        baseConfig: {\n          ...config,\n          ...appPackageJson.eslint,\n        },\n        extensions: ['.ts', '.tsx', '.js', '.jsx'],\n        fix: opts.fix,\n        ignorePattern: opts['ignore-pattern'],\n      });\n      const report = cli.executeOnFiles(opts['_']);\n      if (opts.fix) {\n        CLIEngine.outputFixes(report);\n      }\n      console.log(cli.getFormatter()(report.results));\n      if (opts['report-file']) {\n        await fs.outputFile(\n          opts['report-file'],\n          cli.getFormatter('json')(report.results)\n        );\n      }\n      if (report.errorCount) {\n        process.exit(1);\n      }\n      if (report.warningCount > opts['max-warnings']) {\n        process.exit(1);\n      }\n    }\n  );\n\nprog.parse(process.argv);\n","import { Template } from '../template';\n\ninterface ProjectArgs {\n  name: string;\n  author: string;\n}\nexport const composePackageJson =\n  (template: Template) =>\n  ({ name, author }: ProjectArgs) => {\n    return {\n      ...template.packageJson,\n      name,\n      author,\n      'size-limit': [\n        {\n          path: `dist/${name}.production.min.cjs`,\n          limit: '10 KB',\n        },\n        {\n          path: `dist/${name}.min.mjs`,\n          limit: '10 KB',\n        },\n      ],\n    };\n  };\n","export const indentString = (msg: string, indent = 1) => {\n  return `${' '.repeat(indent * 2)}${msg}`;\n};\n\nexport const indentLog = (msg: string, indent = 1) => {\n  console.log(indentString(msg, indent));\n};\n","import { InstallCommand } from './getInstallCmd';\n\nexport default function getInstallArgs(\n  cmd: InstallCommand,\n  packages: string[]\n) {\n  switch (cmd) {\n    case 'npm':\n      return ['install', ...packages, '--save-dev'];\n    case 'yarn':\n      return ['add', ...packages, '--dev'];\n  }\n}\n","import * as fs from 'fs-extra';\n\nimport { paths } from './constants';\n\n/*\n  This was originally needed because the default\n  tsconfig.compilerOptions.rootDir was set to './' instead of './src'.\n  Now that it's set to './src', this is now deprecated.\n  To ensure a stable upgrade path for users, leave the warning in for\n  6 months - 1 year, then change it to an error in a breaking bump and leave\n  that in for some time too.\n*/\nexport async function moveTypes() {\n  const appDistSrc = paths.appDist + '/src';\n\n  const pathExists = await fs.pathExists(appDistSrc);\n  if (!pathExists) return;\n\n  // see note above about deprecation window\n  console.warn(\n    '[export-ts]: Your rootDir is currently set to \"./\". Please change your ' +\n      'rootDir to \"./src\".\\n' +\n      'export-ts has deprecated setting tsconfig.compilerOptions.rootDir to ' +\n      '\"./\" as it caused buggy output for declarationMaps and more.\\n' +\n      'You may also need to change your include to remove \"test\", which also ' +\n      'caused declarations to be unnecessarily created for test files.'\n  );\n\n  // Move the type declarations to the base of the ./dist folder\n  await fs.copy(appDistSrc, paths.appDist, {\n    overwrite: true,\n  });\n  await fs.remove(appDistSrc);\n}\n","import { Config } from '@jest/types';\n\nexport type JestConfigOptions = Partial<Config.InitialOptions>;\n\nexport function createJestConfig(\n  _: (relativePath: string) => void,\n  rootDir: string\n): JestConfigOptions {\n  const config: JestConfigOptions = {\n    transform: {\n      '.(ts|tsx)$': require.resolve('ts-jest/dist'),\n      '.(js|jsx)$': require.resolve('babel-jest'), // jest's default\n    },\n    transformIgnorePatterns: ['[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx)$'],\n    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n    collectCoverageFrom: ['src/**/*.{ts,tsx,js,jsx}'],\n    testMatch: ['<rootDir>/**/*.(spec|test).{ts,tsx,js,jsx}'],\n    testURL: 'http://localhost',\n    rootDir,\n    watchPlugins: [\n      require.resolve('jest-watch-typeahead/filename'),\n      require.resolve('jest-watch-typeahead/testname'),\n    ],\n  };\n\n  return config;\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { CLIEngine } from 'eslint';\nimport { PackageJson } from './types';\nimport { getReactVersion } from './utils';\n\ninterface CreateEslintConfigArgs {\n  pkg: PackageJson;\n  rootDir: string;\n  writeFile: boolean;\n}\nexport async function createEslintConfig({\n  pkg,\n  rootDir,\n  writeFile,\n}: CreateEslintConfigArgs): Promise<CLIEngine.Options['baseConfig'] | void> {\n  const isReactLibrary = Boolean(getReactVersion(pkg));\n\n  const config = {\n    extends: [\n      'react-app',\n      'prettier/@typescript-eslint',\n      'plugin:prettier/recommended',\n    ],\n    settings: {\n      react: {\n        // Fix for https://github.com/jaredpalmer/tsdx/issues/279\n        version: isReactLibrary ? 'detect' : '999.999.999',\n      },\n    },\n  };\n\n  if (!writeFile) {\n    return config;\n  }\n\n  const file = path.join(rootDir, '.eslintrc.js');\n  try {\n    await fs.writeFile(\n      file,\n      `module.exports = ${JSON.stringify(config, null, 2)}`,\n      { flag: 'wx' }\n    );\n  } catch (e: any) {\n    if (e.code === 'EEXIST') {\n      console.error(\n        'Error trying to save the Eslint configuration file:',\n        `${file} already exists.`\n      );\n    } else {\n      console.error(e);\n    }\n\n    return config;\n  }\n}\n"],"names":["stderr","console","error","bind","logError","err","description","name","message","plugin","chalk","bold","red","loc","file","line","column","frame","dim","stack","headlessStack","replace","safeVariableName","camelCase","removeScope","toLowerCase","safePackageName","appDirectory","fs","realpathSync","process","cwd","resolveApp","relativePath","path","resolve","paths","appPackageJson","tsconfigJson","testsSetup","appRoot","appSrc","appErrorsJson","appErrors","appDist","appConfig","jestConfig","progressEstimatorCache","cmd","async","getInstallCmd","execa","e","cyan","start","projectName","commands","install","build","test","green","Output.cmd","invertObject","targetObj","result","mapKeys","Object","keys","originalKey","evalToString","ast","type","value","operator","Error","left","right","babelParserOptions","sourceType","plugins","extractErrors","opts","errorMapFilePath","existingErrorMap","fileContents","readFile","JSON","parse","allErrorIDs","currentID","transform","source","traverse","CallExpression","exit","astPath","errorMsgLiteral","get","isIdentifier","node","arguments","hasOwnProperty","length","Math","max","apply","prettyName","pascalCase","ensureDir","writeFile","stringify","flush","replacements","original","replacement","mergeConfigItems","configItemsToMerge","mergedItems","forEach","configItemToMerge","item","itemToMergeWithIndex","findIndex","mergedItem","resolved","createConfigItem","merge","options","push","createConfigItems","items","map","require","babelPluginExportTs","createBabelInputPluginFactory","custom","customOptions","pluginOptions","config","defaultPlugins","format","method","loose","obj","constructor","filter","Boolean","babelOptions","presets","presetEnvIdx","preset","request","includes","presetEnv","targets","modules","defaultPresets","getPackageJson","absPath","parts","split","rootPath","moduleParts","sep","moduleName","startsWith","slice","join","EXTERNAL_PACKAGES","errorCodeOpts","exportTsConfig","rollup","_options","createBuildConfigs","allInputs","concatAllArray","input","env","createAllFormats","index","writeMeta","Promise","all","outputNum","findAndRecordErrorCodes","isEsm","shouldMinify","undefined","minify","formatString","fileExtension","outputName","tsconfigJSON","ts","readConfigFile","tsconfig","sys","tsCompilerOptions","parseJsonConfigFileContent","PRODUCTION","NODE_ENV","fileExtensions","external","id","isAbsolute","shimMissingExports","treeshake","propertyReadSideEffects","output","freeze","esModule","esModuleInterop","sourcemap","globals","react","exports","code","resolvePlugin","modulesOnly","browser","target","extensions","commonjs","esmExternals","requireReturnsDefault","transformMixedEsModules","include","json","typescript","tsconfigDefaults","exclude","compilerOptions","sourceMap","declaration","jsx","tsconfigOverride","module","declarationMap","check","transpileOnly","useTsconfigDeclarationDir","declarationDir","legacy","DEFAULT_BABEL_EXTENSIONS","passPerPreset","esmodules","babelHelpers","sourceMaps","terser","keep_quoted_props","comments","compress","keep_infinity","pure_getters","passes","ecma","toplevel","optimizeLodashImports","useLodashEs","renderChunk","_","chunk","chunkImport","imports","extname","absEntryPoint","originalFileExt","absEntryWithoutExtension","withExtension","existsSync","packageJsonPath","packageJsonContent","readFileSync","packageJson","resolveExports","relativeEntryPoint","indexOf","importPattern","RegExp","matches","match","rewritten","createRollupConfig","createProgressEstimator","progressEstimator","storagePath","basicTemplate","dependencies","version","license","main","import","typings","files","engines","scripts","posttest","lint","prepare","size","analyze","peerDependencies","husky","hooks","prettier","printWidth","semi","singleQuote","trailingComma","reactTemplate","templates","basic","storybook","prog","sade","isDir","stat","then","stats","isDirectory","catch","isFile","getInputs","entries","entryList","Array","isArray","appDir","entryPoint","filename","extension","jsOrTs","inputPromises","glob","flat","normalizeOpts","entry","cleanOldJS","progressIndicator","oldJS","unlink","cleanDistFolder","remove","writeCjsEntryFile","contents","outputFile","writeMjsEntryFile","setAuthorName","author","shell","exec","silent","command","describe","example","option","action","pkg","log","blue","bootSpinner","ora","template","realPath","realpath","projectPath","getProjectPath","pathExists","fail","prompt","Input","initial","v","trim","run","Select","choices","copy","__dirname","overwrite","move","encoding","Date","getFullYear","stdout","getAuthorName","stop","licenseInput","generatePackageJson","limit","composePackageJson","chdir","pkgJson","nodeVersionReq","getNodeEngineRequirement","semver","satisfies","requiredVersion","outputJSON","succeed","Messages.start","templateConfig","deps","installSpinner","packages","sort","msg","indent","repeat","indentString","getInstallArgs","dirtyOpts","buildConfigs","noClean","firstTime","successKiller","failureKiller","args","stdio","spinner","watch","inputOptions","on","event","kill","verbose","write","platform","onFailure","appDistSrc","warn","deprecated.moveTypes","onFirstSuccess","onSuccess","_error","buildConfig","bundle","BABEL_ENV","argv","rootDir","dirname","transformIgnorePatterns","moduleFileExtensions","collectCoverageFrom","testMatch","testURL","watchPlugins","jest","defaultPathExists","jestConfigPath","jestConfigContents","configIndex","splice","configRegex","arg","argsToPassToJestCli","Infinity","defaultInputs","yellow","extends","settings","devDependencies","getReactVersion","flag","createEslintConfig","cli","CLIEngine","baseConfig","eslint","fix","ignorePattern","report","executeOnFiles","outputFixes","getFormatter","results","errorCount","warningCount"],"mappings":"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"}