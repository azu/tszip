"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("sade/lib/index.js"),t=require("tiny-glob/sync.js"),r=require("rollup"),n=require("asyncro/dist/asyncro.js"),s=require("chalk/source/index.js"),o=require("jest"),a=require("eslint/lib/api.js"),i=require("path"),l=require("execa/index.js"),c=require("shelljs/shell.js"),u=require("ora/index.js"),p=require("semver/index.js"),d=require("fs-extra/lib/index.js"),f=require("camelcase/index.js");require("ansi-escapes/index.js");var m=require("jpjs/dist/jpjs.js"),g=require("resolve.exports"),y=require("rollup-plugin-terser"),h=require("@babel/core/lib/index.js"),x=require("@rollup/plugin-commonjs/dist/index.js"),w=require("@rollup/plugin-json/dist/index.js"),b=require("@rollup/plugin-node-resolve"),j=require("rollup-plugin-sourcemaps"),v=require("rollup-plugin-typescript2/dist/rollup-plugin-typescript2.cjs.js"),E=require("typescript/lib/typescript.js"),k=require("@babel/parser/lib/index.js"),$=require("@babel/traverse/lib/index.js"),q=require("pascal-case/dist/index.js"),S=require("@rollup/plugin-babel/dist/index.js"),F=require("lodash.merge"),D=require("@optimize-lodash/rollup-plugin/dist/index.js"),C=require("fs"),O=require("enquirer/lib/prompts/input.js"),J=require("enquirer/lib/prompts/select.js"),_=require("progress-estimator/src/index.js"),I=require("fs/promises");function N(e){return e&&"object"==typeof e&&"default"in e?e:{"default":e}}function M(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,t}require("@babel/helper-module-imports/lib/index.js");var P=N(e),R=N(t),T=N(n),z=N(s),B=N(o),L=N(i),A=N(l),U=N(c),W=N(u),V=N(p),Y=N(d),X=M(d),Z=N(f),K=N(g),G=N(x),H=N(w),Q=N(b),ee=N(j),te=N(v),re=N(E),ne=N($),se=N(F),oe=N(O),ae=N(J),ie=N(_);const le=console.error.bind(console);function ce(e){const t=e.error||e,r=`${t.name?t.name+": ":""}${t.message||t}`,n=t.plugin?"rpt2"===t.plugin?`(typescript) ${r}`:`(${t.plugin} plugin) ${r}`:r;if(le(z.default.bold.red(n)),t.loc&&(le(),le(`at ${t.loc.file}:${t.loc.line}:${t.loc.column}`)),t.frame)le(),le(z.default.dim(t.frame));else if(e.stack){const e=t.stack.replace(n,"");le(z.default.dim(e))}le()}const ue=e=>Z.default((e=>e.replace(/^@.*\//,""))(e).toLowerCase().replace(/((^[^a-zA-Z]+)|[^\w.-])|([^a-zA-Z0-9]+$)/g,"")),pe=e=>e.toLowerCase().replace(/(^@.*\/)|((^[^a-zA-Z]+)|[^\w.-])|([^a-zA-Z0-9]+$)/g,""),de=Y.default.realpathSync(process.cwd()),fe=function(e){return L.default.resolve(de,e)},me={appPackageJson:fe("package.json"),tsconfigJson:fe("tsconfig.json"),testsSetup:fe("test/setupTests.ts"),appRoot:fe("."),appSrc:fe("src"),appErrorsJson:fe("errors/codes.json"),appErrors:fe("errors"),appDist:fe("dist"),appConfig:fe("tsdx.config.js"),jestConfig:fe("jest.config.js"),progressEstimatorCache:fe("node_modules/.cache/.progress-estimator")};let ge;async function ye(){if(ge)return ge;try{await A.default("yarnpkg",["--version"]),ge="yarn"}catch(e){ge="npm"}return ge}const he=e=>z.default.bold(z.default.cyan(e)),xe=async function(e){const t=await ye(),r={install:"npm"===t?"npm install":"yarn install",build:"npm"===t?"npm run build":"yarn build",start:"npm"===t?"npm run start":"yarn start",test:"npm"===t?"npm test":"yarn test"};return`\n  ${z.default.green("Awesome!")} You're now ready to start coding.\n  \n  I already ran ${he(r.install)} for you, so your next steps are:\n    ${he(`cd ${e}`)}\n  \n  To start developing (rebuilds on changes):\n    ${he(r.start)}\n  \n  To build for production:\n    ${he(r.build)}\n\n  To test your library with Jest:\n    ${he(r.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${z.default.green("https://github.com/formium/tsdx/issues")}\n`};function we(e){const t={},r=Object.keys(e);for(const n of r)t[e[n]]=n;return t}function be(e){switch(e.type){case"StringLiteral":case"Literal":return e.value;case"BinaryExpression":if("+"!==e.operator)throw new Error("Unsupported binary operator "+e.operator);return be(e.left)+be(e.right);default:throw new Error("Unsupported type "+e.type)}}const je={sourceType:"module",plugins:["classProperties","flow","jsx","trailingFunctionCommas","objectRestSpread"]};async function ve(e){if(!e||!e.errorMapFilePath)throw new Error("Missing options. Ensure you pass an object with `errorMapFilePath`.");if(!e.name||!e.name)throw new Error("Missing options. Ensure you pass --name flag to tsdx");const t=e.errorMapFilePath;let r;try{const e=await Y.default.readFile(t,"utf-8");r=JSON.parse(e)}catch(e){r={}}const n=Object.keys(r);let s;function o(e){const t=k.parse(e,je);ne.default(t,{CallExpression:{exit(e){var t;e.get("callee").isIdentifier({name:"invariant"})&&(t=be(e.node.arguments[1]),r.hasOwnProperty(t)||(r[t]=""+s++))}}})}return s=0===n.length?0:Math.max.apply(null,n)+1,r=we(r),async function(n){o(n),await async function(){const n=q.pascalCase(ue(e.name));await Y.default.ensureDir(me.appErrors),await Y.default.writeFile(t,JSON.stringify(we(r),null,2)+"\n","utf-8"),await Y.default.writeFile(me.appErrors+"/ErrorDev.js","\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      ","utf-8"),await Y.default.writeFile(me.appErrors+"/ErrorProd.js",`\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \`Minified ${n} error #\${code}; visit \${url} for the full message or \` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,"utf-8")}()}}const Ee=[{original:"lodash(?!/fp)",replacement:"lodash-es"}],ke=(e,...t)=>{const r=[];return t.forEach((t=>{t.forEach((t=>{const n=r.findIndex((e=>e.file.resolved===t.file.resolved));-1!==n?r[n]=h.createConfigItem([r[n].file.resolved,se.default(r[n].options,t.options)],{type:e}):r.push(t)}))})),r},$e=(e,t)=>t.map((({name:t,...r})=>h.createConfigItem([require.resolve(t),r],{type:e}))),qe=S.createBabelInputPluginFactory((()=>({options:({custom:e,...t})=>({customOptions:e,pluginOptions:t}),config(e,{customOptions:t}){const r=$e("plugin",[{name:"babel-plugin-macros"},{name:"babel-plugin-annotate-pure-calls"},{name:"babel-plugin-dev-expression"},"cjs"!==t.format&&{name:"babel-plugin-transform-rename-import",replacements:Ee},{name:"babel-plugin-polyfill-regenerator",method:"usage-pure"},{name:"@babel/plugin-proposal-class-properties",loose:!0},(n=t.extractErrors,!!n&&(n.constructor!==Object||Object.keys(n).length>0)&&{name:"./errors/transformErrorMessages"})].filter(Boolean));var n;const s=e.options||{};s.presets=s.presets||[];const o=s.presets.findIndex((e=>e.file.request.includes("@babel/preset-env")));if(-1!==o){const e=s.presets[o];s.presets[o]=h.createConfigItem([e.file.resolved,se.default({loose:!0,targets:t.targets},e.options,{modules:!1})],{type:"preset"})}else{const e=$e("preset",[{name:"@babel/preset-env",targets:t.targets,modules:!1,loose:!0}]);s.presets=ke("preset",e,s.presets)}return s.plugins=ke("plugin",r,s.plugins||[]),s}})));function Se(e){const t=e.split("node_modules"),r=t[0];if(t.length<2)return null;const n=t[1].split(i.sep),s=n[1].startsWith("@")?n.slice(1,3).join(i.sep):n[1];return i.resolve(r,"node_modules",s,"package.json")}const Fe=["react","react-native"],De={errorMapFilePath:me.appErrorsJson};let Ce={rollup:(e,t)=>e};async function Oe(e){const t=m.concatAllArray(e.input.map((t=>function(e,t){return[e.format.includes("cjs")&&{...e,format:"cjs",env:"development",input:t},e.format.includes("cjs")&&{...e,format:"cjs",env:"production",input:t},e.format.includes("esm")&&{...e,format:"esm",input:t},e.format.includes("umd")&&{...e,format:"umd",env:"development",input:t},e.format.includes("umd")&&{...e,format:"umd",env:"production",input:t},e.format.includes("system")&&{...e,format:"system",env:"development",input:t},e.format.includes("system")&&{...e,format:"system",env:"production",input:t}].filter(Boolean)}(e,t).map(((e,t)=>({...e,writeMeta:0===t}))))));return await Promise.all(t.map((async(e,t)=>{const r=await async function(e,t){const r=await ve({...De,...e}),n=e.format.includes("es")||e.format.includes("esm"),s=void 0!==e.minify?e.minify:"production"===e.env||n;let o=["esm","cjs"].includes(e.format)?"":e.format,a="esm"===e.format?"mjs":"cjs";const l=[`${me.appDist}/${pe(e.name)}`,o,e.env,s?"min":"",a].filter(Boolean).join("."),c=re.default.readConfigFile(e.tsconfig||me.tsconfigJson,re.default.sys.readFile).config,u=re.default.parseJsonConfigFileContent(c,re.default.sys,"./").options,p="production"==="development",d=["esm"===e.format?".mjs":null,"cjs"===e.format?".cjs":null,".js"].filter(Boolean);return{input:e.input,external:e=>!e.startsWith("regenerator-runtime")&&(!!Fe.includes(e)||(e=>!e.startsWith(".")&&!L.default.isAbsolute(e))(e)),shimMissingExports:!0,treeshake:{propertyReadSideEffects:!1},output:{file:l,format:n?"es":e.format,freeze:!1,esModule:Boolean(u?.esModuleInterop)||n,name:e.name||ue(e.name),sourcemap:!0,globals:{react:"React","react-native":"ReactNative","lodash-es":"lodashEs","lodash/fp":"lodashFp"},exports:"named"},plugins:[e.extractErrors&&{name:"Extract errors",async transform(e){try{await r(e)}catch(e){return null}return{code:e,map:null}}},Q.default({modulesOnly:!0,browser:"node"!==e.target,extensions:[".jsx",".json",".node"]}),G.default({extensions:[".js",".cjs",".mjs"],esmExternals:!0,requireReturnsDefault:!0,transformMixedEsModules:!0,include:"umd"===e.format||n?/\/node_modules\//:/\/regenerator-runtime\//}),H.default(),{name:"Remove shebang",transform:e=>({code:e=e.replace(/^#!(.*)/,""),map:null})},te.default({typescript:re.default,tsconfig:e.tsconfig,tsconfigDefaults:{exclude:["**/*.spec.ts","**/*.test.ts","**/*.spec.tsx","**/*.test.tsx","node_modules","bower_components","jspm_packages",me.appDist],compilerOptions:{sourceMap:!0,declaration:!0,jsx:"react"}},tsconfigOverride:{compilerOptions:{module:"esnext",target:"esnext",...t>0?{declaration:!1,declarationMap:!1}:{}}},check:!e.transpileOnly&&0===t,useTsconfigDeclarationDir:Boolean(u?.declarationDir)}),e.legacy&&qe({exclude:"node_modules/**",extensions:[...h.DEFAULT_EXTENSIONS,"ts","tsx"],passPerPreset:!0,custom:{targets:{..."node"===e.target?{node:14}:{},esmodules:n},extractErrors:e.extractErrors,format:e.format},babelHelpers:"bundled"}),ee.default(),s&&y.terser({format:{keep_quoted_props:!0,comments:!1},compress:{keep_infinity:!0,pure_getters:!0,passes:10},ecma:e.legacy?5:2020,module:n,toplevel:"cjs"===e.format||n}),D.optimizeLodashImports({useLodashEs:n||void 0}),e.env&&{name:"Ensure default exports",renderChunk:async(e,t)=>({code:e.replace(/process\.env\.NODE_ENV(?!\s*=)/g,JSON.stringify(p?"production":"development")),map:null})},!e.legacy&&D.optimizeLodashImports({useLodashEs:n||void 0}),{name:"Resolve final runtime imports to files",renderChunk:async(t,r)=>{for(const n of r.imports){if(i.extname(n))continue;let r=require.resolve(n);const s=i.extname(r),o=r.replace(s,"");if("esm"===e.format||"cjs"===e.format)for(const e of d){const t=o+e;if(C.existsSync(t)){r=t;break}}const a=Se(r);if(!a||!C.existsSync(a))continue;const l=C.readFileSync(a,"utf-8"),c=JSON.parse(l);if(K.default.resolve(c,n))continue;const u=r.slice(r.indexOf(n)),p=new RegExp(`(from|require\\()\\s*['"]${n.replace(".","\\.")}['"]`,"g"),f=t.match(p)??[];for(const e of f){const r=e.replace(n,u);t=t.replace(e,r)}}return{code:t,map:null}}},{name:"Ensure default exports",renderChunk:async(e,t)=>t.exports.includes("default")||!n?null:{code:`${e}\nexport default {};`,map:null}}]}}(e,t);return Ce.rollup(r,e)})))}C.existsSync(me.appConfig)&&(Ce=require(me.appConfig));const Je={name:"basic",dependencies:["husky","tsdx","tslib","typescript","size-limit","@size-limit/preset-small-lib"],packageJson:{version:"0.1.0",license:"MIT",main:"./dist/index.cjs",module:"./dist/index.mjs",exports:{"./package.json":"./package.json",".":{import:"./dist/index.mjs",require:"./dist/index.cjs"}},typings:"dist/index.d.ts",files:["dist","src"],engines:{node:">=14"},scripts:{start:"tsdx watch",build:"tsdx build",test:"tsdx test",posttest:"node test/import.mjs && node test/require.cjs",lint:"tsdx lint",prepare:"tsdx build",size:"size-limit",analyze:"size-limit --why"},peerDependencies:{},husky:{hooks:{"pre-commit":"tsdx lint"}},prettier:{printWidth:80,semi:!0,singleQuote:!0,trailingComma:"es5"}}},_e={name:"react",dependencies:[...Je.dependencies,"@types/react","@types/react-dom","react","react-dom"],packageJson:{...Je.packageJson,peerDependencies:{react:">=16"},scripts:{...Je.packageJson.scripts,test:"tsdx test"}}},Ie={basic:Je,react:_e,"react-with-storybook":{dependencies:[..._e.dependencies,"@babel/core","@storybook/addon-essentials","@storybook/addon-links","@storybook/addon-info","@storybook/addons","@storybook/react","react-is","babel-loader"],name:"react-with-storybook",packageJson:{..._e.packageJson,scripts:{..._e.packageJson.scripts,storybook:"start-storybook -p 6006","build-storybook":"build-storybook"}}}};async function Ne(){const e=me.appDist+"/src";await X.pathExists(e)&&(console.warn('[tsdx]: Your rootDir is currently set to "./". Please change your rootDir to "./src".\nTSDX has deprecated setting tsconfig.compilerOptions.rootDir to "./" as it caused buggy output for declarationMaps and more.\nYou may also need to change your include to remove "test", which also caused declarations to be unnecessarily created for test files.'),await X.copy(e,me.appDist,{overwrite:!0}),await X.remove(e))}const Me=P.default("tsdx");let Pe;try{Pe=JSON.parse(C.readFileSync(me.appPackageJson,"utf-8"))}catch(e){}const Re=e=>I.stat(e).then((e=>e.isDirectory())).catch((()=>!1)),Te=e=>I.stat(e).then((e=>e.isFile())).catch((()=>!1));async function ze(e,t){return m.concatAllArray([].concat(e&&e.length?e:t&&fe(t)||await Re(fe("src"))&&await async function(e){const t=await Te(fe("src/index.ts"))?".ts":await Te(fe("src/index.tsx"))?".tsx":await Te(fe("src/index.jsx"))?".jsx":".js";return fe(`src/index${t}`)}()).map((e=>R.default(e))))}async function Be(e){return{...e,name:e.name||Pe.name,input:await ze(e.entry,Pe.source),format:e.format.split(",").map((e=>"es"===e?"esm":e))}}async function Le(){await X.remove(me.appDist)}function Ae(e){const t=pe(e),r=`#!/usr/bin/env node\n'use strict';\n\nconst { NODE_ENV } = process.env;\nif (NODE_ENV === 'production')\n  module.exports = require('./${t}.production.min.cjs');\nelse\n  module.exports = require('./${t}.development.cjs');\n`;return X.outputFile(L.default.join(me.appDist,"index.cjs"),r)}function Ue(e){const t=`#!/usr/bin/env node\n\nexport { default } from './${e}.min.mjs';\nexport * from './${e}.min.mjs';\n`;return X.outputFile(L.default.join(me.appDist,"index.mjs"),t)}function We(e){U.default.exec(`npm config set init-author-name "${e}"`,{silent:!0})}Me.command("create <pkg>").describe("Create a new package with TSDX").example("create mypackage").option("--template",`Specify a template. Allowed choices: [${Object.keys(Ie).join(", ")}]`).example("create --template react mypackage").action((async(e,t)=>{console.log(z.default.blue("\n::::::::::: ::::::::  :::::::::  :::    :::\n    :+:    :+:    :+: :+:    :+: :+:    :+:\n    +:+    +:+        +:+    +:+  +:+  +:+\n    +#+    +#++:++#++ +#+    +:+   +#++:+\n    +#+           +#+ +#+    +#+  +#+  +#+\n    #+#    #+#    #+# #+#    #+# #+#    #+#\n    ###     ########  #########  ###    ###\n"));const r=W.default(`Creating ${z.default.bold.green(e)}...`);let n;try{const o=await X.realpath(process.cwd());let a=await async function t(n){if(!await X.pathExists(n))return n;r.fail(`Failed to create ${z.default.bold.red(e)}`);const s=new oe.default({message:`A folder named ${z.default.bold.red(e)} already exists! ${z.default.bold("Choose a different name")}`,initial:e+"-1",result:e=>e.trim()});return e=await s.run(),n=await X.realpath(process.cwd())+"/"+e,r.start(`Creating ${z.default.bold.green(e)}...`),await t(n)}(o+"/"+e);const i=new ae.default({message:"Choose a template",choices:Object.keys(Ie)});t.template?(n=t.template.trim(),i.choices.includes(n)||(r.fail(`Invalid template ${z.default.bold.red(n)}`),n=await i.run())):n=await i.run(),r.start(),await X.copy(L.default.resolve(__dirname,`../templates/${n}`),a,{overwrite:!0}),await X.move(L.default.resolve(a,"./gitignore"),L.default.resolve(a,"./.gitignore"));let l=await X.readFile(L.default.resolve(a,"LICENSE"),{encoding:"utf-8"});l=l.replace(/<year>/,`${(new Date).getFullYear()}`);let c=function(){let e="";return e=U.default.exec("npm config get init-author-name",{silent:!0}).stdout.trim(),e||(e=U.default.exec("git config --global user.name",{silent:!0}).stdout.trim(),e?(We(e),e):(e=U.default.exec("npm config get init-author-email",{silent:!0}).stdout.trim(),e||(e=U.default.exec("git config --global user.email",{silent:!0}).stdout.trim(),e||e)))}();if(!c){r.stop();const e=new oe.default({name:"author",message:"Who is the package author?"});c=await e.run(),We(c),r.start()}l=l.replace(/<author>/,c.trim()),await X.writeFile(L.default.resolve(a,"LICENSE"),l,{encoding:"utf-8"});const u=(e=>({name:t,author:r})=>({...e.packageJson,name:t,author:r,"size-limit":[{path:`dist/${t}.production.min.cjs`,limit:"10 KB"},{path:`dist/${t}.min.mjs`,limit:"10 KB"}]}))(Ie[n]);process.chdir(a);const p=u({name:pe(e),author:c}),d=function({engines:e}){return e&&e.node}(p);d&&!V.default.satisfies(process.version,d)&&(r.fail((s=d,`Unsupported Node version! Your current Node version (${z.default.red(process.version)}) does not satisfy the requirement of Node ${z.default.cyan(s)}.`)),process.exit(1)),await X.outputJSON(L.default.resolve(a,"package.json"),p),r.succeed(`Created ${z.default.bold.green(e)}`),await xe(e)}catch(t){r.fail(`Failed to create ${z.default.bold.red(e)}`),ce(t),process.exit(1)}var s;const o=Ie[n],{dependencies:a}=o,i=await ye();console.log(z.default.bold(`\n  Using ${"yarn"===i?"yarn":"npm"}.\n`));const l=W.default((c=a.sort(),`Installing dependencies:\n\n${c.map((e=>((e,t=1)=>`${" ".repeat(2*t)}${e}`)(`${z.default.cyan(z.default.bold(e))}`,2))).join("\n")}\n\n`)).start();var c;try{await A.default(i,function(e,t){switch(e){case"npm":return["install",...t,"--save-dev"];case"yarn":return["add",...t,"--dev"]}}(i,a)),l.succeed("Dependencies installed successfully!"),console.log(z.default.bold("\n  Initializing git repo.")),await A.default("git",["init"]),console.log(await xe(e))}catch(e){l.fail("Failed to install dependencies"),ce(e),process.exit(1)}})),Me.command("watch").describe("Rebuilds on any change").option("--entry, -i","Entry module").example("watch --entry src/foo.tsx").option("--target","Specify your target environment","browser").example("watch --target node").option("--name","Specify name exposed in UMD builds").example("watch --name Foo").option("--format","Specify module format(s)","cjs,esm").example("watch --format cjs,esm").option("--verbose","Keep outdated console output in watch mode instead of clearing the screen").example("watch --verbose").option("--noClean","Don't clean the dist folder").example("watch --noClean").option("--tsconfig","Specify custom tsconfig path").example("watch --tsconfig ./tsconfig.foo.json").option("--onFirstSuccess","Run a command on the first successful build").example('watch --onFirstSuccess "echo The first successful build!"').option("--onSuccess","Run a command on a successful build").example('watch --onSuccess "echo Successful build!"').option("--onFailure","Run a command on a failed build").example('watch --onFailure "The build failed!"').option("--transpileOnly","Skip type checking").example("watch --transpileOnly").option("--extractErrors","Extract invariant errors to ./errors/codes.json.").example("watch --extractErrors").action((async e=>{const t=await Be(e),n=await Oe(t);t.noClean||await Le(),t.format.includes("cjs")&&await Ae(t.name),t.format.includes("esm")&&await Ue(t.name);let s=!0,o=null,a=null;function i(e){if(!e)return null;const[t,...r]=e.split(" ");return A.default(t,r,{stdio:"inherit"})}const l=W.default().start();r.watch(n.map((e=>({watch:{silent:!0,include:["src/**"],exclude:["node_modules/**"]},...e})))).on("event",(async e=>{if(await Promise.all([o?o.kill("SIGTERM"):null,a?a.kill("SIGTERM"):null]),"START"===e.code&&(t.verbose||process.stdout.write("win32"===process.platform?"[2J[0f":"[2J[3J[H"),l.start(z.default.bold.cyan("Compiling modules..."))),"ERROR"===e.code&&(l.fail(z.default.bold.red("Failed to compile")),ce(e.error),a=i(t.onFailure)),"END"===e.code){l.succeed(z.default.bold.green("Compiled successfully")),console.log(`\n  ${z.default.dim("Watching for changes")}\n`);try{await Ne(),s&&t.onFirstSuccess?(s=!1,i(t.onFirstSuccess)):o=i(t.onSuccess)}catch(e){}}}))})),Me.command("build").describe("Build your project once and exit").option("--entry, -i","Entry module").example("build --entry src/foo.tsx").option("--target","Specify your target environment","browser").example("build --target node").option("--name","Specify name exposed in UMD builds").example("build --name Foo").option("--format","Specify module format(s)","cjs,esm").example("build --format cjs,esm").option("--legacy","Babel transpile and emit ES5.").example("build --legacy").option("--tsconfig","Specify custom tsconfig path").example("build --tsconfig ./tsconfig.foo.json").option("--transpileOnly","Skip type checking").example("build --transpileOnly").option("--extractErrors","Extract errors to ./errors/codes.json and provide a url for decoding.").example("build --extractErrors=https://reactjs.org/docs/error-decoder.html?invariant=").action((async e=>{const t=await Be(e),n=await Oe(t);await Le();const s=await async function(){return await Y.default.ensureDir(me.progressEstimatorCache),ie.default({storagePath:me.progressEstimatorCache})}();t.format.includes("cjs")&&s(Ae(t.name).catch(ce),"Creating CJS entry file"),t.format.includes("esm")&&s(Ue(t.name).catch(ce),"Creating MJS entry file");try{const e=T.default.map(n,(async e=>{let t=await r.rollup(e);await t.write(e.output)})).catch((e=>{throw e})).then((async()=>{await Ne()}));s(e,"Building modules"),await e}catch(e){ce(e),process.exit(1)}})),Me.command("test").describe("Run jest test runner. Passes through all flags directly to Jest").action((async e=>{process.env.BABEL_ENV="test",process.env.NODE_ENV="test",process.on("unhandledRejection",(e=>{throw e}));const t=process.argv.slice(2);let r={...(n=e.config?L.default.dirname(e.config):me.appRoot,{transform:{".(ts|tsx)$":require.resolve("ts-jest/dist"),".(js|jsx)$":require.resolve("babel-jest")},transformIgnorePatterns:["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],moduleFileExtensions:["ts","tsx","js","jsx","json","node"],collectCoverageFrom:["src/**/*.{ts,tsx,js,jsx}"],testMatch:["<rootDir>/**/*.(spec|test).{ts,tsx,js,jsx}"],testURL:"http://localhost",rootDir:n,watchPlugins:[require.resolve("jest-watch-typeahead/filename"),require.resolve("jest-watch-typeahead/testname")]}),...Pe.jest};var n;const s=await X.pathExists(me.jestConfig);if(e.config||s){const t=fe(e.config||me.jestConfig),n=require(t);r={...r,...n}}if(e.config){let e=t.indexOf("--config");if(-1!==e)t.splice(e,2);else{const r=/--config=.+/;e=t.findIndex((e=>e.match(r))),-1!==e&&t.splice(e,1)}}t.push("--config",JSON.stringify({...r}));const[,...o]=t;B.default.run(o)})),Me.command("lint").describe("Run eslint with Prettier").example("lint src test").option("--fix","Fixes fixable errors and warnings").example("lint src test --fix").option("--ignore-pattern","Ignore a pattern").example("lint src test --ignore-pattern test/foobar.ts").option("--max-warnings","Exits with non-zero error code if number of warnings exceed this number",Infinity).example("lint src test --max-warnings 10").option("--write-file","Write the config file locally").example("lint --write-file").option("--report-file","Write JSON report to file locally").example("lint --report-file eslint-report.json").action((async e=>{if(0===e._.length&&!e["write-file"]){const t=["src","test"].filter(X.existsSync);e._=t,console.log(z.default.yellow(`Defaulting to "tsdx lint ${t.join(" ")}"`,'\nYou can override this in the package.json scripts, like "lint": "tsdx lint src otherDir"'))}const t=await async function({pkg:e,rootDir:t,writeFile:r}){const n={extends:["react-app","prettier/@typescript-eslint","plugin:prettier/recommended"],settings:{react:{version:Boolean(function({dependencies:e,devDependencies:t}){return e&&e.react||t&&t.react}(e))?"detect":"999.999.999"}}};if(!r)return n;const s=L.default.join(t,".eslintrc.js");try{await Y.default.writeFile(s,`module.exports = ${JSON.stringify(n,null,2)}`,{flag:"wx"})}catch(e){return"EEXIST"===e.code?console.error("Error trying to save the Eslint configuration file:",`${s} already exists.`):console.error(e),n}}({pkg:Pe,rootDir:me.appRoot,writeFile:e["write-file"]}),r=new a.CLIEngine({baseConfig:{...t,...Pe.eslint},extensions:[".ts",".tsx",".js",".jsx"],fix:e.fix,ignorePattern:e["ignore-pattern"]}),n=r.executeOnFiles(e._);e.fix&&a.CLIEngine.outputFixes(n),console.log(r.getFormatter()(n.results)),e["report-file"]&&await X.outputFile(e["report-file"],r.getFormatter("json")(n.results)),n.errorCount&&process.exit(1),n.warningCount>e["max-warnings"]&&process.exit(1)})),Me.parse(process.argv),exports.isDir=Re,exports.isFile=Te;
//# sourceMappingURL=tsdx.production.min.cjs.map
