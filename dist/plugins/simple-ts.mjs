import{spawn as s}from"child_process";import*as o from"typescript/lib/typescript.js";import t from"fs-extra/lib/index.js";import r from"fs-extra/lib/index.js";import e from"path";import"camelcase/index.js";import i from"progress-estimator/src/index.js";const n=r.realpathSync(process.cwd()),a=function(s){return e.resolve(n,s)},c={appPackageJson:a("package.json"),tsconfigJson:a("tsconfig.json"),testsSetup:a("test/setupTests.ts"),appRoot:a("."),appSrc:a("src"),appErrorsJson:a("errors/codes.json"),appErrors:a("errors"),appDist:a("dist"),appConfig:a("export-ts.config.js"),jestConfig:a("jest.config.js"),progressEstimatorCache:a("node_modules/.cache/.progress-estimator")};function p(){const s=o.findConfigFile(".",o.sys.fileExists);if(!s)throw Error("tsconfig not found");const t=o.sys.readFile(s)??"",r=o.parseConfigFileTextToJson(s,t).config;return o.parseJsonConfigFileContent(r,o.sys,process.cwd(),void 0,s)}function l(s,t=""){const r=p();if(!t)return null;const e=o.resolveModuleName(s,t,r.options,o.sys);return e.resolvedModule&&".d.ts"!==e.resolvedModule.extension?e.resolvedModule.resolvedFileName:null}async function f({transpileOnly:o=!1,watch:r=!1}={}){const e=`--rootDir src/ --outDir dist/ --noEmit false --strict ${o}`.split(" ");console.log(`> Command: tsc ${e.join(" ")}`);const n=await async function(){return await t.ensureDir(c.progressEstimatorCache),i({storagePath:c.progressEstimatorCache})}();await n(new Promise((o=>{s("tsc",e,{stdio:"inherit"}).on("exit",(s=>{if(0!==s)throw Error("TypeScript build failed");o(void 0)}))})),"TS âž¡ JS: Compiling with TSC"),r&&s("tsc",[...e,"--watch","--preserveWatchOutput"],{stdio:"inherit"})}function d(){return{name:"simple-ts",buildStart:async()=>await f()}}export default d;export{p as loadConfig,l as resolveId,f as runTsc};
//# sourceMappingURL=simple-ts.mjs.map
