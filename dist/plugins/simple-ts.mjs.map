{"version":3,"file":"simple-ts.mjs","sources":["../../src/utils.ts","../../src/constants.ts","../../src/plugins/simple-ts.ts","../../src/createProgressEstimator.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function (relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n","import { resolveApp } from './utils';\n\nexport const paths = {\n  appPackageJson: resolveApp('package.json'),\n  tsconfigJson: resolveApp('tsconfig.json'),\n  testsSetup: resolveApp('test/setupTests.ts'),\n  appRoot: resolveApp('.'),\n  appSrc: resolveApp('src'),\n  appErrorsJson: resolveApp('errors/codes.json'),\n  appErrors: resolveApp('errors'),\n  appDist: resolveApp('dist'),\n  appConfig: resolveApp('export-ts.config.js'),\n  jestConfig: resolveApp('jest.config.js'),\n  progressEstimatorCache: resolveApp('node_modules/.cache/.progress-estimator'),\n};\n","/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @see https://github.com/GoogleChromeLabs/proxx/blob/master/lib/simple-ts.js\n * @see https://twitter.com/jaffathecake/status/1145979217852678144\n */\n\nimport { spawn } from 'child_process';\nimport * as ts from 'typescript';\nimport { createProgressEstimator } from '../createProgressEstimator';\n\n// const extRe = /\\.tsx?$/;\n\nexport function loadConfig() {\n  const fileName = ts.findConfigFile('.', ts.sys.fileExists);\n  if (!fileName) throw Error('tsconfig not found');\n  const text = ts.sys.readFile(fileName) ?? '';\n  const loadedConfig = ts.parseConfigFileTextToJson(fileName, text).config;\n  const parsedTsConfig = ts.parseJsonConfigFileContent(\n    loadedConfig,\n    ts.sys,\n    process.cwd(),\n    undefined,\n    fileName\n  );\n  return parsedTsConfig;\n}\n\nexport function resolveId(id: string, importer = '') {\n  const config = loadConfig();\n\n  // If there isn't an importer, it's an entry point, so we don't need to resolve it relative\n  // to something.\n  if (!importer) return null;\n\n  const tsResolve = ts.resolveModuleName(id, importer, config.options, ts.sys);\n\n  if (\n    // It didn't find anything\n    !tsResolve.resolvedModule ||\n    // Or if it's linking to a definition file, it's something in node_modules,\n    // or something local like css.d.ts\n    tsResolve.resolvedModule.extension === '.d.ts'\n  ) {\n    return null;\n  }\n\n  return tsResolve.resolvedModule.resolvedFileName;\n}\n\nexport async function runTsc({ transpileOnly = false, watch = false } = {}) {\n  /**\n   * Force src/ rootDir, dist/ outDir, and override noEmit.\n   */\n  const argString = `--rootDir src/ --outDir dist/ --noEmit false --strict ${transpileOnly}`;\n  const args = argString.split(' ');\n\n  console.log(`> Command: tsc ${args.join(' ')}`);\n  const progressIndicator = await createProgressEstimator();\n\n  await progressIndicator(\n    new Promise((resolve) => {\n      const proc = spawn('tsc', args, {\n        stdio: 'inherit',\n      });\n\n      proc.on('exit', (code) => {\n        if (code !== 0) {\n          throw Error('TypeScript build failed');\n        }\n        resolve(void 0);\n      });\n    }),\n    `TS âž¡ JS: Compiling with TSC`\n  );\n\n  if (watch) {\n    spawn('tsc', [...args, '--watch', '--preserveWatchOutput'], {\n      stdio: 'inherit',\n    });\n  }\n}\n\n/**\n * This simply runs `tsc` in process.cwd(), reading the TSConfig in that\n * directory, and forcing an emit.\n */\nexport default function simpleTS() {\n  return {\n    name: 'simple-ts',\n    /**\n     * Wait for the process to finish.\n     */\n    buildStart: async () => await runTsc(),\n  };\n}\n","import fs from 'fs-extra';\n\nimport { paths } from './constants';\nimport progressEstimator from 'progress-estimator';\n\nexport async function createProgressEstimator() {\n  await fs.ensureDir(paths.progressEstimatorCache);\n  return progressEstimator({\n    // All configuration keys are optional, but it's recommended to specify a storage location.\n    storagePath: paths.progressEstimatorCache,\n  });\n}\n"],"names":["relativePath","paths","appPackageJson","resolveApp","tsconfigJson","testsSetup","appRoot","appSrc","appErrorsJson","appErrors","appDist","appConfig","jestConfig","progressEstimatorCache","loadConfig","fileName","ts","findConfigFile","sys","fileExists","Error","text","readFile","loadedConfig","parseConfigFileTextToJson","config","parseJsonConfigFileContent","process","cwd","undefined","resolveId","id","importer","tsResolve","resolveModuleName","options","resolvedModule","extension","resolvedFileName","async","runTsc","transpileOnly","watch","args","split","console","log","join","progressIndicator","fs","ensureDir","progressEstimator","storagePath","createProgressEstimator","Promise","resolve","spawn","stdio","on","code","simpleTS","name","buildStart"],"mappings":"kQA6BoCA,0BC3BvBC,EAAQ,CACnBC,eAAgBC,EAAW,gBAC3BC,aAAcD,EAAW,iBACzBE,WAAYF,EAAW,sBACvBG,QAASH,EAAW,KACpBI,OAAQJ,EAAW,OACnBK,cAAeL,EAAW,qBAC1BM,UAAWN,EAAW,UACtBO,QAASP,EAAW,QACpBQ,UAAWR,EAAW,uBACtBS,WAAYT,EAAW,kBACvBU,uBAAwBV,EAAW,qDCSrBW,IACd,MAAMC,EAAWC,EAAGC,eAAe,IAAKD,EAAGE,IAAIC,YAC/C,IAAKJ,EAAU,MAAMK,MAAM,sBAC3B,MAAMC,EAAOL,EAAGE,IAAII,SAASP,IAAa,GACpCQ,EAAeP,EAAGQ,0BAA0BT,EAAUM,GAAMI,OAQlE,OAPuBT,EAAGU,2BACxBH,EACAP,EAAGE,IACHS,QAAQC,WACRC,EACAd,YAKYe,EAAUC,EAAYC,EAAW,IAC/C,MAAMP,EAASX,IAIf,IAAKkB,EAAU,OAAO,KAEtB,MAAMC,EAAYjB,EAAGkB,kBAAkBH,EAAIC,EAAUP,EAAOU,QAASnB,EAAGE,KAExE,OAEGe,EAAUG,gBAG4B,UAAvCH,EAAUG,eAAeC,UAKpBJ,EAAUG,eAAeE,iBAHvB,KAMJC,eAAeC,GAAOC,cAAEA,GAAgB,EAAKC,MAAEA,GAAQ,GAAU,IAItE,MACMC,EADY,yDAAyDF,IACpDG,MAAM,KAE7BC,QAAQC,IAAI,kBAAkBH,EAAKI,KAAK,QACxC,MAAMC,QC9DDT,iBAEL,aADMU,EAAGC,UAAUjD,EAAMY,wBAClBsC,EAAkB,CAEvBC,YAAanD,EAAMY,yBD0DWwC,SAE1BL,EACJ,IAAIM,SAASC,IACEC,EAAM,MAAOb,EAAM,CAC9Bc,MAAO,YAGJC,GAAG,QAASC,IACf,GAAa,IAATA,EACF,MAAMvC,MAAM,2BAEdmC,OAAQ,SAGZ,+BAGEb,GACFc,EAAM,MAAO,IAAIb,EAAM,UAAW,yBAA0B,CAC1Dc,MAAO,qBASWG,IACtB,MAAO,CACLC,KAAM,YAINC,WAAYvB,eAAkBC"}