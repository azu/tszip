import e from"sade";import t from"tiny-glob/sync.js";import{watch as r,rollup as o}from"rollup";import n from"asyncro";import s from"chalk";import i from"jest";import{CLIEngine as a}from"eslint";import c from"path";import l from"execa";import p from"shelljs";import m from"ora";import u from"semver";import*as d from"fs-extra";import f from"fs-extra";import g from"camelcase";import"ansi-escapes";import{concatAllArray as y}from"jpjs";import{terser as h}from"rollup-plugin-terser";import{createConfigItem as x,DEFAULT_EXTENSIONS as w}from"@babel/core";import b from"@rollup/plugin-commonjs";import j from"@rollup/plugin-json";import v from"@rollup/plugin-replace";import E,{DEFAULTS as k}from"@rollup/plugin-node-resolve";import $ from"rollup-plugin-sourcemaps";import F from"rollup-plugin-typescript2";import S from"typescript";import{parse as D}from"@babel/parser";import C from"@babel/traverse";import{pascalCase as O}from"pascal-case";import{createBabelInputPluginFactory as J}from"@rollup/plugin-babel";import R from"lodash.merge";import{existsSync as M,readFileSync as N}from"fs";import P from"enquirer/lib/prompts/input.js";import _ from"enquirer/lib/prompts/select.js";import I from"progress-estimator";import{stat as T}from"fs/promises";import"@babel/helper-module-imports";const q=console.error.bind(console);function B(e){const t=e.error||e,r=`${t.name?t.name+": ":""}${t.message||t}`,o=t.plugin?"rpt2"===t.plugin?`(typescript) ${r}`:`(${t.plugin} plugin) ${r}`:r;if(q(s.bold.red(o)),t.loc&&(q(),q(`at ${t.loc.file}:${t.loc.line}:${t.loc.column}`)),t.frame)q(),q(s.dim(t.frame));else if(e.stack){const e=t.stack.replace(o,"");q(s.dim(e))}q()}const z=e=>g((e=>e.replace(/^@.*\//,""))(e).toLowerCase().replace(/((^[^a-zA-Z]+)|[^\w.-])|([^a-zA-Z0-9]+$)/g,"")),A=e=>e.toLowerCase().replace(/(^@.*\/)|((^[^a-zA-Z]+)|[^\w.-])|([^a-zA-Z0-9]+$)/g,""),L=f.realpathSync(process.cwd()),U=function(e){return c.resolve(L,e)},W={appPackageJson:U("package.json"),tsconfigJson:U("tsconfig.json"),testsSetup:U("test/setupTests.ts"),appRoot:U("."),appSrc:U("src"),appErrorsJson:U("errors/codes.json"),appErrors:U("errors"),appDist:U("dist"),appConfig:U("tsdx.config.js"),jestConfig:U("jest.config.js"),progressEstimatorCache:U("node_modules/.cache/.progress-estimator")};let V;async function Y(){if(V)return V;try{await l("yarnpkg",["--version"]),V="yarn"}catch(e){V="npm"}return V}const Z=e=>s.bold(s.cyan(e)),K=async function(e){const t=await Y(),r={install:"npm"===t?"npm install":"yarn install",build:"npm"===t?"npm run build":"yarn build",start:"npm"===t?"npm run start":"yarn start",test:"npm"===t?"npm test":"yarn test"};return`\n  ${s.green("Awesome!")} You're now ready to start coding.\n  \n  I already ran ${Z(r.install)} for you, so your next steps are:\n    ${Z(`cd ${e}`)}\n  \n  To start developing (rebuilds on changes):\n    ${Z(r.start)}\n  \n  To build for production:\n    ${Z(r.build)}\n\n  To test your library with Jest:\n    ${Z(r.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${s.green("https://github.com/formium/tsdx/issues")}\n`};function X(e){const t={},r=Object.keys(e);for(const o of r)t[e[o]]=o;return t}function G(e){switch(e.type){case"StringLiteral":case"Literal":return e.value;case"BinaryExpression":if("+"!==e.operator)throw new Error("Unsupported binary operator "+e.operator);return G(e.left)+G(e.right);default:throw new Error("Unsupported type "+e.type)}}const H={sourceType:"module",plugins:["classProperties","flow","jsx","trailingFunctionCommas","objectRestSpread"]};async function Q(e){if(!e||!e.errorMapFilePath)throw new Error("Missing options. Ensure you pass an object with `errorMapFilePath`.");if(!e.name||!e.name)throw new Error("Missing options. Ensure you pass --name flag to tsdx");const t=e.errorMapFilePath;let r;try{const e=await f.readFile(t,"utf-8");r=JSON.parse(e)}catch(e){r={}}const o=Object.keys(r);let n;function s(e){const t=D(e,H);C(t,{CallExpression:{exit(e){var t;e.get("callee").isIdentifier({name:"invariant"})&&(t=G(e.node.arguments[1]),r.hasOwnProperty(t)||(r[t]=""+n++))}}})}return n=0===o.length?0:Math.max.apply(null,o)+1,r=X(r),async function(o){s(o),await async function(){const o=O(z(e.name));await f.ensureDir(W.appErrors),await f.writeFile(t,JSON.stringify(X(r),null,2)+"\n","utf-8"),await f.writeFile(W.appErrors+"/ErrorDev.js","\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      ","utf-8"),await f.writeFile(W.appErrors+"/ErrorProd.js",`\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \`Minified ${o} error #\${code}; visit \${url} for the full message or \` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,"utf-8")}()}}const ee=[{original:"lodash(?!/fp)",replacement:"lodash-es"}],te=(e,...t)=>{const r=[];return t.forEach((t=>{t.forEach((t=>{const o=r.findIndex((e=>e.file.resolved===t.file.resolved));-1!==o?r[o]=x([r[o].file.resolved,R(r[o].options,t.options)],{type:e}):r.push(t)}))})),r},re=(e,t)=>t.map((({name:t,...r})=>x([require.resolve(t),r],{type:e}))),oe=J((()=>({options:({custom:e,...t})=>({customOptions:e,pluginOptions:t}),config(e,{customOptions:t}){const r=re("plugin",[{name:"babel-plugin-macros"},{name:"babel-plugin-annotate-pure-calls"},{name:"babel-plugin-dev-expression"},"cjs"!==t.format&&{name:"babel-plugin-transform-rename-import",replacements:ee},{name:"babel-plugin-polyfill-regenerator",method:"usage-pure"},{name:"@babel/plugin-proposal-class-properties",loose:!0},(o=t.extractErrors,!!o&&(o.constructor!==Object||Object.keys(o).length>0)&&{name:"./errors/transformErrorMessages"})].filter(Boolean));var o;const n=e.options||{};n.presets=n.presets||[];const s=n.presets.findIndex((e=>e.file.request.includes("@babel/preset-env")));if(-1!==s){const e=n.presets[s];n.presets[s]=x([e.file.resolved,R({loose:!0,targets:t.targets},e.options,{modules:!1})],{type:"preset"})}else{const e=re("preset",[{name:"@babel/preset-env",targets:t.targets,modules:!1,loose:!0}]);n.presets=te("preset",e,n.presets)}return n.plugins=te("plugin",r,n.plugins||[]),n}}))),ne=["react","react-native"],se={errorMapFilePath:W.appErrorsJson};let ie={},ae={rollup:(e,t)=>e};async function ce(e){const t=y(e.input.map((t=>function(e,t){return[e.format.includes("cjs")&&{...e,format:"cjs",env:"development",input:t},e.format.includes("cjs")&&{...e,format:"cjs",env:"production",input:t},e.format.includes("esm")&&{...e,format:"esm",input:t},e.format.includes("umd")&&{...e,format:"umd",env:"development",input:t},e.format.includes("umd")&&{...e,format:"umd",env:"production",input:t},e.format.includes("system")&&{...e,format:"system",env:"development",input:t},e.format.includes("system")&&{...e,format:"system",env:"production",input:t}].filter(Boolean)}(e,t).map(((e,t)=>({...e,writeMeta:0===t}))))));return await Promise.all(t.map((async(e,t)=>{const r=await async function(e,t){const r=await Q({...se,...e}),o=e.format.includes("es")||e.format.includes("esm"),n=void 0!==e.minify?e.minify:"production"===e.env||o;let s=["esm","cjs"].includes(e.format)?"":e.format,i="esm"===e.format?"mjs":"cjs";const a=[`${W.appDist}/${A(e.name)}`,s,e.env,n?"min":"",i].filter(Boolean).join("."),l=S.readConfigFile(e.tsconfig||W.tsconfigJson,S.sys.readFile).config,p=S.parseJsonConfigFileContent(l,S.sys,"./").options,{PRODUCTION:m}=process.env;return{input:e.input,external:e=>!e.startsWith("regenerator-runtime")&&(!!ne.includes(e)||(e=>!e.startsWith(".")&&!c.isAbsolute(e))(e)),shimMissingExports:!0,treeshake:{propertyReadSideEffects:!1},output:{file:a,format:e.format,freeze:!1,esModule:Boolean(p?.esModuleInterop)||o,name:e.name||z(e.name),sourcemap:!0,globals:{react:"React","react-native":"ReactNative","lodash-es":"lodashEs","lodash/fp":"lodashFp"},exports:"named"},plugins:[!!e.extractErrors&&{name:"Extract errors",async transform(e){try{await r(e)}catch(e){return null}return{code:e,map:null}}},E({mainFields:["module","main","node"!==e.target?"browser":void 0].filter(Boolean),extensions:[...k.extensions,".cjs",".mjs",".jsx"]}),b({extensions:[".js",".cjs",".mjs"],esmExternals:!0,requireReturnsDefault:!0,transformMixedEsModules:!0,include:"umd"===e.format||o?/\/node_modules\//:/\/regenerator-runtime\//}),j(),{name:"Remove shebang",transform(t){let r=/^#!(.*)/,o=t.match(r);return ie[e.name]=o?"#!"+o[1]:"",{code:t=t.replace(r,""),map:null}}},F({typescript:S,tsconfig:e.tsconfig,tsconfigDefaults:{exclude:["**/*.spec.ts","**/*.test.ts","**/*.spec.tsx","**/*.test.tsx","node_modules","bower_components","jspm_packages",W.appDist],compilerOptions:{sourceMap:!0,declaration:!0,jsx:"react"}},tsconfigOverride:{compilerOptions:{module:"esnext",target:"esnext",...t>0?{declaration:!1,declarationMap:!1}:{}}},check:!e.transpileOnly&&0===t,useTsconfigDeclarationDir:Boolean(p?.declarationDir)}),e.legacy&&oe({exclude:"node_modules/**",extensions:[...w,"ts","tsx"],passPerPreset:!0,custom:{targets:{..."node"===e.target?{node:14}:{},esmodules:o},extractErrors:e.extractErrors,format:e.format},babelHelpers:"bundled"}),e.env&&v({preventAssignment:!0,"process.env.NODE_ENV":JSON.stringify(m?"production":"development")}),$(),n&&h({format:{keep_quoted_props:!0,comments:!1},compress:{keep_infinity:!0,pure_getters:!0,passes:10},ecma:e.legacy?5:2020,module:o,toplevel:"cjs"===e.format||o}),{name:"Add export default {}",renderChunk:async(e,t)=>t.exports.includes("default")||!o?null:{code:`${e}\nexport default {};`,map:null}}]}}(e,t);return ae.rollup(r,e)})))}M(W.appConfig)&&(ae=require(W.appConfig));const le={name:"basic",dependencies:["husky","tsdx","tslib","typescript","size-limit","@size-limit/preset-small-lib"],packageJson:{version:"0.1.0",license:"MIT",main:"./dist/index.cjs",module:"./dist/index.mjs",exports:{"./package.json":"./package.json",".":{import:"./dist/index.mjs",require:"./dist/index.cjs"}},typings:"dist/index.d.ts",files:["dist","src"],engines:{node:">=14"},scripts:{start:"tsdx watch",build:"tsdx build",test:"tsdx test",posttest:"node test/import.mjs && node test/require.cjs",lint:"tsdx lint",prepare:"tsdx build",size:"size-limit",analyze:"size-limit --why"},peerDependencies:{},husky:{hooks:{"pre-commit":"tsdx lint"}},prettier:{printWidth:80,semi:!0,singleQuote:!0,trailingComma:"es5"}}},pe={name:"react",dependencies:[...le.dependencies,"@types/react","@types/react-dom","react","react-dom"],packageJson:{...le.packageJson,peerDependencies:{react:">=16"},scripts:{...le.packageJson.scripts,test:"tsdx test"}}},me={basic:le,react:pe,"react-with-storybook":{dependencies:[...pe.dependencies,"@babel/core","@storybook/addon-essentials","@storybook/addon-links","@storybook/addon-info","@storybook/addons","@storybook/react","react-is","babel-loader"],name:"react-with-storybook",packageJson:{...pe.packageJson,scripts:{...pe.packageJson.scripts,storybook:"start-storybook -p 6006","build-storybook":"build-storybook"}}}};async function ue(){const e=W.appDist+"/src";await d.pathExists(e)&&(console.warn('[tsdx]: Your rootDir is currently set to "./". Please change your rootDir to "./src".\nTSDX has deprecated setting tsconfig.compilerOptions.rootDir to "./" as it caused buggy output for declarationMaps and more.\nYou may also need to change your include to remove "test", which also caused declarations to be unnecessarily created for test files.'),await d.copy(e,W.appDist,{overwrite:!0}),await d.remove(e))}const de=e("tsdx");let fe;try{fe=JSON.parse(N(W.appPackageJson,"utf-8"))}catch(e){throw new Error(`Couldn't read app package.json: ${e}`)}const ge=e=>T(e).then((e=>e.isDirectory())).catch((()=>!1)),ye=e=>T(e).then((e=>e.isFile())).catch((()=>!1));async function he(e,r){return y([].concat(e&&e.length?e:r&&U(r)||await ge(U("src"))&&await async function(e){const t=await ye(U("src/index.ts"))?".ts":await ye(U("src/index.tsx"))?".tsx":await ye(U("src/index.jsx"))?".jsx":".js";return U(`src/index${t}`)}()).map((e=>t(e))))}async function xe(e){return{...e,name:e.name||fe.name,input:await he(e.entry,fe.source),format:e.format.split(",").map((e=>"es"===e?"esm":e))}}async function we(){await d.remove(W.appDist)}function be(e){const t=A(e),r=`#!/usr/bin/env node\n'use strict';\n\nconst { NODE_ENV } = process.env;\nif (NODE_ENV === 'production')\n  module.exports = require('./${t}.production.min.cjs');\nelse\n  module.exports = require('./${t}.development.cjs');\n`;return d.outputFile(c.join(W.appDist,"index.cjs"),r)}function je(e){const t=`#!/usr/bin/env node\n\nexport { default } from './${e}.min.mjs';\nexport * from './${e}.min.mjs';\n`;return d.outputFile(c.join(W.appDist,"index.mjs"),t)}function ve(e){p.exec(`npm config set init-author-name "${e}"`,{silent:!0})}de.command("create <pkg>").describe("Create a new package with TSDX").example("create mypackage").option("--template",`Specify a template. Allowed choices: [${Object.keys(me).join(", ")}]`).example("create --template react mypackage").action((async(e,t)=>{console.log(s.blue("\n::::::::::: ::::::::  :::::::::  :::    :::\n    :+:    :+:    :+: :+:    :+: :+:    :+:\n    +:+    +:+        +:+    +:+  +:+  +:+\n    +#+    +#++:++#++ +#+    +:+   +#++:+\n    +#+           +#+ +#+    +#+  +#+  +#+\n    #+#    #+#    #+# #+#    #+# #+#    #+#\n    ###     ########  #########  ###    ###\n"));const r=m(`Creating ${s.bold.green(e)}...`);let o;try{const i=await d.realpath(process.cwd());let a=await async function t(o){if(!await d.pathExists(o))return o;r.fail(`Failed to create ${s.bold.red(e)}`);const n=new P({message:`A folder named ${s.bold.red(e)} already exists! ${s.bold("Choose a different name")}`,initial:e+"-1",result:e=>e.trim()});return e=await n.run(),o=await d.realpath(process.cwd())+"/"+e,r.start(`Creating ${s.bold.green(e)}...`),await t(o)}(i+"/"+e);const l=new _({message:"Choose a template",choices:Object.keys(me)});t.template?(o=t.template.trim(),l.choices.includes(o)||(r.fail(`Invalid template ${s.bold.red(o)}`),o=await l.run())):o=await l.run(),r.start(),await d.copy(c.resolve(__dirname,`../templates/${o}`),a,{overwrite:!0}),await d.move(c.resolve(a,"./gitignore"),c.resolve(a,"./.gitignore"));let m=await d.readFile(c.resolve(a,"LICENSE"),{encoding:"utf-8"});m=m.replace(/<year>/,`${(new Date).getFullYear()}`);let f=function(){let e="";return e=p.exec("npm config get init-author-name",{silent:!0}).stdout.trim(),e||(e=p.exec("git config --global user.name",{silent:!0}).stdout.trim(),e?(ve(e),e):(e=p.exec("npm config get init-author-email",{silent:!0}).stdout.trim(),e||(e=p.exec("git config --global user.email",{silent:!0}).stdout.trim(),e||e)))}();if(!f){r.stop();const e=new P({name:"author",message:"Who is the package author?"});f=await e.run(),ve(f),r.start()}m=m.replace(/<author>/,f.trim()),await d.writeFile(c.resolve(a,"LICENSE"),m,{encoding:"utf-8"});const g=(e=>({name:t,author:r})=>({...e.packageJson,name:t,author:r,"size-limit":[{path:`dist/${t}.production.min.cjs`,limit:"10 KB"},{path:`dist/${t}.min.mjs`,limit:"10 KB"}]}))(me[o]);process.chdir(a);const y=g({name:A(e),author:f}),h=function({engines:e}){return e&&e.node}(y);h&&!u.satisfies(process.version,h)&&(r.fail((n=h,`Unsupported Node version! Your current Node version (${s.red(process.version)}) does not satisfy the requirement of Node ${s.cyan(n)}.`)),process.exit(1)),await d.outputJSON(c.resolve(a,"package.json"),y),r.succeed(`Created ${s.bold.green(e)}`),await K(e)}catch(t){r.fail(`Failed to create ${s.bold.red(e)}`),B(t),process.exit(1)}var n;const i=me[o],{dependencies:a}=i,f=m((g=a.sort(),`Installing npm modules:\n${g.map((function(e){return`    ${s.cyan(s.bold(e))}`})).join("\n")}\n`)).start();var g;try{const t=await Y();await l(t,function(e,t){switch(e){case"npm":return["install",...t,"--save-dev"];case"yarn":return["add",...t,"--dev"]}}(t,a)),f.succeed("Installed dependencies"),console.log(await K(e))}catch(e){f.fail("Failed to install dependencies"),B(e),process.exit(1)}})),de.command("watch").describe("Rebuilds on any change").option("--entry, -i","Entry module").example("watch --entry src/foo.tsx").option("--target","Specify your target environment","browser").example("watch --target node").option("--name","Specify name exposed in UMD builds").example("watch --name Foo").option("--format","Specify module format(s)","cjs,esm").example("watch --format cjs,esm").option("--verbose","Keep outdated console output in watch mode instead of clearing the screen").example("watch --verbose").option("--noClean","Don't clean the dist folder").example("watch --noClean").option("--tsconfig","Specify custom tsconfig path").example("watch --tsconfig ./tsconfig.foo.json").option("--onFirstSuccess","Run a command on the first successful build").example('watch --onFirstSuccess "echo The first successful build!"').option("--onSuccess","Run a command on a successful build").example('watch --onSuccess "echo Successful build!"').option("--onFailure","Run a command on a failed build").example('watch --onFailure "The build failed!"').option("--transpileOnly","Skip type checking").example("watch --transpileOnly").option("--extractErrors","Extract invariant errors to ./errors/codes.json.").example("watch --extractErrors").action((async e=>{const t=await xe(e),o=await ce(t);t.noClean||await we(),t.format.includes("cjs")&&await be(t.name),t.format.includes("esm")&&await je(t.name);let n=!0,i=null,a=null;function c(e){if(!e)return null;const[t,...r]=e.split(" ");return l(t,r,{stdio:"inherit"})}const p=m().start();r(o.map((e=>({watch:{silent:!0,include:["src/**"],exclude:["node_modules/**"]},...e})))).on("event",(async e=>{if(await Promise.all([i?i.kill("SIGTERM"):null,a?a.kill("SIGTERM"):null]),"START"===e.code&&(t.verbose||process.stdout.write("win32"===process.platform?"[2J[0f":"[2J[3J[H"),p.start(s.bold.cyan("Compiling modules..."))),"ERROR"===e.code&&(p.fail(s.bold.red("Failed to compile")),B(e.error),a=c(t.onFailure)),"END"===e.code){p.succeed(s.bold.green("Compiled successfully")),console.log(`\n  ${s.dim("Watching for changes")}\n`);try{await ue(),n&&t.onFirstSuccess?(n=!1,c(t.onFirstSuccess)):i=c(t.onSuccess)}catch(e){}}}))})),de.command("build").describe("Build your project once and exit").option("--entry, -i","Entry module").example("build --entry src/foo.tsx").option("--target","Specify your target environment","browser").example("build --target node").option("--name","Specify name exposed in UMD builds").example("build --name Foo").option("--format","Specify module format(s)","cjs,esm").example("build --format cjs,esm").option("--legacy","Babel transpile and emit ES5.").example("build --legacy").option("--tsconfig","Specify custom tsconfig path").example("build --tsconfig ./tsconfig.foo.json").option("--transpileOnly","Skip type checking").example("build --transpileOnly").option("--extractErrors","Extract errors to ./errors/codes.json and provide a url for decoding.").example("build --extractErrors=https://reactjs.org/docs/error-decoder.html?invariant=").action((async e=>{const t=await xe(e),r=await ce(t);await we();const s=await async function(){return await f.ensureDir(W.progressEstimatorCache),I({storagePath:W.progressEstimatorCache})}();t.format.includes("cjs")&&s(be(t.name).catch(B),"Creating CJS entry file"),t.format.includes("esm")&&s(je(t.name).catch(B),"Creating MJS entry file");try{const e=n.map(r,(async e=>{let t=await o(e);await t.write(e.output)})).catch((e=>{throw e})).then((async()=>{await ue()}));s(e,"Building modules"),await e}catch(e){B(e),process.exit(1)}})),de.command("test").describe("Run jest test runner. Passes through all flags directly to Jest").action((async e=>{process.env.BABEL_ENV="test",process.env.NODE_ENV="test",process.on("unhandledRejection",(e=>{throw e}));const t=process.argv.slice(2);let r={...(o=e.config?c.dirname(e.config):W.appRoot,{transform:{".(ts|tsx)$":require.resolve("ts-jest/dist"),".(js|jsx)$":require.resolve("babel-jest")},transformIgnorePatterns:["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],moduleFileExtensions:["ts","tsx","js","jsx","json","node"],collectCoverageFrom:["src/**/*.{ts,tsx,js,jsx}"],testMatch:["<rootDir>/**/*.(spec|test).{ts,tsx,js,jsx}"],testURL:"http://localhost",rootDir:o,watchPlugins:[require.resolve("jest-watch-typeahead/filename"),require.resolve("jest-watch-typeahead/testname")]}),...fe.jest};var o;const n=await d.pathExists(W.jestConfig);if(e.config||n){const t=U(e.config||W.jestConfig),o=require(t);r={...r,...o}}if(e.config){let e=t.indexOf("--config");if(-1!==e)t.splice(e,2);else{const r=/--config=.+/;e=t.findIndex((e=>e.match(r))),-1!==e&&t.splice(e,1)}}t.push("--config",JSON.stringify({...r}));const[,...s]=t;i.run(s)})),de.command("lint").describe("Run eslint with Prettier").example("lint src test").option("--fix","Fixes fixable errors and warnings").example("lint src test --fix").option("--ignore-pattern","Ignore a pattern").example("lint src test --ignore-pattern test/foobar.ts").option("--max-warnings","Exits with non-zero error code if number of warnings exceed this number",Infinity).example("lint src test --max-warnings 10").option("--write-file","Write the config file locally").example("lint --write-file").option("--report-file","Write JSON report to file locally").example("lint --report-file eslint-report.json").action((async e=>{if(0===e._.length&&!e["write-file"]){const t=["src","test"].filter(d.existsSync);e._=t,console.log(s.yellow(`Defaulting to "tsdx lint ${t.join(" ")}"`,'\nYou can override this in the package.json scripts, like "lint": "tsdx lint src otherDir"'))}const t=await async function({pkg:e,rootDir:t,writeFile:r}){const o={extends:["react-app","prettier/@typescript-eslint","plugin:prettier/recommended"],settings:{react:{version:Boolean(function({dependencies:e,devDependencies:t}){return e&&e.react||t&&t.react}(e))?"detect":"999.999.999"}}};if(!r)return o;const n=c.join(t,".eslintrc.js");try{await f.writeFile(n,`module.exports = ${JSON.stringify(o,null,2)}`,{flag:"wx"})}catch(e){return"EEXIST"===e.code?console.error("Error trying to save the Eslint configuration file:",`${n} already exists.`):console.error(e),o}}({pkg:fe,rootDir:W.appRoot,writeFile:e["write-file"]}),r=new a({baseConfig:{...t,...fe.eslint},extensions:[".ts",".tsx",".js",".jsx"],fix:e.fix,ignorePattern:e["ignore-pattern"]}),o=r.executeOnFiles(e._);e.fix&&a.outputFixes(o),console.log(r.getFormatter()(o.results)),e["report-file"]&&await d.outputFile(e["report-file"],r.getFormatter("json")(o.results)),o.errorCount&&process.exit(1),o.warningCount>e["max-warnings"]&&process.exit(1)})),de.parse(process.argv);export{ge as isDir,ye as isFile};
export default {};
//# sourceMappingURL=tsdx.min.mjs.map
