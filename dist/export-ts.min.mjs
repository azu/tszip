import e from"sade/lib/index.js";import t from"glob-promise/lib/index.js";import{watch as o,rollup as r}from"rollup";import s from"chalk/source/index.js";import n from"jest";import{CLIEngine as i}from"eslint/lib/api.js";import a,{extname as c,sep as l,resolve as p}from"path";import m from"execa/index.js";import u from"shelljs/shell.js";import d from"ora/index.js";import f from"semver/index.js";import*as g from"fs-extra/lib/index.js";import y from"fs-extra/lib/index.js";import h from"camelcase/index.js";import"ansi-escapes";import{concatAllArray as x}from"jpjs/dist/jpjs.js";import w from"resolve.exports";import{terser as b}from"rollup-plugin-terser";import{createConfigItem as j,DEFAULT_EXTENSIONS as v}from"@babel/core/lib/index.js";import E from"@rollup/plugin-commonjs/dist/index.js";import k from"@rollup/plugin-json/dist/index.js";import $ from"@rollup/plugin-node-resolve";import S from"rollup-plugin-sourcemaps";import F from"rollup-plugin-typescript2/dist/rollup-plugin-typescript2.cjs.js";import C from"typescript/lib/typescript.js";import{parse as D}from"@babel/parser/lib/index.js";import O from"@babel/traverse/lib/index.js";import{pascalCase as J}from"pascal-case/dist/index.js";import{createBabelInputPluginFactory as R}from"@rollup/plugin-babel/dist/index.js";import P from"lodash.merge";import{optimizeLodashImports as M}from"@optimize-lodash/rollup-plugin/dist/index.js";import{existsSync as N,readFileSync as _}from"fs";import I from"enquirer/lib/prompts/input.js";import T from"enquirer/lib/prompts/select.js";import q from"progress-estimator/src/index.js";import{stat as z}from"fs/promises";import"@babel/helper-module-imports";const B=console.error.bind(console);function A(e){const t=e.error||e,o=`${t.name?t.name+": ":""}${t.message||t}`,r=t.plugin?"rpt2"===t.plugin?`(typescript) ${o}`:`(${t.plugin} plugin) ${o}`:o;if(B(s.bold.red(r)),t.loc&&(B(),B(`at ${t.loc.file}:${t.loc.line}:${t.loc.column}`)),t.frame)B(),B(s.dim(t.frame));else if(e.stack){const e=t.stack.replace(r,"");B(s.dim(e))}B()}const L=e=>h((e=>e.replace(/^@.*\//,""))(e).toLowerCase().replace(/((^[^a-zA-Z]+)|[^\w.-])|([^a-zA-Z0-9]+$)/g,"")),U=e=>e.toLowerCase().replace(/(^@.*\/)|((^[^a-zA-Z]+)|[^\w.-])|([^a-zA-Z0-9]+$)/g,""),W=y.realpathSync(process.cwd()),Y=function(e){return a.resolve(W,e)},V={appPackageJson:Y("package.json"),tsconfigJson:Y("tsconfig.json"),testsSetup:Y("test/setupTests.ts"),appRoot:Y("."),appSrc:Y("src"),appErrorsJson:Y("errors/codes.json"),appErrors:Y("errors"),appDist:Y("dist"),appConfig:Y("export-ts.config.js"),jestConfig:Y("jest.config.js"),progressEstimatorCache:Y("node_modules/.cache/.progress-estimator")};let Z;async function K(){if(Z)return Z;try{await m("yarnpkg",["--version"]),Z="yarn"}catch(e){Z="npm"}return Z}const G=e=>s.bold(s.cyan(e)),H=(e,t=1)=>`${" ".repeat(2*t)}${e}`,Q=(e,t=1)=>{console.log(H(e,t))},X=async function(e){const t=await K(),o={install:"npm"===t?"npm install":"yarn install",build:"npm"===t?"npm run build":"yarn build",start:"npm"===t?"npm run start":"yarn start",test:"npm"===t?"npm test":"yarn test"};return`\n  ${s.green("Awesome!")} You're now ready to start coding.\n  \n  I already ran ${G(o.install)} for you, so your next steps are:\n    ${G(`cd ${e}`)}\n  \n  To start developing (rebuilds on changes):\n    ${G(o.start)}\n  \n  To build for production:\n    ${G(o.build)}\n\n  To test your library with Jest:\n    ${G(o.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${s.green("https://github.com/ctjlewis/export-ts/issues")}\n`};function ee(e){const t={},o=Object.keys(e);for(const r of o)t[e[r]]=r;return t}function te(e){switch(e.type){case"StringLiteral":case"Literal":return e.value;case"BinaryExpression":if("+"!==e.operator)throw new Error("Unsupported binary operator "+e.operator);return te(e.left)+te(e.right);default:throw new Error("Unsupported type "+e.type)}}const oe={sourceType:"module",plugins:["classProperties","flow","jsx","trailingFunctionCommas","objectRestSpread"]};async function re(e){if(!e||!e.errorMapFilePath)throw new Error("Missing options. Ensure you pass an object with `errorMapFilePath`.");if(!e.name||!e.name)throw new Error("Missing options. Ensure you pass --name flag to export-ts");const t=e.errorMapFilePath;let o;try{const e=await y.readFile(t,"utf-8");o=JSON.parse(e)}catch(e){o={}}const r=Object.keys(o);let s;function n(e){const t=D(e,oe);O(t,{CallExpression:{exit(e){var t;e.get("callee").isIdentifier({name:"invariant"})&&(t=te(e.node.arguments[1]),o.hasOwnProperty(t)||(o[t]=""+s++))}}})}return s=0===r.length?0:Math.max.apply(null,r)+1,o=ee(o),async function(r){n(r),await async function(){const r=J(L(e.name));await y.ensureDir(V.appErrors),await y.writeFile(t,JSON.stringify(ee(o),null,2)+"\n","utf-8"),await y.writeFile(V.appErrors+"/ErrorDev.js","\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      ","utf-8"),await y.writeFile(V.appErrors+"/ErrorProd.js",`\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \`Minified ${r} error #\${code}; visit \${url} for the full message or \` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,"utf-8")}()}}const se=[{original:"lodash(?!/fp)",replacement:"lodash-es"}],ne=(e,...t)=>{const o=[];return t.forEach((t=>{t.forEach((t=>{const r=o.findIndex((e=>e.file.resolved===t.file.resolved));-1!==r?o[r]=j([o[r].file.resolved,P(o[r].options,t.options)],{type:e}):o.push(t)}))})),o},ie=(e,t)=>t.map((({name:t,...o})=>j([require.resolve(t),o],{type:e}))),ae=R((()=>({options:({custom:e,...t})=>({customOptions:e,pluginOptions:t}),config(e,{customOptions:t}){const o=ie("plugin",[{name:"babel-plugin-macros"},{name:"babel-plugin-annotate-pure-calls"},{name:"babel-plugin-dev-expression"},"cjs"!==t.format&&{name:"babel-plugin-transform-rename-import",replacements:se},{name:"babel-plugin-polyfill-regenerator",method:"usage-pure"},{name:"@babel/plugin-proposal-class-properties",loose:!0},(r=t.extractErrors,!!r&&(r.constructor!==Object||Object.keys(r).length>0)&&{name:"./errors/transformErrorMessages"})].filter(Boolean));var r;const s=e.options||{};s.presets=s.presets||[];const n=s.presets.findIndex((e=>e.file.request.includes("@babel/preset-env")));if(-1!==n){const e=s.presets[n];s.presets[n]=j([e.file.resolved,P({loose:!0,targets:t.targets},e.options,{modules:!1})],{type:"preset"})}else{const e=ie("preset",[{name:"@babel/preset-env",targets:t.targets,modules:!1,loose:!0}]);s.presets=ne("preset",e,s.presets)}return s.plugins=ne("plugin",o,s.plugins||[]),s}})));function ce(e){const t=e.split("node_modules"),o=t[0];if(t.length<2)return null;const r=t[1].split(l),s=r[1].startsWith("@")?r.slice(1,3).join(l):r[1];return p(o,"node_modules",s,"package.json")}const le=["react","react-native"],pe={errorMapFilePath:V.appErrorsJson};let me={rollup:(e,t)=>e};async function ue(e){const t=x(e.input.map((t=>function(e,t){return[e.format.includes("cjs")&&{...e,format:"cjs",env:"development",input:t},e.format.includes("cjs")&&{...e,format:"cjs",env:"production",input:t},e.format.includes("esm")&&{...e,format:"esm",input:t},e.format.includes("umd")&&{...e,format:"umd",env:"development",input:t},e.format.includes("umd")&&{...e,format:"umd",env:"production",input:t},e.format.includes("system")&&{...e,format:"system",env:"development",input:t},e.format.includes("system")&&{...e,format:"system",env:"production",input:t}].filter(Boolean)}(e,t).map(((e,t)=>({...e,writeMeta:0===t}))))));return await Promise.all(t.map((async(e,t)=>{const o=await async function(e,t){const o=await re({...pe,...e}),r=e.format.includes("es")||e.format.includes("esm"),s=void 0!==e.minify?e.minify:"production"===e.env||r;let n=["esm","cjs"].includes(e.format)?"":e.format,i="esm"===e.format?"mjs":"cjs";const l=[`${V.appDist}/${U(e.name)}`,n,e.env,s?"min":"",i].filter(Boolean).join("."),p=C.readConfigFile(e.tsconfig||V.tsconfigJson,C.sys.readFile).config,m=C.parseJsonConfigFileContent(p,C.sys,"./").options,u="production"===process.env.NODE_ENV,d=["esm"===e.format?".mjs":null,"cjs"===e.format?".cjs":null,".js"].filter(Boolean);return{input:e.input,external:e=>!e.startsWith("regenerator-runtime")&&(!!le.includes(e)||(e=>!e.startsWith(".")&&!a.isAbsolute(e))(e)),shimMissingExports:!0,treeshake:{propertyReadSideEffects:!1},output:{file:l,format:r?"es":e.format,freeze:!1,esModule:Boolean(m?.esModuleInterop)||r,name:e.name||L(e.name),sourcemap:!0,globals:{react:"React","react-native":"ReactNative","lodash-es":"lodashEs","lodash/fp":"lodashFp"},exports:"named"},plugins:[e.extractErrors&&{name:"Extract errors",async transform(e){try{await o(e)}catch(e){return null}return{code:e,map:null}}},$({modulesOnly:!0,browser:"node"!==e.target,extensions:[".jsx",".json",".node"]}),E({extensions:[".js",".cjs",".mjs"],esmExternals:!0,requireReturnsDefault:!0,transformMixedEsModules:!0,include:"umd"===e.format||r?/\/node_modules\//:/\/regenerator-runtime\//}),k(),{name:"Remove shebang",transform:e=>({code:e=e.replace(/^#!(.*)/,""),map:null})},F({typescript:C,tsconfig:e.tsconfig,tsconfigDefaults:{exclude:["**/*.spec.ts","**/*.test.ts","**/*.spec.tsx","**/*.test.tsx","node_modules","bower_components","jspm_packages",V.appDist],compilerOptions:{sourceMap:!0,declaration:!0,jsx:"react"}},tsconfigOverride:{compilerOptions:{module:"esnext",target:"esnext",...t>0?{declaration:!1,declarationMap:!1}:{}}},check:!e.transpileOnly&&0===t,useTsconfigDeclarationDir:Boolean(m?.declarationDir)}),e.legacy&&ae({exclude:"node_modules/**",extensions:[...v,"ts","tsx"],passPerPreset:!0,custom:{targets:{..."node"===e.target?{node:14}:{},esmodules:r},extractErrors:e.extractErrors,format:e.format},babelHelpers:"bundled"}),S(),s&&b({format:{keep_quoted_props:!0,comments:!1},compress:{keep_infinity:!0,pure_getters:!0,passes:10},ecma:e.legacy?5:2020,module:r,toplevel:"cjs"===e.format||r}),M({useLodashEs:r||void 0}),e.env&&{name:"Ensure default exports",renderChunk:async(e,t)=>({code:e.replace(/process\.env\.NODE_ENV(?!\s*=)/g,JSON.stringify(u?"production":"development")),map:null})},!e.legacy&&M({useLodashEs:r||void 0}),{name:"Resolve final runtime imports to files",renderChunk:async(t,o)=>{for(const r of o.imports){if(c(r))continue;let o=require.resolve(r);const s=c(o),n=o.replace(s,"");if("esm"===e.format||"cjs"===e.format)for(const e of d){const t=n+e;if(N(t)){o=t;break}}const i=ce(o);if(!i||!N(i))continue;const a=_(i,"utf-8"),l=JSON.parse(a);if(w.resolve(l,r))continue;const p=o.slice(o.indexOf(r)),m=new RegExp(`(from|require\\()\\s*['"]${r.replace(".","\\.")}['"]`,"g"),u=t.match(m)??[];for(const e of u){const o=e.replace(r,p);t=t.replace(e,o)}}return{code:t,map:null}}},{name:"Ensure default exports",renderChunk:async(e,t)=>t.exports.includes("default")||!r?null:{code:`${e}\nexport default {};`,map:null}}]}}(e,t);return me.rollup(o,e)})))}async function de(){return await y.ensureDir(V.progressEstimatorCache),q({storagePath:V.progressEstimatorCache})}N(V.appConfig)&&(me=require(V.appConfig));const fe={name:"basic",dependencies:["husky","export-ts","tslib","typescript","size-limit","@size-limit/preset-small-lib"],packageJson:{version:"0.1.0",license:"MIT",main:"./dist/index.cjs",module:"./dist/index.mjs",exports:{"./package.json":"./package.json",".":{import:"./dist/index.mjs",require:"./dist/index.cjs"}},typings:"dist/index.d.ts",files:["dist","src"],engines:{node:">=14"},scripts:{start:"export-ts watch",build:"export-ts build",test:"export-ts test",posttest:"node test/import.mjs && node test/require.cjs",lint:"export-ts lint",prepare:"export-ts build",size:"size-limit",analyze:"size-limit --why"},peerDependencies:{},husky:{hooks:{"pre-commit":"export-ts lint"}},prettier:{printWidth:80,semi:!0,singleQuote:!0,trailingComma:"es5"}}},ge={name:"react",dependencies:[...fe.dependencies,"@types/react","@types/react-dom","react","react-dom"],packageJson:{...fe.packageJson,peerDependencies:{react:">=16"},scripts:{...fe.packageJson.scripts,test:"export-ts test"}}},ye={basic:fe,react:ge,"react-with-storybook":{dependencies:[...ge.dependencies,"@babel/core","@storybook/addon-essentials","@storybook/addon-links","@storybook/addon-info","@storybook/addons","@storybook/react","react-is","babel-loader"],name:"react-with-storybook",packageJson:{...ge.packageJson,scripts:{...ge.packageJson.scripts,storybook:"start-storybook -p 6006","build-storybook":"build-storybook"}}}},he=e("export-ts");let xe;try{xe=JSON.parse(_(V.appPackageJson,"utf-8"))}catch(e){}const we=e=>z(e).then((e=>e.isDirectory())).catch((()=>!1)),be=e=>z(e).then((e=>e.isFile())).catch((()=>!1));async function je(e,o){let r=[];if(e)Array.isArray(e)?r.push(...e):r.push(e);else if(o){const e=Y(o);r.push(e)}else if(await we(Y("src"))){const e=await async function(e){const t=await be(Y("src/index.ts"))?".ts":await be(Y("src/index.tsx"))?".tsx":await be(Y("src/index.jsx"))?".jsx":".js";return Y(`src/index${t}`)}();r.push(e)}const s=r.map((async e=>await t(e)));return(await Promise.all(s)).flat()}async function ve(e){return{...e,name:e.name||xe.name,input:await je(e.entry,xe.source),format:e.format.split(",").map((e=>"es"===e?"esm":e))}}async function Ee(){const e=await de(),o=await t(`${V.appDist}/**/*.js`);await e(Promise.all(o.map((async e=>await y.unlink(e)))),"Removing original emitted TypeScript output (dist/**/*.js).")}async function ke(){await y.remove(V.appDist)}function $e(e){const t=`#!/usr/bin/env node\n\n'use strict';\nmodule.exports = require('./${U(e)}.production.min.cjs');\n`;return y.outputFile(a.join(V.appDist,"index.cjs"),t)}function Se(e){const t=`#!/usr/bin/env node\n\nexport { default } from './${e}.min.mjs';\nexport * from './${e}.min.mjs';\n`;return y.outputFile(a.join(V.appDist,"index.mjs"),t)}function Fe(e){u.exec(`npm config set init-author-name "${e}"`,{silent:!0})}he.command("create <pkg>").describe("Create a new package with ").example("create mypackage").option("--template",`Specify a template. Allowed choices: [${Object.keys(ye).join(", ")}]`).example("create --template react mypackage").action((async(e,t)=>{console.log(),Q(s.bgBlue("export-ts"),2),console.log();const o=d(`Creating ${s.bold.green(e)}...`);let r;try{const i=await y.realpath(process.cwd());let c=await async function t(r){if(!await y.pathExists(r))return r;o.fail(`Failed to create ${s.bold.red(e)}`);const n=new I({message:`A folder named ${s.bold.red(e)} already exists! ${s.bold("Choose a different name")}`,initial:e+"-1",result:e=>e.trim()});return e=await n.run(),r=await y.realpath(process.cwd())+"/"+e,o.start(`Creating ${s.bold.green(e)}...`),await t(r)}(i+"/"+e);const l=new T({message:"Choose a template",choices:Object.keys(ye)});t.template?(r=t.template.trim(),l.choices.includes(r)||(o.fail(`Invalid template ${s.bold.red(r)}`),r=await l.run())):r=await l.run(),o.start(),await y.copy(a.resolve(__dirname,`../templates/${r}`),c,{overwrite:!0}),await y.move(a.resolve(c,"./gitignore"),a.resolve(c,"./.gitignore"));let p=await y.readFile(a.resolve(c,"LICENSE"),{encoding:"utf-8"});p=p.replace(/<year>/,`${(new Date).getFullYear()}`);let m=function(){let e="";return e=u.exec("npm config get init-author-name",{silent:!0}).stdout.trim(),e||(e=u.exec("git config --global user.name",{silent:!0}).stdout.trim(),e?(Fe(e),e):(e=u.exec("npm config get init-author-email",{silent:!0}).stdout.trim(),e||(e=u.exec("git config --global user.email",{silent:!0}).stdout.trim(),e||e)))}();if(!m){o.stop();const e=new I({name:"author",message:"Who is the package author?"});m=await e.run(),Fe(m),o.start()}p=p.replace(/<author>/,m.trim()),await y.writeFile(a.resolve(c,"LICENSE"),p,{encoding:"utf-8"});const d=(e=>({name:t,author:o})=>({...e.packageJson,name:t,author:o,"size-limit":[{path:`dist/${t}.production.min.cjs`,limit:"10 KB"},{path:`dist/${t}.min.mjs`,limit:"10 KB"}]}))(ye[r]);process.chdir(c);const g=d({name:U(e),author:m}),h=function({engines:e}){return e&&e.node}(g);h&&!f.satisfies(process.version,h)&&(o.fail((n=h,`Unsupported Node version! Your current Node version (${s.red(process.version)}) does not satisfy the requirement of Node ${s.cyan(n)}.`)),process.exit(1)),await y.outputJSON(a.resolve(c,"package.json"),g),o.succeed(`Created ${s.bold.green(e)}`),await X(e)}catch(t){o.fail(`Failed to create ${s.bold.red(e)}`),A(t),process.exit(1)}var n;const i=ye[r],{dependencies:c}=i,l=d((p=c.sort(),`Installing dependencies:\n\n${p.map((e=>H(`${s.cyan(s.bold(e))}`,2))).join("\n")}\n\n`)).start();var p;try{const t=await K();await m(t,function(e,t){switch(e){case"npm":return["install",...t,"--save-dev"];case"yarn":return["add",...t,"--dev"]}}(t,c)),l.succeed("Installed dependencies"),Q("Initializing git repo."),await m("git",["init"]),console.log(await X(e))}catch(e){l.fail("Failed to install dependencies"),A(e),process.exit(1)}})),he.command("watch").describe("Rebuilds on any change").option("--entry, -i","Entry module").example("watch --entry src/foo.tsx").option("--target","Specify your target environment","browser").example("watch --target node").option("--name","Specify name exposed in UMD builds").example("watch --name Foo").option("--format","Specify module format(s)","cjs,esm").example("watch --format cjs,esm").option("--verbose","Keep outdated console output in watch mode instead of clearing the screen").example("watch --verbose").option("--noClean","Don't clean the dist folder").example("watch --noClean").option("--tsconfig","Specify custom tsconfig path").example("watch --tsconfig ./tsconfig.foo.json").option("--onFirstSuccess","Run a command on the first successful build").example('watch --onFirstSuccess "echo The first successful build!"').option("--onSuccess","Run a command on a successful build").example('watch --onSuccess "echo Successful build!"').option("--onFailure","Run a command on a failed build").example('watch --onFailure "The build failed!"').option("--transpileOnly","Skip type checking").example("watch --transpileOnly").option("--extractErrors","Extract invariant errors to ./errors/codes.json.").example("watch --extractErrors").action((async e=>{const t=await ve(e),r=await ue(t);t.noClean||await ke(),t.format.includes("cjs")&&await $e(t.name),t.format.includes("esm")&&await Se(t.name),await Ee();let n=!0,i=null,a=null;function c(e){if(!e)return null;const[t,...o]=e.split(" ");return m(t,o,{stdio:"inherit"})}const l=d().start();o(r.map((e=>({watch:{silent:!0,include:["src/**"],exclude:["node_modules/**"]},...e})))).on("event",(async e=>{if(await Promise.all([i?i.kill("SIGTERM"):null,a?a.kill("SIGTERM"):null]),"START"===e.code&&(t.verbose||process.stdout.write("win32"===process.platform?"[2J[0f":"[2J[3J[H"),l.start(s.bold.cyan("Compiling modules..."))),"ERROR"===e.code&&(l.fail(s.bold.red("Failed to compile")),A(e.error),a=c(t.onFailure)),"END"===e.code){l.succeed(s.bold.green("Compiled successfully")),console.log(`\n  ${s.dim("Watching for changes")}\n`);try{await async function(){const e=V.appDist+"/src";await g.pathExists(e)&&(console.warn('[export-ts]: Your rootDir is currently set to "./". Please change your rootDir to "./src".\nexport-ts has deprecated setting tsconfig.compilerOptions.rootDir to "./" as it caused buggy output for declarationMaps and more.\nYou may also need to change your include to remove "test", which also caused declarations to be unnecessarily created for test files.'),await g.copy(e,V.appDist,{overwrite:!0}),await g.remove(e))}(),n&&t.onFirstSuccess?(n=!1,c(t.onFirstSuccess)):i=c(t.onSuccess)}catch(e){}}}))})),he.command("build").describe("Build your project once and exit").option("--entry, -i","Entry module").example("build --entry src/foo.tsx").option("--target","Specify your target environment","browser").example("build --target node").option("--name","Specify name exposed in UMD builds").example("build --name Foo").option("--format","Specify module format(s)","cjs,esm").example("build --format cjs,esm").option("--legacy","Babel transpile and emit ES5.").example("build --legacy").option("--tsconfig","Specify custom tsconfig path").example("build --tsconfig ./tsconfig.foo.json").option("--transpileOnly","Skip type checking").example("build --transpileOnly").option("--extractErrors","Extract errors to ./errors/codes.json and provide a url for decoding.").example("build --extractErrors=https://reactjs.org/docs/error-decoder.html?invariant=").action((async e=>{const t=await ve(e),o=await ue(t),s=await de();await s(ke(),"Cleaning dist/."),t.format.includes("cjs")&&await s($e(t.name).catch(A),"Creating CJS entry file"),t.format.includes("esm")&&await s(Se(t.name).catch(A),"Creating MJS entry file");try{await s(Promise.all(o.map((async e=>{const t=await r(e);await t.write(e.output)}))),"TS ➡ JS: Transpiling TS to JS"),await Ee()}catch(e){A(e),process.exit(1)}})),he.command("test").describe("Run jest test runner. Passes through all flags directly to Jest").action((async e=>{process.env.BABEL_ENV="test",process.env.NODE_ENV="test",process.on("unhandledRejection",(e=>{throw e}));const t=process.argv.slice(2);let o={...(r=e.config?a.dirname(e.config):V.appRoot,{transform:{".(ts|tsx)$":require.resolve("ts-jest/dist"),".(js|jsx)$":require.resolve("babel-jest")},transformIgnorePatterns:["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],moduleFileExtensions:["ts","tsx","js","jsx","json","node"],collectCoverageFrom:["src/**/*.{ts,tsx,js,jsx}"],testMatch:["<rootDir>/**/*.(spec|test).{ts,tsx,js,jsx}"],testURL:"http://localhost",rootDir:r,watchPlugins:[require.resolve("jest-watch-typeahead/filename"),require.resolve("jest-watch-typeahead/testname")]}),...xe.jest};var r;const s=await y.pathExists(V.jestConfig);if(e.config||s){const t=Y(e.config||V.jestConfig),r=require(t);o={...o,...r}}if(e.config){let e=t.indexOf("--config");if(-1!==e)t.splice(e,2);else{const o=/--config=.+/;e=t.findIndex((e=>e.match(o))),-1!==e&&t.splice(e,1)}}t.push("--config",JSON.stringify({...o}));const[,...i]=t;n.run(i)})),he.command("lint").describe("Run eslint with Prettier").example("lint src test").option("--fix","Fixes fixable errors and warnings").example("lint src test --fix").option("--ignore-pattern","Ignore a pattern").example("lint src test --ignore-pattern test/foobar.ts").option("--max-warnings","Exits with non-zero error code if number of warnings exceed this number",Infinity).example("lint src test --max-warnings 10").option("--write-file","Write the config file locally").example("lint --write-file").option("--report-file","Write JSON report to file locally").example("lint --report-file eslint-report.json").action((async e=>{if(0===e._.length&&!e["write-file"]){const t=["src","test"].filter(y.existsSync);e._=t,console.log(s.yellow(`Defaulting to "export-ts lint ${t.join(" ")}"`,'\nYou can override this in the package.json scripts, like "lint": "export-ts lint src otherDir"'))}const t=await async function({pkg:e,rootDir:t,writeFile:o}){const r={extends:["react-app","prettier/@typescript-eslint","plugin:prettier/recommended"],settings:{react:{version:Boolean(function({dependencies:e,devDependencies:t}){return e&&e.react||t&&t.react}(e))?"detect":"999.999.999"}}};if(!o)return r;const s=a.join(t,".eslintrc.js");try{await y.writeFile(s,`module.exports = ${JSON.stringify(r,null,2)}`,{flag:"wx"})}catch(e){return"EEXIST"===e.code?console.error("Error trying to save the Eslint configuration file:",`${s} already exists.`):console.error(e),r}}({pkg:xe,rootDir:V.appRoot,writeFile:e["write-file"]}),o=new i({baseConfig:{...t,...xe.eslint},extensions:[".ts",".tsx",".js",".jsx"],fix:e.fix,ignorePattern:e["ignore-pattern"]}),r=o.executeOnFiles(e._);e.fix&&i.outputFixes(r),console.log(o.getFormatter()(r.results)),e["report-file"]&&await y.outputFile(e["report-file"],o.getFormatter("json")(r.results)),r.errorCount&&process.exit(1),r.warningCount>e["max-warnings"]&&process.exit(1)})),he.parse(process.argv);export{we as isDir,be as isFile};
export default {};
//# sourceMappingURL=export-ts.min.mjs.map
