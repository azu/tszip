{"version":3,"file":"index.mjs","sources":["../src/logError.ts","../src/utils.ts","../src/constants.ts","../src/getInstallCmd.ts","../src/messages.ts","../src/errors/invertObject.ts","../src/errors/evalToString.ts","../src/errors/extractErrors.ts","../src/babelPluginExportTs.ts","../src/createRollupConfig.ts","../src/createBuildConfigs.ts","../src/createJestConfig.ts","../src/createProgressEstimator.ts","../src/templates/basic.ts","../src/templates/react.ts","../src/templates/index.ts","../src/templates/react-with-storybook.ts","../src/index.ts","../src/templates/utils/index.ts","../src/utils/log.ts","../src/getInstallArgs.ts","../src/deprecated.ts","../src/plugins/simple-ts.ts","../src/createEslintConfig.ts"],"sourcesContent":["import chalk from 'chalk';\n\nconst stderr = console.error.bind(console);\n\nexport default function logError(err: any) {\n  const error = err.error || err;\n  const description = `${error.name ? error.name + ': ' : ''}${\n    error.message || error\n  }`;\n  const message = error.plugin\n    ? error.plugin === 'rpt2'\n      ? `(typescript) ${description}`\n      : `(${error.plugin} plugin) ${description}`\n    : description;\n\n  stderr(chalk.bold.red(message));\n\n  if (error.loc) {\n    stderr();\n    stderr(`at ${error.loc.file}:${error.loc.line}:${error.loc.column}`);\n  }\n\n  if (error.frame) {\n    stderr();\n    stderr(chalk.dim(error.frame));\n  } else if (err.stack) {\n    const headlessStack = error.stack.replace(message, '');\n    stderr(chalk.dim(headlessStack));\n  }\n\n  stderr();\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport camelCase from 'camelcase';\n\nimport { PackageJson } from './types';\n\n// Remove the package name scope if it exists\nexport const removeScope = (name: string) => name.replace(/^@.*\\//, '');\n\n// UMD-safe package name\nexport const safeVariableName = (name: string) =>\n  camelCase(\n    removeScope(name)\n      .toLowerCase()\n      .replace(/((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '')\n  );\n\nexport const safePackageName = (name: string) =>\n  name\n    .toLowerCase()\n    .replace(/(^@.*\\/)|((^[^a-zA-Z]+)|[^\\w.-])|([^a-zA-Z0-9]+$)/g, '');\n\nexport const external = (id: string) =>\n  !id.startsWith('.') && !path.isAbsolute(id);\n\n// Make sure any symlinks in the project folder are resolved:\n// https://github.com/facebookincubator/create-react-app/issues/637\nexport const appDirectory = fs.realpathSync(process.cwd());\nexport const resolveApp = function (relativePath: string) {\n  return path.resolve(appDirectory, relativePath);\n};\n\n// Taken from Create React App, react-dev-utils/clearConsole\n// @see https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/clearConsole.js\nexport function clearConsole() {\n  process.stdout.write(\n    process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H'\n  );\n}\n\nexport function getReactVersion({\n  dependencies,\n  devDependencies,\n}: PackageJson) {\n  return (\n    (dependencies && dependencies.react) ||\n    (devDependencies && devDependencies.react)\n  );\n}\n\nexport function getNodeEngineRequirement({ engines }: PackageJson) {\n  return engines && engines.node;\n}\n","import { resolveApp } from './utils';\n\nexport const paths = {\n  appPackageJson: resolveApp('package.json'),\n  tsconfigJson: resolveApp('tsconfig.json'),\n  testsSetup: resolveApp('test/setupTests.ts'),\n  appRoot: resolveApp('.'),\n  appSrc: resolveApp('src'),\n  appErrorsJson: resolveApp('errors/codes.json'),\n  appErrors: resolveApp('errors'),\n  appDist: resolveApp('dist'),\n  appConfig: resolveApp('export-ts.config.js'),\n  jestConfig: resolveApp('jest.config.js'),\n  progressEstimatorCache: resolveApp('node_modules/.cache/.progress-estimator'),\n};\n","import execa from 'execa';\n\nlet cmd: InstallCommand;\n\nexport type InstallCommand = 'yarn' | 'npm';\n\nexport default async function getInstallCmd(): Promise<InstallCommand> {\n  if (cmd) {\n    return cmd;\n  }\n\n  try {\n    await execa('yarnpkg', ['--version']);\n    cmd = 'yarn';\n  } catch (e) {\n    cmd = 'npm';\n  }\n\n  return cmd;\n}\n","import chalk from 'chalk';\nimport getInstallCmd from './getInstallCmd';\nimport * as Output from './output';\nimport { indentString } from './utils/log';\n\n// This was copied from Razzle. Lots of unused stuff.\nconst program = {\n  name: 'export-ts',\n};\n\nexport const help = function () {\n  return `\n    Only ${chalk.green('<project-directory>')} is required.\n    If you have any problems, do not hesitate to file an issue:\n    ${chalk.cyan('https://github.com/ctjlewis/export-ts/issues/new')}\n  `;\n};\n\nexport const missingProjectName = function () {\n  return `\nPlease specify the project directory:\n  ${chalk.cyan(program.name)} ${chalk.green('<project-directory>')}\nFor example:\n  ${chalk.cyan(program.name)} ${chalk.green('my-export-ts-lib')}\nRun ${chalk.cyan(`${program.name} --help`)} to see all options.\n`;\n};\n\nexport const alreadyExists = function (projectName: string) {\n  return indentString(\n    `Uh oh! Looks like there's already a directory called ${chalk.red(\n      projectName\n    )}. Please try a different name or delete that folder.`\n  );\n};\n\nexport const installing = function (packages: string[]) {\n  const pkgText = packages\n    .map((pkg) => indentString(`${chalk.cyan(chalk.bold(pkg))}`, 2))\n    .join('\\n');\n\n  return `Installing dependencies:\\n\\n${pkgText}\\n\\n`;\n};\n\nexport const installError = function (packages: string[]) {\n  const pkgText = packages\n    .map(function (pkg) {\n      return `${chalk.cyan(chalk.bold(pkg))}`;\n    })\n    .join(', ');\n\n  Output.error(`Failed to install ${pkgText}, try again.`);\n};\n\nexport const copying = function (projectName: string) {\n  return `Creating ${chalk.bold(chalk.green(projectName))}...`;\n};\n\nexport const start = async function (projectName: string) {\n  const cmd = await getInstallCmd();\n\n  const commands = {\n    install: cmd === 'npm' ? 'npm install' : 'yarn install',\n    build: cmd === 'npm' ? 'npm run build' : 'yarn build',\n    start: cmd === 'npm' ? 'npm run start' : 'yarn start',\n    test: cmd === 'npm' ? 'npm test' : 'yarn test',\n  };\n\n  return `\n  ${chalk.green('Awesome!')} You're now ready to start coding.\n  \n  I already ran ${Output.cmd(commands.install)} for you, so your next steps are:\n    ${Output.cmd(`cd ${projectName}`)}\n  \n  To start developing (rebuilds on changes):\n    ${Output.cmd(commands.start)}\n  \n  To build for production:\n    ${Output.cmd(commands.build)}\n\n  To test your library with Jest:\n    ${Output.cmd(commands.test)}\n    \n  Questions? Feedback? Please let me know!\n  ${chalk.green('https://github.com/ctjlewis/export-ts/issues')}\n`;\n};\n\nexport const incorrectNodeVersion = function (requiredVersion: string) {\n  return `Unsupported Node version! Your current Node version (${chalk.red(\n    process.version\n  )}) does not satisfy the requirement of Node ${chalk.cyan(requiredVersion)}.`;\n};\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/invertObject.js\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * turns\n *   { 'MUCH ERROR': '0', 'SUCH WRONG': '1' }\n * into\n *   { 0: 'MUCH ERROR', 1: 'SUCH WRONG' }\n */\n\ntype Dict = { [key: string]: any };\n\nexport function invertObject(targetObj: Dict) {\n  const result: Dict = {};\n  const mapKeys = Object.keys(targetObj);\n\n  for (const originalKey of mapKeys) {\n    const originalVal = targetObj[originalKey];\n\n    result[originalVal] = originalKey;\n  }\n\n  return result;\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/shared/evalToString.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport function evalToString(ast: any): string {\n  switch (ast.type) {\n    case 'StringLiteral':\n    case 'Literal': // ESLint\n      return ast.value;\n    case 'BinaryExpression': // `+`\n      if (ast.operator !== '+') {\n        throw new Error('Unsupported binary operator ' + ast.operator);\n      }\n      return evalToString(ast.left) + evalToString(ast.right);\n    default:\n      throw new Error('Unsupported type ' + ast.type);\n  }\n}\n","// largely borrowed from https://github.com/facebook/react/blob/8b2d3783e58d1acea53428a10d2035a8399060fe/scripts/error-codes/extract-errors.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs-extra';\nimport { parse, ParserOptions } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport { invertObject } from './invertObject';\nimport { evalToString } from './evalToString';\nimport { paths } from '../constants';\nimport { safeVariableName } from '../utils';\nimport { pascalCase } from 'pascal-case';\n\nconst babelParserOptions: ParserOptions = {\n  sourceType: 'module',\n  // As a parser, @babel/parser has its own options and we can't directly\n  // import/require a babel preset. It should be kept **the same** as\n  // the `babel-plugin-syntax-*` ones specified in\n  // https://github.com/facebook/fbjs/blob/master/packages/babel-preset-fbjs/configure.js\n  plugins: [\n    'classProperties',\n    'flow',\n    'jsx',\n    'trailingFunctionCommas',\n    'objectRestSpread',\n  ],\n} as ParserOptions; // workaround for trailingFunctionCommas syntax\n\nexport async function extractErrors(opts: any) {\n  if (!opts || !opts.errorMapFilePath) {\n    throw new Error(\n      'Missing options. Ensure you pass an object with `errorMapFilePath`.'\n    );\n  }\n\n  if (!opts.name || !opts.name) {\n    throw new Error(\n      'Missing options. Ensure you pass --name flag to export-ts'\n    );\n  }\n\n  const errorMapFilePath = opts.errorMapFilePath;\n  let existingErrorMap: any;\n  try {\n    /**\n     * Using `fs.readFile` instead of `require` here, because `require()` calls\n     * are cached, and the cache map is not properly invalidated after file\n     * changes.\n     */\n    const fileContents = await fs.readFile(errorMapFilePath, 'utf-8');\n    existingErrorMap = JSON.parse(fileContents);\n  } catch (e) {\n    existingErrorMap = {};\n  }\n\n  const allErrorIDs = Object.keys(existingErrorMap);\n  let currentID: any;\n\n  if (allErrorIDs.length === 0) {\n    // Map is empty\n    currentID = 0;\n  } else {\n    currentID = Math.max.apply(null, allErrorIDs as any) + 1;\n  }\n\n  // Here we invert the map object in memory for faster error code lookup\n  existingErrorMap = invertObject(existingErrorMap);\n\n  function transform(source: string) {\n    const ast = parse(source, babelParserOptions);\n\n    traverse(ast, {\n      CallExpression: {\n        exit(astPath: any) {\n          if (astPath.get('callee').isIdentifier({ name: 'invariant' })) {\n            const node = astPath.node;\n\n            // error messages can be concatenated (`+`) at runtime, so here's a\n            // trivial partial evaluator that interprets the literal value\n            const errorMsgLiteral = evalToString(node.arguments[1]);\n            addToErrorMap(errorMsgLiteral);\n          }\n        },\n      },\n    });\n  }\n\n  function addToErrorMap(errorMsgLiteral: any) {\n    if (existingErrorMap.hasOwnProperty(errorMsgLiteral)) {\n      return;\n    }\n    existingErrorMap[errorMsgLiteral] = '' + currentID++;\n  }\n\n  async function flush() {\n    const prettyName = pascalCase(safeVariableName(opts.name));\n    // Ensure that the ./src/errors directory exists or create it\n    await fs.ensureDir(paths.appErrors);\n\n    // Output messages to ./errors/codes.json\n    await fs.writeFile(\n      errorMapFilePath,\n      JSON.stringify(invertObject(existingErrorMap), null, 2) + '\\n',\n      'utf-8'\n    );\n\n    // Write the error files, unless they already exist\n    await fs.writeFile(\n      paths.appErrors + '/ErrorDev.js',\n      `\nfunction ErrorDev(message) {\n  const error = new Error(message);\n  error.name = 'Invariant Violation';\n  return error;\n}\n\nexport default ErrorDev;\n      `,\n      'utf-8'\n    );\n\n    await fs.writeFile(\n      paths.appErrors + '/ErrorProd.js',\n      `\nfunction ErrorProd(code) {\n  // TODO: replace this URL with yours\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return new Error(\n    \\`Minified ${prettyName} error #$\\{code}; visit $\\{url} for the full message or \\` +\n      'use the non-minified dev environment for full errors and additional ' +\n      'helpful warnings. '\n  );\n}\n\nexport default ErrorProd;\n`,\n      'utf-8'\n    );\n  }\n\n  return async function extractErrors(source: any) {\n    transform(source);\n    await flush();\n  };\n}\n","/**\n * @todo Do not use require.resolve so that the package can ship as ESM.\n */\n\nimport { createConfigItem } from '@babel/core';\nimport { createBabelInputPluginFactory } from '@rollup/plugin-babel';\nimport merge from 'lodash.merge';\n\nexport const isTruthy = (obj?: any) => {\n  if (!obj) {\n    return false;\n  }\n\n  return obj.constructor !== Object || Object.keys(obj).length > 0;\n};\n\n// replace lodash with lodash-es, but not lodash/fp\nconst replacements = [{ original: 'lodash(?!/fp)', replacement: 'lodash-es' }];\n\nexport const mergeConfigItems = (type: any, ...configItemsToMerge: any[]) => {\n  const mergedItems: any[] = [];\n\n  configItemsToMerge.forEach((configItemToMerge) => {\n    configItemToMerge.forEach((item: any) => {\n      const itemToMergeWithIndex = mergedItems.findIndex(\n        (mergedItem) => mergedItem.file.resolved === item.file.resolved\n      );\n\n      if (itemToMergeWithIndex === -1) {\n        mergedItems.push(item);\n        return;\n      }\n\n      mergedItems[itemToMergeWithIndex] = createConfigItem(\n        [\n          mergedItems[itemToMergeWithIndex].file.resolved,\n          merge(mergedItems[itemToMergeWithIndex].options, item.options),\n        ],\n        {\n          type,\n        }\n      );\n    });\n  });\n\n  return mergedItems;\n};\n\nexport const createConfigItems = (type: any, items: any[]) => {\n  return items.map(({ name, ...options }) => {\n    return createConfigItem([require.resolve(name), options], { type });\n  });\n};\n\nexport const babelPluginExportTs = createBabelInputPluginFactory(() => ({\n  // Passed the plugin options.\n  options({ custom: customOptions, ...pluginOptions }: any) {\n    return {\n      // Pull out any custom options that the plugin might have.\n      customOptions,\n\n      // Pass the options back with the two custom options removed.\n      pluginOptions,\n    };\n  },\n  config(config: any, { customOptions }: any) {\n    const defaultPlugins = createConfigItems(\n      'plugin',\n      [\n        // {\n        //   name: '@babel/plugin-transform-react-jsx',\n        //   pragma: customOptions.jsx || 'h',\n        //   pragmaFrag: customOptions.jsxFragment || 'Fragment',\n        // },\n        { name: 'babel-plugin-macros' },\n        { name: 'babel-plugin-annotate-pure-calls' },\n        { name: 'babel-plugin-dev-expression' },\n        customOptions.format !== 'cjs' && {\n          name: 'babel-plugin-transform-rename-import',\n          replacements,\n        },\n        {\n          name: 'babel-plugin-polyfill-regenerator',\n          // don't pollute global env as this is being used in a library\n          method: 'usage-pure',\n        },\n        {\n          name: '@babel/plugin-proposal-class-properties',\n          loose: true,\n        },\n        isTruthy(customOptions.extractErrors) && {\n          name: './errors/transformErrorMessages',\n        },\n      ].filter(Boolean)\n    );\n\n    const babelOptions = config.options || {};\n    babelOptions.presets = babelOptions.presets || [];\n\n    const presetEnvIdx = babelOptions.presets.findIndex((preset: any) =>\n      preset.file.request.includes('@babel/preset-env')\n    );\n\n    // if they use preset-env, merge their options with ours\n    if (presetEnvIdx !== -1) {\n      const presetEnv = babelOptions.presets[presetEnvIdx];\n      babelOptions.presets[presetEnvIdx] = createConfigItem(\n        [\n          presetEnv.file.resolved,\n          merge(\n            {\n              loose: true,\n              targets: customOptions.targets,\n            },\n            presetEnv.options,\n            {\n              modules: false,\n            }\n          ),\n        ],\n        {\n          type: `preset`,\n        }\n      );\n    } else {\n      // if no preset-env, add it & merge with their presets\n      const defaultPresets = createConfigItems('preset', [\n        {\n          name: '@babel/preset-env',\n          targets: customOptions.targets,\n          modules: false,\n          loose: true,\n        },\n      ]);\n\n      babelOptions.presets = mergeConfigItems(\n        'preset',\n        defaultPresets,\n        babelOptions.presets\n      );\n    }\n\n    // Merge babelrc & our plugins together\n    babelOptions.plugins = mergeConfigItems(\n      'plugin',\n      defaultPlugins,\n      babelOptions.plugins || []\n    );\n\n    return babelOptions;\n  },\n}));\n","import resolveExports from 'resolve.exports';\n\nimport { safeVariableName, safePackageName, external } from './utils';\nimport { paths } from './constants';\nimport { RollupOptions } from 'rollup';\nimport { terser } from 'rollup-plugin-terser';\nimport { DEFAULT_EXTENSIONS as DEFAULT_BABEL_EXTENSIONS } from '@babel/core';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\n// import replace from '@rollup/plugin-replace';\nimport resolvePlugin from '@rollup/plugin-node-resolve';\nimport sourceMaps from 'rollup-plugin-sourcemaps';\nimport typescript from 'rollup-plugin-typescript2';\nimport ts from 'typescript';\n\nimport { extractErrors } from './errors/extractErrors';\nimport { babelPluginExportTs } from './babelPluginExportTs';\nimport { ExportTsOptions } from './types';\nimport { optimizeLodashImports } from '@optimize-lodash/rollup-plugin';\nimport { extname, resolve, sep } from 'path';\nimport { existsSync, readFileSync } from 'fs';\n\n/**\n * A crude RegExp to match the `from 'import-source'` part of import statements,\n * or a require(...) call.\n */\nconst generateImportPattern = (importSource: string) =>\n  new RegExp(\n    `(from|require\\\\()\\\\s*['\"]${importSource.replace('.', '\\\\.')}['\"]`,\n    'g'\n  );\n\n/**\n * Get the package.json for a given absolute entry point.\n */\nfunction getPackageJson(absPath: string) {\n  const parts = absPath.split('node_modules');\n  const rootPath = parts[0];\n\n  if (parts.length < 2) return null;\n  const moduleParts = parts[1].split(sep);\n\n  /**\n   * node_modules/name => name\n   * node_modules/@test/test => @test/test\n   */\n  const moduleName = moduleParts[1].startsWith('@')\n    ? moduleParts.slice(1, 3).join(sep)\n    : moduleParts[1];\n\n  return resolve(rootPath, 'node_modules', moduleName, 'package.json');\n}\n\n/**\n * These packages will not be resolved by Rollup and will be left as imports.\n */\nconst EXTERNAL_PACKAGES = ['react', 'react-native'];\n\nconst errorCodeOpts = {\n  errorMapFilePath: paths.appErrorsJson,\n};\n\nexport async function createRollupConfig(\n  opts: ExportTsOptions,\n  outputNum: number\n): Promise<RollupOptions> {\n  const findAndRecordErrorCodes = await extractErrors({\n    ...errorCodeOpts,\n    ...opts,\n  });\n\n  const isEsm = opts.format.includes('es') || opts.format.includes('esm');\n\n  const shouldMinify =\n    opts.minify !== undefined\n      ? opts.minify\n      : opts.env === 'production' || isEsm;\n\n  let formatString = ['esm', 'cjs'].includes(opts.format) ? '' : opts.format;\n  let fileExtension = opts.format === 'esm' ? 'mjs' : 'cjs';\n\n  const outputName = [\n    `${paths.appDist}/${safePackageName(opts.name)}`,\n    formatString,\n    opts.env,\n    shouldMinify ? 'min' : '',\n    fileExtension,\n  ]\n    .filter(Boolean)\n    .join('.');\n\n  const tsconfigPath = opts.tsconfig || paths.tsconfigJson;\n  // borrowed from https://github.com/facebook/create-react-app/pull/7248\n  const tsconfigJSON = ts.readConfigFile(tsconfigPath, ts.sys.readFile).config;\n  // borrowed from https://github.com/ezolenko/rollup-plugin-typescript2/blob/42173460541b0c444326bf14f2c8c27269c4cb11/src/parse-tsconfig.ts#L48\n  const tsCompilerOptions = ts.parseJsonConfigFileContent(\n    tsconfigJSON,\n    ts.sys,\n    './'\n  ).options;\n\n  const PRODUCTION = process.env.NODE_ENV === 'production';\n\n  const fileExtensions = [\n    opts.format === 'esm' ? '.mjs' : null,\n    opts.format === 'cjs' ? '.cjs' : null,\n    '.js',\n  ].filter(Boolean);\n\n  const inputWithoutExtension = opts.input.replace(extname(opts.input), '');\n\n  return {\n    // Tell Rollup the entry point to the package\n    input: opts.input,\n    // Tell Rollup which packages to ignore\n    external: (id: string) => {\n      // bundle in polyfills as TSDX can't (yet) ensure they're installed as deps\n      if (id.startsWith('regenerator-runtime')) {\n        return false;\n      }\n\n      if (EXTERNAL_PACKAGES.includes(id)) {\n        return true;\n      }\n\n      return external(id);\n    },\n    // Minimize runtime error surface as much as possible\n    shimMissingExports: true,\n    // Rollup has treeshaking by default, but we can optimize it further...\n    treeshake: {\n      // We assume reading a property of an object never has side-effects.\n      // This means tsdx WILL remove getters and setters defined directly on objects.\n      // Any getters or setters defined on classes will not be effected.\n      //\n      // @example\n      //\n      // const foo = {\n      //  get bar() {\n      //    console.log('effect');\n      //    return 'bar';\n      //  }\n      // }\n      //\n      // const result = foo.bar;\n      // const illegalAccess = foo.quux.tooDeep;\n      //\n      // Punchline....Don't use getters and setters\n      propertyReadSideEffects: false,\n    },\n    // Establish Rollup output\n    output: {\n      // Set filenames of the consumer's package\n      file: `${inputWithoutExtension}.${opts.format === 'esm' ? 'mjs' : 'cjs'}`,\n      // Pass through the file format\n      format: isEsm ? 'es' : opts.format,\n      // Do not let Rollup call Object.freeze() on namespace import objects\n      // (i.e. import * as namespaceImportObject from...) that are accessed dynamically.\n      freeze: false,\n      // Respect tsconfig esModuleInterop when setting __esModule.\n      esModule: Boolean(tsCompilerOptions?.esModuleInterop) || isEsm,\n      name: opts.name || safeVariableName(opts.name),\n      sourcemap: true,\n      globals: {\n        react: 'React',\n        'react-native': 'ReactNative',\n        'lodash-es': 'lodashEs',\n        'lodash/fp': 'lodashFp',\n      },\n      exports: 'named',\n    },\n    plugins: [\n      /**\n       * Extract errors to `errors/` dir if --extractErrors passed.\n       */\n      opts.extractErrors && {\n        name: 'Extract errors',\n        async transform(code: string) {\n          try {\n            await findAndRecordErrorCodes(code);\n          } catch (e) {\n            return null;\n          }\n          return { code, map: null };\n        },\n      },\n      /**\n       * Resolve only non-JS. Leave regular imports alone, since packages will\n       * ship with dependencies.\n       */\n      resolvePlugin({\n        /**\n         * Do not allow CJS imports.\n         */\n        modulesOnly: true,\n        /**\n         * For node output, do not resolve `browser` field.\n         */\n        browser: opts.target !== 'node',\n        /**\n         * Resolve JSX, JSON, and .node files.\n         */\n        extensions: ['.jsx', '.json', '.node'],\n      }),\n      /**\n       * All bundled external modules need to be converted from CJS to ESM.\n       */\n      commonjs({\n        /**\n         * CJS/ESM interop. Support Node's .cjs and .mjs spec.\n         */\n        extensions: ['.js', '.cjs', '.mjs'],\n        /**\n         * Allow require('my-package') === await import('my-package').\n         *\n         * The `modulesOnly` option of @rollup/plugin-node-resolve ensures that\n         * the compiler will throw if there is an issue\n         */\n        esmExternals: true,\n        requireReturnsDefault: true,\n        /**\n         * Turn `require` statements into `import` statements in ESM out.\n         */\n        transformMixedEsModules: true,\n        /**\n         * Use Regex to make sure to include eventual hoisted packages.\n         */\n        include:\n          opts.format === 'umd' || isEsm\n            ? /\\/node_modules\\//\n            : /\\/regenerator-runtime\\//,\n      }),\n      /**\n       * Convert JSON to ESM.\n       */\n      json(),\n      /**\n       * Custom plugin that removes shebang from code because newer versions of\n       * bublé bundle their own private version of `acorn` and we can't find a\n       * way to patch in the option `allowHashBang` to acorn. Taken from\n       * microbundle.\n       *\n       * @see https://github.com/Rich-Harris/buble/pull/165\n       */\n      {\n        name: 'Remove shebang',\n        transform(code: string) {\n          let reg = /^#!(.*)/;\n          code = code.replace(reg, '');\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      /**\n       * Run TSC and transpile TypeScript.\n       */\n      // typescript({\n      //   typescript: ts,\n      //   tsconfig: opts.tsconfig,\n      //   tsconfigDefaults: {\n      //     exclude: [\n      //       // all TS test files, regardless whether co-located or in test/ etc\n      //       '**/*.spec.ts',\n      //       '**/*.test.ts',\n      //       '**/*.spec.tsx',\n      //       '**/*.test.tsx',\n      //       // TS defaults below\n      //       'node_modules',\n      //       'bower_components',\n      //       'jspm_packages',\n      //       paths.appDist,\n      //     ],\n      //     compilerOptions: {\n      //       sourceMap: true,\n      //       declaration: true,\n      //       jsx: 'react',\n      //     },\n      //   },\n      //   tsconfigOverride: {\n      //     compilerOptions: {\n      //       // TS -> esnext, then leave the rest to babel-preset-env\n      //       module: 'esnext',\n      //       target: 'esnext',\n      //       // don't output declarations more than once\n      //       ...(outputNum > 0\n      //         ? { declaration: false, declarationMap: false }\n      //         : {}),\n      //     },\n      //   },\n      //   check: !opts.transpileOnly && outputNum === 0,\n      //   useTsconfigDeclarationDir: Boolean(tsCompilerOptions?.declarationDir),\n      // }),\n      /**\n       * In --legacy mode, use Babel to transpile to ES5.\n       */\n      opts.legacy &&\n        babelPluginExportTs({\n          exclude: 'node_modules/**',\n          extensions: [...DEFAULT_BABEL_EXTENSIONS, 'ts', 'tsx'],\n          passPerPreset: true,\n          custom: {\n            targets: {\n              ...(opts.target === 'node' ? { node: 14 } : {}),\n              esmodules: isEsm,\n            },\n            extractErrors: opts.extractErrors,\n            format: opts.format,\n          },\n          babelHelpers: 'bundled',\n        }),\n      sourceMaps(),\n      /**\n       * Minify and compress with Terser for max DCE. Emit latest featureset.\n       *\n       * This is called before @rollup/replace-plugin to minimize the emitted\n       * code it would need to search.\n       */\n      shouldMinify &&\n        terser({\n          format: {\n            keep_quoted_props: true,\n            comments: false,\n          },\n          compress: {\n            keep_infinity: true,\n            pure_getters: true,\n            passes: 10,\n          },\n          ecma: opts.legacy ? 5 : 2020,\n          module: isEsm,\n          toplevel: opts.format === 'cjs' || isEsm,\n        }),\n      optimizeLodashImports({\n        useLodashEs: isEsm || undefined,\n      }),\n      /**\n       * Replace process.env.NODE_ENV variable, preventing assignment.\n       */\n      opts.env && {\n        name: 'Ensure default exports',\n        renderChunk: async (code: string, _: any) => {\n          return {\n            code: code.replace(\n              /process\\.env\\.NODE_ENV(?!\\s*=)/g,\n              JSON.stringify(PRODUCTION ? 'production' : 'development')\n            ),\n            map: null,\n          };\n        },\n      },\n      // opts.env &&\n      //   replace({\n      //     preventAssignment: true,\n      //     'process.env.NODE_ENV': JSON.stringify(\n      //       PRODUCTION ? 'production' : 'development'\n      //     ),\n      //   }),\n      /**\n       * If not in --legacy mode, ensure lodash imports are optimized in the\n       * final bundle.\n       */\n      !opts.legacy &&\n        optimizeLodashImports({\n          useLodashEs: isEsm || undefined,\n        }),\n      /**\n       * Resolve every relative import in output to their entry points.\n       *\n       * TypeScript loves to leave things like `import { jsx } from\n       * 'react/jsx-runtime` when react/jsx-runtime isn't a valid import\n       * source:  react/jsx-runtime.js *is*.\n       */\n      {\n        name: 'Resolve final runtime imports to files',\n        renderChunk: async (code: string, chunk: any) => {\n          /**\n           * Iterate over imports and rewrite all import sources to entry\n           * points.\n           */\n          for (const chunkImport of chunk.imports) {\n            /**\n             * If the import already has a file extension, do not touch.\n             */\n            if (extname(chunkImport)) continue;\n            /**\n             * The absolute location of the module entry point.\n             * `require.resolve` logic can be used to resolve the \"vanilla\"\n             * entry point as the output will be ES, and then module-specific\n             * extensions (.mjs, .cjs) will be tried.\n             */\n            let absEntryPoint = require.resolve(chunkImport);\n            const originalFileExt = extname(absEntryPoint);\n            const absEntryWithoutExtension = absEntryPoint.replace(\n              originalFileExt,\n              ''\n            );\n            /**\n             * Try to resolve ESM/CJS-specific extensions over .js when bundling\n             * for those formats.\n             */\n            if (opts.format === 'esm' || opts.format === 'cjs') {\n              for (const fileExtension of fileExtensions) {\n                const withExtension = absEntryWithoutExtension + fileExtension;\n                if (existsSync(withExtension)) {\n                  absEntryPoint = withExtension;\n                  break;\n                }\n              }\n            }\n\n            const packageJsonPath = getPackageJson(absEntryPoint);\n            if (!packageJsonPath || !existsSync(packageJsonPath)) continue;\n\n            /**\n             * Check if there's `exports` package.json logic. if there is, it\n             * controls the flow.\n             */\n            const packageJsonContent = readFileSync(packageJsonPath, 'utf-8');\n            const packageJson = JSON.parse(packageJsonContent);\n            const exportsFieldResolution = resolveExports.resolve(\n              packageJson,\n              chunkImport\n            );\n\n            /**\n             * If there is `exports` logic that resolves this import, do not\n             * rewrite it.\n             */\n            if (exportsFieldResolution) continue;\n\n            /**\n             * Remove unnecessary absolute specification.\n             */\n            const relativeEntryPoint = absEntryPoint.slice(\n              absEntryPoint.indexOf(chunkImport)\n            );\n            /**\n             * The pattern matching the \"from ...\" import statement for this\n             * import.\n             */\n            const importPattern = generateImportPattern(chunkImport);\n            /**\n             * Read the matched import/require statements and replace them.\n             */\n            const matches = code.match(importPattern) ?? [];\n            for (const match of matches) {\n              const rewritten = match.replace(chunkImport, relativeEntryPoint);\n              code = code.replace(match, rewritten);\n            }\n          }\n\n          return {\n            code,\n            map: null,\n          };\n        },\n      },\n      /**\n       * Ensure there's an empty default export. This is the only way to have a\n       * dist/index.mjs with `export { default } from './package.min.mjs'` and\n       * support default exports at all.\n       *\n       * @see https://www.npmjs.com/package/rollup-plugin-export-default\n       */\n      {\n        name: 'Ensure default exports',\n        renderChunk: async (code: string, chunk: any) => {\n          if (chunk.exports.includes('default') || !isEsm) {\n            return null;\n          }\n\n          return {\n            code: `${code}\\nexport default {};`,\n            map: null,\n          };\n        },\n      },\n    ],\n  };\n}\n","import { RollupOptions, OutputOptions } from 'rollup';\nimport { concatAllArray } from 'jpjs';\n\nimport { paths } from './constants';\nimport { ExportTsOptions, NormalizedOpts } from './types';\n\nimport { createRollupConfig } from './createRollupConfig';\nimport { existsSync } from 'fs';\nimport glob from 'tiny-glob';\n\n// check for custom example-ts.config.js\nlet exportTsConfig = {\n  rollup(config: RollupOptions, _options: ExportTsOptions): RollupOptions {\n    return config;\n  },\n};\n\nif (existsSync(paths.appConfig)) {\n  exportTsConfig = require(paths.appConfig);\n}\n\nexport async function createBuildConfigs(\n  opts: NormalizedOpts\n): Promise<Array<RollupOptions & { output: OutputOptions }>> {\n  const inputs = await glob('dist/**/*.js');\n  const allInputs = concatAllArray(\n    inputs.map((input: string) =>\n      createAllFormats(opts, input).map(\n        (options: ExportTsOptions, index: number) => ({\n          ...options,\n          // We want to know if this is the first run for each entryfile\n          // for certain plugins (e.g. css)\n          writeMeta: index === 0,\n        })\n      )\n    )\n  );\n\n  return await Promise.all(\n    allInputs.map(async (options: ExportTsOptions, index: number) => {\n      // pass the full rollup config to export-ts.config.js override\n      const config = await createRollupConfig(options, index);\n      return exportTsConfig.rollup(config, options);\n    })\n  );\n}\n\nfunction createAllFormats(\n  opts: NormalizedOpts,\n  input: string\n): [ExportTsOptions, ...ExportTsOptions[]] {\n  return [\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('cjs') && {\n      ...opts,\n      format: 'cjs',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('esm') && { ...opts, format: 'esm', input },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('umd') && {\n      ...opts,\n      format: 'umd',\n      env: 'production',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'development',\n      input,\n    },\n    opts.format.includes('system') && {\n      ...opts,\n      format: 'system',\n      env: 'production',\n      input,\n    },\n  ].filter(Boolean) as [ExportTsOptions, ...ExportTsOptions[]];\n}\n","import { Config } from '@jest/types';\n\nexport type JestConfigOptions = Partial<Config.InitialOptions>;\n\nexport function createJestConfig(\n  _: (relativePath: string) => void,\n  rootDir: string\n): JestConfigOptions {\n  const config: JestConfigOptions = {\n    transform: {\n      '.(ts|tsx)$': require.resolve('ts-jest/dist'),\n      '.(js|jsx)$': require.resolve('babel-jest'), // jest's default\n    },\n    transformIgnorePatterns: ['[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx)$'],\n    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n    collectCoverageFrom: ['src/**/*.{ts,tsx,js,jsx}'],\n    testMatch: ['<rootDir>/**/*.(spec|test).{ts,tsx,js,jsx}'],\n    testURL: 'http://localhost',\n    rootDir,\n    watchPlugins: [\n      require.resolve('jest-watch-typeahead/filename'),\n      require.resolve('jest-watch-typeahead/testname'),\n    ],\n  };\n\n  return config;\n}\n","import fs from 'fs-extra';\n\nimport { paths } from './constants';\nimport progressEstimator from 'progress-estimator';\n\nexport async function createProgressEstimator() {\n  await fs.ensureDir(paths.progressEstimatorCache);\n  return progressEstimator({\n    // All configuration keys are optional, but it's recommended to specify a storage location.\n    storagePath: paths.progressEstimatorCache,\n  });\n}\n","import { Template } from './template';\n\nconst basicTemplate: Template = {\n  name: 'basic',\n  dependencies: [\n    'husky',\n    'export-ts',\n    'tslib',\n    'typescript',\n    'size-limit',\n    '@size-limit/preset-small-lib',\n  ],\n  packageJson: {\n    // name: safeName,\n    version: '0.1.0',\n    license: 'MIT',\n    // author: author,\n    main: './dist/index.cjs',\n    module: './dist/index.mjs',\n    exports: {\n      './package.json': './package.json',\n      '.': {\n        import: './dist/index.mjs',\n        require: './dist/index.cjs',\n      },\n    },\n    // module: `dist/${safeName}.mjs`,\n    typings: `dist/index.d.ts`,\n    files: ['dist', 'src'],\n    engines: {\n      node: '>=14',\n    },\n    scripts: {\n      start: 'export-ts watch',\n      build: 'export-ts build',\n      test: 'export-ts test',\n      posttest: 'node test/import.mjs && node test/require.cjs',\n      lint: 'export-ts lint',\n      prepare: 'export-ts build',\n      size: 'size-limit',\n      analyze: 'size-limit --why',\n    },\n    peerDependencies: {},\n    husky: {\n      hooks: {\n        'pre-commit': 'export-ts lint',\n      },\n    },\n    prettier: {\n      printWidth: 80,\n      semi: true,\n      singleQuote: true,\n      trailingComma: 'es5',\n    },\n  },\n};\n\nexport default basicTemplate;\n","import { Template } from './template';\n\nimport basicTemplate from './basic';\nimport { PackageJson } from 'type-fest';\n\nconst reactTemplate: Template = {\n  name: 'react',\n  dependencies: [\n    ...basicTemplate.dependencies,\n    '@types/react',\n    '@types/react-dom',\n    'react',\n    'react-dom',\n  ],\n  packageJson: {\n    ...basicTemplate.packageJson,\n    peerDependencies: {\n      react: '>=16',\n    },\n    scripts: {\n      ...basicTemplate.packageJson.scripts,\n      test: 'export-ts test',\n    } as PackageJson['scripts'],\n  },\n};\n\nexport default reactTemplate;\n","import reactTemplate from './react';\nimport basicTemplate from './basic';\nimport storybookTemplate from './react-with-storybook';\n\nexport const templates = {\n  basic: basicTemplate,\n  react: reactTemplate,\n  'react-with-storybook': storybookTemplate,\n};\n","import { Template } from './template';\nimport reactTemplate from './react';\nimport { PackageJson } from 'type-fest';\n\nconst storybookTemplate: Template = {\n  dependencies: [\n    ...reactTemplate.dependencies,\n    '@babel/core',\n    '@storybook/addon-essentials',\n    '@storybook/addon-links',\n    '@storybook/addon-info',\n    '@storybook/addons',\n    '@storybook/react',\n    'react-is',\n    'babel-loader',\n  ],\n  name: 'react-with-storybook',\n  packageJson: {\n    ...reactTemplate.packageJson,\n    scripts: {\n      ...reactTemplate.packageJson.scripts,\n      storybook: 'start-storybook -p 6006',\n      'build-storybook': 'build-storybook',\n    } as PackageJson['scripts'],\n  },\n};\n\nexport default storybookTemplate;\n","#!/usr/bin/env node\n\nimport sade from 'sade';\nimport glob from 'glob-promise';\nimport { rollup, watch, RollupWatchOptions, WatcherOptions } from 'rollup';\nimport chalk from 'chalk';\nimport jest from 'jest';\nimport { CLIEngine } from 'eslint';\nimport logError from './logError';\nimport path from 'path';\nimport execa from 'execa';\nimport shell from 'shelljs';\nimport ora from 'ora';\nimport semver from 'semver';\nimport { paths } from './constants';\nimport * as Messages from './messages';\nimport { createBuildConfigs } from './createBuildConfigs';\nimport { createJestConfig, JestConfigOptions } from './createJestConfig';\nimport { createEslintConfig } from './createEslintConfig';\nimport {\n  resolveApp,\n  safePackageName,\n  clearConsole,\n  getNodeEngineRequirement,\n} from './utils';\n// import { concatAllArray } from 'jpjs';\nimport getInstallCmd from './getInstallCmd';\nimport getInstallArgs from './getInstallArgs';\n\nimport Input from 'enquirer/lib/prompts/input.js';\nimport Select from 'enquirer/lib/prompts/select.js';\n\nimport {\n  PackageJson,\n  WatchOpts,\n  BuildOpts,\n  ModuleFormat,\n  NormalizedOpts,\n} from './types';\nimport { createProgressEstimator } from './createProgressEstimator';\nimport { templates } from './templates';\nimport { composePackageJson } from './templates/utils';\nimport * as deprecated from './deprecated';\nimport fs from 'fs-extra';\nimport { readFileSync } from 'fs';\nimport { stat } from 'fs/promises';\nimport { runTsc } from './plugins/simple-ts';\n\nexport * from './errors';\n\nconst prog = sade('export-ts');\n\nlet appPackageJson: PackageJson;\ntry {\n  appPackageJson = JSON.parse(readFileSync(paths.appPackageJson, 'utf-8'));\n} catch (e) {}\n\nexport const isDir = (name: string) =>\n  stat(name)\n    .then((stats) => stats.isDirectory())\n    .catch(() => false);\n\nexport const isFile = (name: string) =>\n  stat(name)\n    .then((stats) => stats.isFile())\n    .catch(() => false);\n\nasync function jsOrTs(filename: string) {\n  const extension = (await isFile(resolveApp(filename + '.ts')))\n    ? '.ts'\n    : (await isFile(resolveApp(filename + '.tsx')))\n    ? '.tsx'\n    : (await isFile(resolveApp(filename + '.jsx')))\n    ? '.jsx'\n    : '.js';\n\n  return resolveApp(`${filename}${extension}`);\n}\n\nasync function getInputs(\n  entries?: string | string[],\n  source?: string\n): Promise<string[]> {\n  let entryList = [];\n  if (entries) {\n    if (!Array.isArray(entries)) {\n      entryList.push(entries);\n    } else {\n      entryList.push(...entries);\n    }\n  } else {\n    if (source) {\n      const appDir = resolveApp(source);\n      entryList.push(appDir);\n    } else {\n      const srcExists = await isDir(resolveApp('src'));\n      if (srcExists) {\n        const entryPoint = await jsOrTs('src/index');\n        entryList.push(entryPoint);\n      }\n    }\n  }\n\n  const inputPromises = entryList.map(async (file) => await glob(file));\n  const inputs = await Promise.all(inputPromises);\n  return inputs.flat();\n}\n\nprog\n  .command('create <pkg>')\n  .describe('Create a new package with ')\n  .example('create mypackage')\n  .option(\n    '--template',\n    `Specify a template. Allowed choices: [${Object.keys(templates).join(\n      ', '\n    )}]`\n  )\n  .example('create --template react mypackage')\n  .action(async (pkg: string, opts: any) => {\n    console.log(\n      chalk.blue(`\n::::::::::: ::::::::  :::::::::  :::    :::\n    :+:    :+:    :+: :+:    :+: :+:    :+:\n    +:+    +:+        +:+    +:+  +:+  +:+\n    +#+    +#++:++#++ +#+    +:+   +#++:+\n    +#+           +#+ +#+    +#+  +#+  +#+\n    #+#    #+#    #+# #+#    #+# #+#    #+#\n    ###     ########  #########  ###    ###\n`)\n    );\n    const bootSpinner = ora(`Creating ${chalk.bold.green(pkg)}...`);\n    let template;\n    // Helper fn to prompt the user for a different\n    // folder name if one already exists\n    async function getProjectPath(projectPath: string): Promise<string> {\n      const exists = await fs.pathExists(projectPath);\n      if (!exists) {\n        return projectPath;\n      }\n\n      bootSpinner.fail(`Failed to create ${chalk.bold.red(pkg)}`);\n      const prompt = new Input({\n        message: `A folder named ${chalk.bold.red(\n          pkg\n        )} already exists! ${chalk.bold('Choose a different name')}`,\n        initial: pkg + '-1',\n        result: (v: string) => v.trim(),\n      });\n\n      pkg = await prompt.run();\n      projectPath = (await fs.realpath(process.cwd())) + '/' + pkg;\n      bootSpinner.start(`Creating ${chalk.bold.green(pkg)}...`);\n      return await getProjectPath(projectPath); // recursion!\n    }\n\n    try {\n      // get the project path\n      const realPath = await fs.realpath(process.cwd());\n      let projectPath = await getProjectPath(realPath + '/' + pkg);\n\n      const prompt = new Select({\n        message: 'Choose a template',\n        choices: Object.keys(templates),\n      });\n\n      if (opts.template) {\n        template = opts.template.trim();\n        if (!prompt.choices.includes(template)) {\n          bootSpinner.fail(`Invalid template ${chalk.bold.red(template)}`);\n          template = await prompt.run();\n        }\n      } else {\n        template = await prompt.run();\n      }\n\n      bootSpinner.start();\n      // copy the template\n      await fs.copy(\n        path.resolve(__dirname, `../templates/${template}`),\n        projectPath,\n        {\n          overwrite: true,\n        }\n      );\n      // fix gitignore\n      await fs.move(\n        path.resolve(projectPath, './gitignore'),\n        path.resolve(projectPath, './.gitignore')\n      );\n\n      // update license year and author\n      let license: string = await fs.readFile(\n        path.resolve(projectPath, 'LICENSE'),\n        { encoding: 'utf-8' }\n      );\n\n      license = license.replace(/<year>/, `${new Date().getFullYear()}`);\n\n      // attempt to automatically derive author name\n      let author = getAuthorName();\n\n      if (!author) {\n        bootSpinner.stop();\n        const licenseInput = new Input({\n          name: 'author',\n          message: 'Who is the package author?',\n        });\n        author = await licenseInput.run();\n        setAuthorName(author);\n        bootSpinner.start();\n      }\n\n      license = license.replace(/<author>/, author.trim());\n\n      await fs.writeFile(path.resolve(projectPath, 'LICENSE'), license, {\n        encoding: 'utf-8',\n      });\n\n      const templateConfig = templates[template as keyof typeof templates];\n      const generatePackageJson = composePackageJson(templateConfig);\n\n      // Install deps\n      process.chdir(projectPath);\n      const safeName = safePackageName(pkg);\n      const pkgJson = generatePackageJson({ name: safeName, author });\n\n      const nodeVersionReq = getNodeEngineRequirement(pkgJson);\n      if (\n        nodeVersionReq &&\n        !semver.satisfies(process.version, nodeVersionReq)\n      ) {\n        bootSpinner.fail(Messages.incorrectNodeVersion(nodeVersionReq));\n        process.exit(1);\n      }\n\n      await fs.outputJSON(path.resolve(projectPath, 'package.json'), pkgJson);\n      bootSpinner.succeed(`Created ${chalk.bold.green(pkg)}`);\n      await Messages.start(pkg);\n    } catch (error) {\n      bootSpinner.fail(`Failed to create ${chalk.bold.red(pkg)}`);\n      logError(error);\n      process.exit(1);\n    }\n\n    const templateConfig = templates[template as keyof typeof templates];\n    const { dependencies: deps } = templateConfig;\n\n    const installSpinner = ora(Messages.installing(deps.sort())).start();\n    try {\n      const cmd = await getInstallCmd();\n      await execa(cmd, getInstallArgs(cmd, deps));\n      installSpinner.succeed('Installed dependencies');\n      console.log(await Messages.start(pkg));\n    } catch (error) {\n      installSpinner.fail('Failed to install dependencies');\n      logError(error);\n      process.exit(1);\n    }\n  });\n\nprog\n  .command('watch')\n  .describe('Rebuilds on any change')\n  .option('--entry, -i', 'Entry module')\n  .example('watch --entry src/foo.tsx')\n  .option('--target', 'Specify your target environment', 'browser')\n  .example('watch --target node')\n  .option('--name', 'Specify name exposed in UMD builds')\n  .example('watch --name Foo')\n  .option('--format', 'Specify module format(s)', 'cjs,esm')\n  .example('watch --format cjs,esm')\n  .option(\n    '--verbose',\n    'Keep outdated console output in watch mode instead of clearing the screen'\n  )\n  .example('watch --verbose')\n  .option('--noClean', \"Don't clean the dist folder\")\n  .example('watch --noClean')\n  .option('--tsconfig', 'Specify custom tsconfig path')\n  .example('watch --tsconfig ./tsconfig.foo.json')\n  .option('--onFirstSuccess', 'Run a command on the first successful build')\n  .example('watch --onFirstSuccess \"echo The first successful build!\"')\n  .option('--onSuccess', 'Run a command on a successful build')\n  .example('watch --onSuccess \"echo Successful build!\"')\n  .option('--onFailure', 'Run a command on a failed build')\n  .example('watch --onFailure \"The build failed!\"')\n  .option('--transpileOnly', 'Skip type checking')\n  .example('watch --transpileOnly')\n  .option('--extractErrors', 'Extract invariant errors to ./errors/codes.json.')\n  .example('watch --extractErrors')\n  .action(async (dirtyOpts: WatchOpts) => {\n    const opts = await normalizeOpts(dirtyOpts);\n    const buildConfigs = await createBuildConfigs(opts);\n    if (!opts.noClean) {\n      await cleanDistFolder();\n    }\n\n    if (opts.format.includes('cjs')) {\n      await writeCjsEntryFile(opts.name);\n    }\n    if (opts.format.includes('esm')) {\n      await writeMjsEntryFile(opts.name);\n    }\n\n    await cleanOldJS();\n\n    type Killer = execa.ExecaChildProcess | null;\n\n    let firstTime = true;\n    let successKiller: Killer = null;\n    let failureKiller: Killer = null;\n\n    function run(command?: string) {\n      if (!command) {\n        return null;\n      }\n\n      const [exec, ...args] = command.split(' ');\n      return execa(exec, args, {\n        stdio: 'inherit',\n      });\n    }\n\n    function killHooks() {\n      return Promise.all([\n        successKiller ? successKiller.kill('SIGTERM') : null,\n        failureKiller ? failureKiller.kill('SIGTERM') : null,\n      ]);\n    }\n\n    const spinner = ora().start();\n    watch(\n      (buildConfigs as RollupWatchOptions[]).map((inputOptions) => ({\n        watch: {\n          silent: true,\n          include: ['src/**'],\n          exclude: ['node_modules/**'],\n        } as WatcherOptions,\n        ...inputOptions,\n      }))\n    ).on('event', async (event) => {\n      // clear previous onSuccess/onFailure hook processes so they don't pile up\n      await killHooks();\n\n      if (event.code === 'START') {\n        if (!opts.verbose) {\n          clearConsole();\n        }\n        spinner.start(chalk.bold.cyan('Compiling modules...'));\n      }\n      if (event.code === 'ERROR') {\n        spinner.fail(chalk.bold.red('Failed to compile'));\n        logError(event.error);\n        failureKiller = run(opts.onFailure);\n      }\n      if (event.code === 'END') {\n        spinner.succeed(chalk.bold.green('Compiled successfully'));\n        console.log(`\n  ${chalk.dim('Watching for changes')}\n`);\n\n        try {\n          await deprecated.moveTypes();\n\n          if (firstTime && opts.onFirstSuccess) {\n            firstTime = false;\n            run(opts.onFirstSuccess);\n          } else {\n            successKiller = run(opts.onSuccess);\n          }\n        } catch (_error) {}\n      }\n    });\n  });\n\nprog\n  .command('build')\n  .describe('Build your project once and exit')\n  .option('--entry, -i', 'Entry module')\n  .example('build --entry src/foo.tsx')\n  .option('--target', 'Specify your target environment', 'browser')\n  .example('build --target node')\n  .option('--name', 'Specify name exposed in UMD builds')\n  .example('build --name Foo')\n  .option('--format', 'Specify module format(s)', 'cjs,esm')\n  .example('build --format cjs,esm')\n  .option('--legacy', 'Babel transpile and emit ES5.')\n  .example('build --legacy')\n  .option('--tsconfig', 'Specify custom tsconfig path')\n  .example('build --tsconfig ./tsconfig.foo.json')\n  .option('--transpileOnly', 'Skip type checking')\n  .example('build --transpileOnly')\n  .option(\n    '--extractErrors',\n    'Extract errors to ./errors/codes.json and provide a url for decoding.'\n  )\n  .example(\n    'build --extractErrors=https://reactjs.org/docs/error-decoder.html?invariant='\n  )\n  .action(async (dirtyOpts: BuildOpts) => {\n    const opts = await normalizeOpts(dirtyOpts);\n\n    console.log('> Cleaning dist/ and compiling TS.');\n    await cleanDistFolder();\n    await runTsc();\n\n    const buildConfigs = await createBuildConfigs(opts);\n    const progressIndicator = await createProgressEstimator();\n    if (opts.format.includes('cjs')) {\n      await progressIndicator(\n        writeCjsEntryFile(opts.name).catch(logError),\n        'Creating CJS entry file'\n      );\n    }\n    if (opts.format.includes('esm')) {\n      await progressIndicator(\n        writeMjsEntryFile(opts.name).catch(logError),\n        'Creating MJS entry file'\n      );\n    }\n    try {\n      await progressIndicator(\n        Promise.all(\n          buildConfigs.map(async (buildConfig) => {\n            const bundle = await rollup(buildConfig);\n            await bundle.write(buildConfig.output);\n          })\n        ),\n        'JS ➡ JS: Compressing and transforming emitted TypeScript output.'\n      );\n      /**\n       * Remove old index.js.\n       */\n      await cleanOldJS();\n    } catch (error) {\n      logError(error);\n      process.exit(1);\n    }\n  });\n\nasync function normalizeOpts(opts: WatchOpts): Promise<NormalizedOpts> {\n  return {\n    ...opts,\n    name: opts.name || appPackageJson.name,\n    input: await getInputs(opts.entry, appPackageJson.source),\n    format: opts.format.split(',').map((format: string) => {\n      if (format === 'es') {\n        return 'esm';\n      }\n      return format;\n    }) as [ModuleFormat, ...ModuleFormat[]],\n  };\n}\n\nasync function cleanOldJS() {\n  const progressIndicator = await createProgressEstimator();\n  const oldJS = await glob(`${paths.appDist}/**/*.js`);\n  // console.log({ oldJS });\n  await progressIndicator(\n    Promise.all(oldJS.map(async (file: string) => await fs.unlink(file))),\n    'Removing original emitted TypeScript output (dist/**/*.js).'\n  );\n}\n\nasync function cleanDistFolder() {\n  await fs.remove(paths.appDist);\n}\n\nfunction writeCjsEntryFile(name: string) {\n  const safeName = safePackageName(name);\n  /**\n   * After an hour of tinkering, this is the *only* way to write this code that\n   * will not break Rollup (by pulling process.env.NODE_ENV out with\n   * destructuring).\n   */\n  const contents = `#!/usr/bin/env node\n\n'use strict';\nmodule.exports = require('./${safeName}.production.min.cjs');\n`;\n\n  return fs.outputFile(path.join(paths.appDist, 'index.cjs'), contents);\n}\n\nfunction writeMjsEntryFile(name: string) {\n  const contents = `#!/usr/bin/env node\n\nexport { default } from './${name}.min.mjs';\nexport * from './${name}.min.mjs';\n`;\n\n  return fs.outputFile(path.join(paths.appDist, 'index.mjs'), contents);\n}\n\nfunction getAuthorName() {\n  let author = '';\n\n  author = shell\n    .exec('npm config get init-author-name', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  author = shell\n    .exec('git config --global user.name', { silent: true })\n    .stdout.trim();\n  if (author) {\n    setAuthorName(author);\n    return author;\n  }\n\n  author = shell\n    .exec('npm config get init-author-email', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  author = shell\n    .exec('git config --global user.email', { silent: true })\n    .stdout.trim();\n  if (author) return author;\n\n  return author;\n}\n\nfunction setAuthorName(author: string) {\n  shell.exec(`npm config set init-author-name \"${author}\"`, { silent: true });\n}\n\nprog\n  .command('test')\n  .describe('Run jest test runner. Passes through all flags directly to Jest')\n  .action(async (opts: { config?: string }) => {\n    // Do this as the first thing so that any code reading it knows the right env.\n    process.env.BABEL_ENV = 'test';\n    process.env.NODE_ENV = 'test';\n    // Makes the script crash on unhandled rejections instead of silently\n    // ignoring them. In the future, promise rejections that are not handled will\n    // terminate the Node.js process with a non-zero exit code.\n    process.on('unhandledRejection', (err) => {\n      throw err;\n    });\n\n    const argv = process.argv.slice(2);\n    let jestConfig: JestConfigOptions = {\n      ...createJestConfig(\n        (relativePath) => path.resolve(__dirname, '..', relativePath),\n        opts.config ? path.dirname(opts.config) : paths.appRoot\n      ),\n      ...appPackageJson.jest,\n    };\n\n    // Allow overriding with jest.config\n    const defaultPathExists = await fs.pathExists(paths.jestConfig);\n    if (opts.config || defaultPathExists) {\n      const jestConfigPath = resolveApp(opts.config || paths.jestConfig);\n      const jestConfigContents: JestConfigOptions = require(jestConfigPath);\n      jestConfig = { ...jestConfig, ...jestConfigContents };\n    }\n\n    // if custom path, delete the arg as it's already been merged\n    if (opts.config) {\n      let configIndex = argv.indexOf('--config');\n      if (configIndex !== -1) {\n        // case of \"--config path\", delete both args\n        argv.splice(configIndex, 2);\n      } else {\n        // case of \"--config=path\", only one arg to delete\n        const configRegex = /--config=.+/;\n        configIndex = argv.findIndex((arg) => arg.match(configRegex));\n        if (configIndex !== -1) {\n          argv.splice(configIndex, 1);\n        }\n      }\n    }\n\n    argv.push(\n      '--config',\n      JSON.stringify({\n        ...jestConfig,\n      })\n    );\n\n    const [, ...argsToPassToJestCli] = argv;\n    jest.run(argsToPassToJestCli);\n  });\n\nprog\n  .command('lint')\n  .describe('Run eslint with Prettier')\n  .example('lint src test')\n  .option('--fix', 'Fixes fixable errors and warnings')\n  .example('lint src test --fix')\n  .option('--ignore-pattern', 'Ignore a pattern')\n  .example('lint src test --ignore-pattern test/foobar.ts')\n  .option(\n    '--max-warnings',\n    'Exits with non-zero error code if number of warnings exceed this number',\n    Infinity\n  )\n  .example('lint src test --max-warnings 10')\n  .option('--write-file', 'Write the config file locally')\n  .example('lint --write-file')\n  .option('--report-file', 'Write JSON report to file locally')\n  .example('lint --report-file eslint-report.json')\n  .action(\n    async (opts: {\n      fix: boolean;\n      'ignore-pattern': string;\n      'write-file': boolean;\n      'report-file': string;\n      'max-warnings': number;\n      _: string[];\n    }) => {\n      if (opts['_'].length === 0 && !opts['write-file']) {\n        const defaultInputs = ['src', 'test'].filter(fs.existsSync);\n        opts['_'] = defaultInputs;\n        console.log(\n          chalk.yellow(\n            `Defaulting to \"export-ts lint ${defaultInputs.join(' ')}\"`,\n            '\\nYou can override this in the package.json scripts, like \"lint\": \"export-ts lint src otherDir\"'\n          )\n        );\n      }\n\n      const config = await createEslintConfig({\n        pkg: appPackageJson,\n        rootDir: paths.appRoot,\n        writeFile: opts['write-file'],\n      });\n\n      const cli = new CLIEngine({\n        baseConfig: {\n          ...config,\n          ...appPackageJson.eslint,\n        },\n        extensions: ['.ts', '.tsx', '.js', '.jsx'],\n        fix: opts.fix,\n        ignorePattern: opts['ignore-pattern'],\n      });\n      const report = cli.executeOnFiles(opts['_']);\n      if (opts.fix) {\n        CLIEngine.outputFixes(report);\n      }\n      console.log(cli.getFormatter()(report.results));\n      if (opts['report-file']) {\n        await fs.outputFile(\n          opts['report-file'],\n          cli.getFormatter('json')(report.results)\n        );\n      }\n      if (report.errorCount) {\n        process.exit(1);\n      }\n      if (report.warningCount > opts['max-warnings']) {\n        process.exit(1);\n      }\n    }\n  );\n\nprog.parse(process.argv);\n","import { Template } from '../template';\n\ninterface ProjectArgs {\n  name: string;\n  author: string;\n}\nexport const composePackageJson =\n  (template: Template) =>\n  ({ name, author }: ProjectArgs) => {\n    return {\n      ...template.packageJson,\n      name,\n      author,\n      'size-limit': [\n        {\n          path: `dist/${name}.production.min.cjs`,\n          limit: '10 KB',\n        },\n        {\n          path: `dist/${name}.min.mjs`,\n          limit: '10 KB',\n        },\n      ],\n    };\n  };\n","export const indentString = (msg: string, indent = 1) => {\n  return `${' '.repeat(indent * 2)}${msg}`;\n};\n\nexport const indentLog = (msg: string, indent = 1) => {\n  console.log(indentString(msg, indent));\n};\n","import { InstallCommand } from './getInstallCmd';\n\nexport default function getInstallArgs(\n  cmd: InstallCommand,\n  packages: string[]\n) {\n  switch (cmd) {\n    case 'npm':\n      return ['install', ...packages, '--save-dev'];\n    case 'yarn':\n      return ['add', ...packages, '--dev'];\n  }\n}\n","import * as fs from 'fs-extra';\n\nimport { paths } from './constants';\n\n/*\n  This was originally needed because the default\n  tsconfig.compilerOptions.rootDir was set to './' instead of './src'.\n  Now that it's set to './src', this is now deprecated.\n  To ensure a stable upgrade path for users, leave the warning in for\n  6 months - 1 year, then change it to an error in a breaking bump and leave\n  that in for some time too.\n*/\nexport async function moveTypes() {\n  const appDistSrc = paths.appDist + '/src';\n\n  const pathExists = await fs.pathExists(appDistSrc);\n  if (!pathExists) return;\n\n  // see note above about deprecation window\n  console.warn(\n    '[export-ts]: Your rootDir is currently set to \"./\". Please change your ' +\n      'rootDir to \"./src\".\\n' +\n      'export-ts has deprecated setting tsconfig.compilerOptions.rootDir to ' +\n      '\"./\" as it caused buggy output for declarationMaps and more.\\n' +\n      'You may also need to change your include to remove \"test\", which also ' +\n      'caused declarations to be unnecessarily created for test files.'\n  );\n\n  // Move the type declarations to the base of the ./dist folder\n  await fs.copy(appDistSrc, paths.appDist, {\n    overwrite: true,\n  });\n  await fs.remove(appDistSrc);\n}\n","/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @see https://github.com/GoogleChromeLabs/proxx/blob/master/lib/simple-ts.js\n * @see https://twitter.com/jaffathecake/status/1145979217852678144\n */\n\nimport { spawn } from 'child_process';\nimport * as ts from 'typescript';\nimport { createProgressEstimator } from '../createProgressEstimator';\n\n// const extRe = /\\.tsx?$/;\n\nexport function loadConfig() {\n  const fileName = ts.findConfigFile('.', ts.sys.fileExists);\n  if (!fileName) throw Error('tsconfig not found');\n  const text = ts.sys.readFile(fileName) ?? '';\n  const loadedConfig = ts.parseConfigFileTextToJson(fileName, text).config;\n  const parsedTsConfig = ts.parseJsonConfigFileContent(\n    loadedConfig,\n    ts.sys,\n    process.cwd(),\n    undefined,\n    fileName\n  );\n  return parsedTsConfig;\n}\n\nexport function resolveId(id: string, importer = '') {\n  const config = loadConfig();\n\n  // If there isn't an importer, it's an entry point, so we don't need to resolve it relative\n  // to something.\n  if (!importer) return null;\n\n  const tsResolve = ts.resolveModuleName(id, importer, config.options, ts.sys);\n\n  if (\n    // It didn't find anything\n    !tsResolve.resolvedModule ||\n    // Or if it's linking to a definition file, it's something in node_modules,\n    // or something local like css.d.ts\n    tsResolve.resolvedModule.extension === '.d.ts'\n  ) {\n    return null;\n  }\n\n  return tsResolve.resolvedModule.resolvedFileName;\n}\n\nexport async function runTsc({ transpileOnly = false, watch = false } = {}) {\n  /**\n   * Force src/ rootDir, dist/ outDir, and override noEmit.\n   */\n  const argString = `--rootDir src/ --outDir dist/ --noEmit false --strict ${transpileOnly}`;\n  const args = argString.split(' ');\n\n  console.log(`> Command: tsc ${args.join(' ')}`);\n  const progressIndicator = await createProgressEstimator();\n\n  await progressIndicator(\n    new Promise((resolve) => {\n      const proc = spawn('tsc', args, {\n        stdio: 'inherit',\n      });\n\n      proc.on('exit', (code) => {\n        if (code !== 0) {\n          throw Error('TypeScript build failed');\n        }\n        resolve(void 0);\n      });\n    }),\n    `TS ➡ JS: Compiling with TSC`\n  );\n\n  if (watch) {\n    spawn('tsc', [...args, '--watch', '--preserveWatchOutput'], {\n      stdio: 'inherit',\n    });\n  }\n}\n\n/**\n * This simply runs `tsc` in process.cwd(), reading the TSConfig in that\n * directory, and forcing an emit.\n */\nexport default function simpleTS() {\n  return {\n    name: 'simple-ts',\n    /**\n     * Wait for the process to finish.\n     */\n    buildStart: async () => await runTsc(),\n  };\n}\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { CLIEngine } from 'eslint';\nimport { PackageJson } from './types';\nimport { getReactVersion } from './utils';\n\ninterface CreateEslintConfigArgs {\n  pkg: PackageJson;\n  rootDir: string;\n  writeFile: boolean;\n}\nexport async function createEslintConfig({\n  pkg,\n  rootDir,\n  writeFile,\n}: CreateEslintConfigArgs): Promise<CLIEngine.Options['baseConfig'] | void> {\n  const isReactLibrary = Boolean(getReactVersion(pkg));\n\n  const config = {\n    extends: [\n      'react-app',\n      'prettier/@typescript-eslint',\n      'plugin:prettier/recommended',\n    ],\n    settings: {\n      react: {\n        // Fix for https://github.com/jaredpalmer/tsdx/issues/279\n        version: isReactLibrary ? 'detect' : '999.999.999',\n      },\n    },\n  };\n\n  if (!writeFile) {\n    return config;\n  }\n\n  const file = path.join(rootDir, '.eslintrc.js');\n  try {\n    await fs.writeFile(\n      file,\n      `module.exports = ${JSON.stringify(config, null, 2)}`,\n      { flag: 'wx' }\n    );\n  } catch (e: any) {\n    if (e.code === 'EEXIST') {\n      console.error(\n        'Error trying to save the Eslint configuration file:',\n        `${file} already exists.`\n      );\n    } else {\n      console.error(e);\n    }\n\n    return config;\n  }\n}\n"],"names":["error","bind","name","description","message","stderr","loc","dim","err","replace","stack","chalk","e","toLowerCase","relativePath","paths","appPackageJson","resolveApp","tsconfigJson","testsSetup","appRoot","appSrc","appErrorsJson","appErrors","appDist","appConfig","jestConfig","progressEstimatorCache","n","cmd","t","start","async","projectName","getInstallCmd","commands","install","build","test","green","Output.cmd","originalKey","evalToString","r","ast","Error","type","readFile","parse","fileContents","c","source","errorMsgLiteral","astPath","currentID","allErrorIDs","length","existingErrorMap","u","Object","replacement","configItemToMerge","forEach","mergedItems","itemToMergeWithIndex","merge","options","item","require","custom","config","defaultPlugins","method","presetEnv","defaultPresets","targets","getPackageJson","absPath","parts","split","rootPath","moduleParts","sep","moduleName","startsWith","slice","join","resolve","EXTERNAL_PACKAGES","errorCodeOpts","errorMapFilePath","exportTsConfig","rollup","_options","createBuildConfigs","opts","inputs","glob","allInputs","concatAllArray","map","input","format","includes","env","filter","Boolean","createAllFormats","index","writeMeta","Promise","all","outputNum","findAndRecordErrorCodes","extractErrors","isEsm","shouldMinify","undefined","minify","formatString","fileExtension","safePackageName","tsconfigJSON","ts","readConfigFile","tsconfig","sys","tsCompilerOptions","parseJsonConfigFileContent","PRODUCTION","process","NODE_ENV","fileExtensions","inputWithoutExtension","extname","external","id","isAbsolute","shimMissingExports","treeshake","propertyReadSideEffects","output","file","freeze","esModule","esModuleInterop","safeVariableName","sourcemap","globals","react","exports","plugins","transform","code","resolvePlugin","modulesOnly","browser","target","extensions","commonjs","esmExternals","requireReturnsDefault","transformMixedEsModules","include","json","legacy","babelPluginExportTs","exclude","DEFAULT_BABEL_EXTENSIONS","passPerPreset","node","esmodules","babelHelpers","sourceMaps","terser","keep_quoted_props","comments","compress","keep_infinity","pure_getters","passes","ecma","module","toplevel","optimizeLodashImports","useLodashEs","renderChunk","_","JSON","stringify","chunk","chunkImport","imports","absEntryPoint","originalFileExt","absEntryWithoutExtension","withExtension","existsSync","packageJsonPath","packageJsonContent","readFileSync","packageJson","resolveExports","relativeEntryPoint","indexOf","importPattern","RegExp","matches","match","rewritten","createRollupConfig","createJestConfig","rootDir","transformIgnorePatterns","moduleFileExtensions","collectCoverageFrom","testMatch","testURL","watchPlugins","createProgressEstimator","fs","ensureDir","progressEstimator","storagePath","dependencies","version","license","main","import","typings","files","engines","scripts","posttest","lint","prepare","size","analyze","peerDependencies","husky","hooks","prettier","printWidth","semi","singleQuote","trailingComma","reactTemplate","basicTemplate","templates","basic","storybook","prog","sade","isDir","stat","then","stats","isDirectory","catch","isFile","getInputs","entries","entryList","Array","isArray","push","appDir","entryPoint","filename","extension","jsOrTs","inputPromises","flat","normalizeOpts","entry","cleanOldJS","progressIndicator","oldJS","unlink","cleanDistFolder","remove","writeCjsEntryFile","contents","outputFile","path","writeMjsEntryFile","setAuthorName","author","shell","exec","silent","command","describe","example","option","keys","action","pkg","console","log","blue","bootSpinner","ora","bold","template","realPath","realpath","cwd","projectPath","getProjectPath","pathExists","fail","red","prompt","Input","initial","result","v","trim","run","Select","choices","copy","__dirname","overwrite","move","encoding","Date","getFullYear","stdout","getAuthorName","stop","licenseInput","writeFile","generatePackageJson","limit","composePackageJson","chdir","pkgJson","nodeVersionReq","getNodeEngineRequirement","semver","satisfies","requiredVersion","cyan","exit","outputJSON","succeed","Messages.start","logError","templateConfig","deps","installSpinner","packages","sort","msg","indent","repeat","indentString","execa","getInstallArgs","dirtyOpts","buildConfigs","noClean","firstTime","successKiller","failureKiller","args","stdio","spinner","watch","inputOptions","on","event","kill","verbose","onFailure","appDistSrc","warn","deprecated.moveTypes","onFirstSuccess","onSuccess","_error","transpileOnly","spawn","runTsc","buildConfig","bundle","write","BABEL_ENV","argv","dirname","jest","defaultPathExists","jestConfigPath","jestConfigContents","configIndex","splice","configRegex","findIndex","arg","argsToPassToJestCli","Infinity","defaultInputs","yellow","extends","settings","devDependencies","getReactVersion","flag","createEslintConfig","cli","CLIEngine","baseConfig","eslint","fix","ignorePattern","report","executeOnFiles","outputFixes","getFormatter","results","errorCount","warningCount"],"mappings":"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"}